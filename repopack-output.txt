================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-07-25T18:51:21.006Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Files
================================================================

================
File: app/(auth)/_layout.tsx
================
import { Stack } from 'expo-router';

import { AUTH_SCREENS, COLORS } from '@/constants';
import { scale } from '@/utils';

export default function Layout() {
  return (
    <Stack>
      <Stack.Screen name={AUTH_SCREENS.AUTH_PAGE} options={{ headerShown: false }} />
      <Stack.Screen
        name={AUTH_SCREENS.OTP_PAGE}
        options={{
          headerTitle: 'OTP Verification',
          headerBackTitleVisible: false,
          headerBackVisible: true,
          headerBackTitleStyle: {
            fontSize: scale(20),
          },
          headerStyle: {
            backgroundColor: COLORS.themeBackground,
          },
        }}
      />
    </Stack>
  );
}

================
File: app/(auth)/index.tsx
================
import { useRouter } from 'expo-router';
import React from 'react';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

import { FlashMessage, LoadingModal } from '@/components';
import { AUTH_SCREENS, BASE_SCREENS } from '@/constants';
import { useAuth } from '@/hooks';
import { Authentication } from '@/screens';

const Page = () => {
  const {
    signInWithGoogle,
    isGoogleSignInLoading,
    isPhoneVerificationLoading,
    sendPhoneVerification,
    skipAuthentication,
  } = useAuth();
  const router = useRouter();
  const insets = useSafeAreaInsets();

  const handleGoogleLogin = async () => {
    try {
      await signInWithGoogle();
    } catch {
      FlashMessage({
        message: 'Failed to Login using google',
      });
    }
  };

  const handlePhoneLogin = async (phoneNumber: string) => {
    try {
      await sendPhoneVerification(phoneNumber);
      router.navigate({
        pathname: AUTH_SCREENS.OTP_PAGE,
        params: { phoneNumber },
      });
    } catch {
      FlashMessage({
        message: 'Failed to send OTP',
      });
    }
  };

  const handleSkip = () => {
    skipAuthentication();
    router.replace(BASE_SCREENS.LOCATION_SCREENS);
  };

  return (
    <>
      <LoadingModal modalVisible={isPhoneVerificationLoading} title="Sending OTP" />
      <Authentication
        insets={insets}
        onPressSkip={handleSkip}
        onPressGoogle={handleGoogleLogin}
        onPressPhoneNumber={handlePhoneLogin}
        isGoogleSignInLoading={isGoogleSignInLoading}
      />
    </>
  );
};

export default Page;

================
File: app/(auth)/otp.tsx
================
import { useLocalSearchParams } from 'expo-router';
import React from 'react';

import { FlashMessage } from '@/components';
import { useAuth } from '@/hooks';
import { OtpVerification } from '@/screens';

const Page = () => {
  const { phoneNumber } = useLocalSearchParams<{ phoneNumber: string }>();
  const { verifyPhoneCode, sendPhoneVerification } = useAuth();

  const handleVerifyOtp = async (otp: string) => {
    await verifyPhoneCode(otp);
  };

  const handleResendOtp = async () => {
    if (!phoneNumber) return;
    try {
      await sendPhoneVerification(phoneNumber);
    } catch {
      FlashMessage({
        message: 'Failed to send OTP',
      });
    }
  };

  return (
    <OtpVerification
      phoneNumber={phoneNumber || ''}
      onSubmitOtp={handleVerifyOtp}
      onResendOtp={handleResendOtp}
    />
  );
};

export default Page;

================
File: app/(location)/_layout.tsx
================
import { Redirect, Stack } from 'expo-router';

import { COLORS, LOCATION_SCREENS } from '@/constants';
import { useLocationStore } from '@/store';

export default function LocationLayout() {
  const locationIsSet = useLocationStore((state) => state.isSet);

  if (locationIsSet) return <Redirect href="(tabs)" />;

  return (
    <Stack>
      <Stack.Screen name={LOCATION_SCREENS.CURRENT_LOCATION} options={{ headerShown: false }} />
      <Stack.Screen
        name={LOCATION_SCREENS.SELECT_LOCATION}
        options={{
          headerTitle: 'Set Location',
          headerBackTitleVisible: false,
          headerTitleStyle: {
            color: COLORS.fontMainColor,
          },
        }}
      />
    </Stack>
  );
}

================
File: app/(location)/index.tsx
================
import * as Linking from 'expo-linking';
import { LocationObjectCoords, PermissionStatus } from 'expo-location';
import { useRouter } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import React, { useRef } from 'react';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

import { FlashMessage, LocationPickerBottomSheet } from '@/components';
import { LocationPickerBottomSheetI } from '@/components/LocationPickerBottomSheet/types';
import { COLORS, LOCATION_SCREENS } from '@/constants';
import { useLocationPermission } from '@/hooks';
import { CurrentLocation } from '@/screens';

function Page() {
  const inset = useSafeAreaInsets();
  const router = useRouter();
  const { getCurrentLocation, getLocationPermission } = useLocationPermission();
  const bottomSheetRef = useRef<LocationPickerBottomSheetI>(null);

  const handlePresentModalPress = () => bottomSheetRef.current?.onOpen();

  const setCurrentLocation = async () => {
    const locationPermission = await getLocationPermission();

    const { status, canAskAgain } = locationPermission;
    if (status !== PermissionStatus.GRANTED && !canAskAgain) {
      FlashMessage({
        message:
          'Tap on this message to open Settings then allow app to use location from permissions.',
        onPress: async () => {
          await Linking.openSettings();
        },
      });
      return;
    }
    const currentLocationStatus = await getCurrentLocation();
    if (currentLocationStatus.error) {
      FlashMessage({
        message: currentLocationStatus.message ?? 'Failed to get current location',
      });
      return;
    }
    router.navigate({
      pathname: LOCATION_SCREENS.SELECT_LOCATION,
      params: currentLocationStatus.coords as LocationObjectCoords,
    });
  };
  return (
    <>
      <StatusBar style="light" />
      <LocationPickerBottomSheet ref={bottomSheetRef} />
      <CurrentLocation
        style={{
          backgroundColor: COLORS.selectedText,
          paddingTop: inset.top,
          paddingBottom: inset.bottom,
        }}
        onPressSetCurrentLocation={setCurrentLocation}
        onPressSelectLocation={handlePresentModalPress}
      />
    </>
  );
}

export default Page;

================
File: app/(location)/selectLocation.tsx
================
import { useLocalSearchParams, useRouter } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import React, { useState } from 'react';
import { Region } from 'react-native-maps';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

import { SelectLocation } from '@/screens';
import { useLocationStore } from '@/store';

const LATITUDE = 26.867287853605735;
const LONGITUDE = 80.95443866441771;
const LATITUDE_DELTA = 40;
const LONGITUDE_DELTA = 40;

function Page() {
  const { longitude, latitude } = useLocalSearchParams();
  const router = useRouter();
  const inset = useSafeAreaInsets();
  const setLocation = useLocationStore((state) => state.setLocation);
  const [label, setLabel] = useState(
    longitude && latitude ? 'Current Location' : 'Selected Location'
  );
  const [coordinates, setCorrdinates] = useState({
    latitude: Number(latitude) || LATITUDE,
    longitude: Number(longitude) || LONGITUDE,
    latitudeDelta: Number(latitude) ? 0.003 : LATITUDE_DELTA,
    longitudeDelta: Number(longitude) ? 0.003 : LONGITUDE_DELTA,
  });

  const onSelectLocation = () => {
    setLocation({
      label,
      address: label,
      latitude: coordinates.latitude,
      longitude: coordinates.longitude,
    });
    router.replace('(tabs)');
  };
  const onRegionChangeComplete = (coordinates: Region) => {
    setCorrdinates({
      ...coordinates,
    });
  };

  const onPanDrag = () => {
    setLabel('Selected Location');
  };

  return (
    <>
      <StatusBar style="dark" />
      <SelectLocation
        inset={inset}
        onPanDrag={onPanDrag}
        onPressSelectLocation={onSelectLocation}
        onRegionChangeComplete={onRegionChangeComplete}
        coordinates={coordinates}
        setLabel={setLabel}
      />
    </>
  );
}

export default Page;

================
File: app/(tabs)/(account)/(network-tabs)/_layout.tsx
================
import {
  MaterialTopTabNavigationEventMap,
  MaterialTopTabNavigationOptions,
  createMaterialTopTabNavigator,
} from '@react-navigation/material-top-tabs';
import { ParamListBase, TabNavigationState } from '@react-navigation/native';
import { withLayoutContext } from 'expo-router';

import { COLORS, NETWORK_SCREENS } from '@/constants';
import { scale } from '@/utils';

const { Navigator } = createMaterialTopTabNavigator();

export const MaterialTopTabs = withLayoutContext<
  MaterialTopTabNavigationOptions,
  typeof Navigator,
  TabNavigationState<ParamListBase>,
  MaterialTopTabNavigationEventMap
>(Navigator);

export default function TabLayout() {
  return (
    <MaterialTopTabs
      screenOptions={{
        tabBarActiveTintColor: COLORS.fontMainColor,
        tabBarInactiveTintColor: COLORS.fontSecondColor,
        tabBarStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        tabBarIndicatorStyle: {
          backgroundColor: COLORS.buttonbackground,
          height: scale(2),
        },
      }}>
      <MaterialTopTabs.Screen name={NETWORK_SCREENS.FOLLOWING} options={{ title: 'Following' }} />
      <MaterialTopTabs.Screen name={NETWORK_SCREENS.FOLLOWERS} options={{ title: 'Followers' }} />
    </MaterialTopTabs>
  );
}

================
File: app/(tabs)/(account)/(network-tabs)/followers.tsx
================
import React from 'react';

import { Followers } from '@/screens';

const Page = () => {
  return <Followers />;
};

export default Page;

================
File: app/(tabs)/(account)/(network-tabs)/index.tsx
================
import React from 'react';

import { Following } from '@/screens';

const Page = () => {
  return <Following />;
};

export default Page;

================
File: app/(tabs)/(account)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { ACCOUNT_SCREENS, COLORS } from '@/constants';
import { textStyles } from '@/utils';

export default function AccountLayout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen
        name={ACCOUNT_SCREENS.MAIN_ACCOUNT}
        options={{
          headerTitle: 'My Account',
        }}
      />
      <Stack.Screen
        name={ACCOUNT_SCREENS.HELP}
        options={{
          headerTitle: 'Help and Support',
        }}
      />
      <Stack.Screen name={ACCOUNT_SCREENS.SETTINGS} />
      <Stack.Screen name={ACCOUNT_SCREENS.PROFILE} />
      <Stack.Screen name={ACCOUNT_SCREENS.PRIVACY} />
      <Stack.Screen name={ACCOUNT_SCREENS.NOTIFICATIONS} />
      <Stack.Screen name={ACCOUNT_SCREENS.HELP_BROWSER} />
      <Stack.Screen
        name={ACCOUNT_SCREENS.NETWORK}
        options={{
          headerTitle: 'My Network',
          headerTitleStyle: {
            color: COLORS.fontMainColor,
          },
        }}
      />
    </Stack>
  );
}

================
File: app/(tabs)/(account)/help.tsx
================
import { useRouter } from 'expo-router';
import React from 'react';
import { Share } from 'react-native';

import { FlashMessage } from '@/components';
import { ACCOUNT_SCREENS } from '@/constants';
import { Help } from '@/screens';

async function share() {
  try {
    const result = await Share.share({
      title: 'App link',
      message: 'Install this app and enjoy your friend community',
    });
    if (result.action === Share.sharedAction) {
      if (result.activityType) {
        // shared with activity type of result.activityType
        FlashMessage({ message: 'The invitation has been sent', type: 'success' });
      } else {
        // shared
      }
    } else if (result.action === Share.dismissedAction) {
      // dismissed
    }
  } catch (error) {
    if (error instanceof Error) {
      FlashMessage({ message: error.message, type: 'warning' });
    }
  }
}

const Page = () => {
  const router = useRouter();
  return (
    <Help
      onPressShare={share}
      onPressHelpBrowser={() => router.navigate(ACCOUNT_SCREENS.HELP_BROWSER)}
    />
  );
};

export default Page;

================
File: app/(tabs)/(account)/helpBrowser.tsx
================
import React from 'react';

import { HelpBrowser } from '@/screens';

const Page = () => {
  return <HelpBrowser url="https://github.com/kashaf12" />;
};

export default Page;

================
File: app/(tabs)/(account)/index.tsx
================
import { useRouter } from 'expo-router';
import React from 'react';

import { ACCOUNT_SCREENS } from '@/constants';
import { MainAccount } from '@/screens';

const Page = () => {
  const router = useRouter();
  return (
    <MainAccount
      onPressHelp={() => router.navigate(ACCOUNT_SCREENS.HELP)}
      onPressSettings={() => router.navigate(ACCOUNT_SCREENS.SETTINGS)}
      onPressProfile={() => router.navigate(ACCOUNT_SCREENS.PROFILE)}
      onPressNetwork={() => router.navigate(ACCOUNT_SCREENS.NETWORK)}
    />
  );
};

export default Page;

================
File: app/(tabs)/(account)/notifications.tsx
================
import React from 'react';

import { Notifications } from '@/screens';

const Page = () => {
  return <Notifications />;
};

export default Page;

================
File: app/(tabs)/(account)/privacy.tsx
================
import React from 'react';

import { Privacy } from '@/screens';

const Page = () => {
  return <Privacy />;
};

export default Page;

================
File: app/(tabs)/(account)/profile.tsx
================
import { useNavigation } from 'expo-router';
import React, { useLayoutEffect } from 'react';
import { Share } from 'react-native';

import { FlashMessage, RightButton } from '@/components';
import { COLORS } from '@/constants';
import { Profile } from '@/screens';

const Page = () => {
  const navigation = useNavigation();

  async function share() {
    //console.log('share')
    try {
      const result = await Share.share({
        title: 'App link',
        message: 'Install this app and enjoy your friend community',
      });
      //console.log("Share Action", result.action, Share.sharedAction)
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
          FlashMessage({ message: 'The invitation has been sent', type: 'success' });
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      console.error(error);
      if (error instanceof Error) {
        FlashMessage({ message: error.message, type: 'warning' });
      }
    }
  }

  useLayoutEffect(() => {
    navigation.setOptions({
      title: null,
      headerRight: () => <RightButton share={share} iconColor={COLORS.headerText} icon="dots" />,
    });
  }, [navigation]);

  return <Profile />;
};

export default Page;

================
File: app/(tabs)/(account)/settings.tsx
================
import { useRouter } from 'expo-router';
import React from 'react';

import { ACCOUNT_SCREENS } from '@/constants';
import { Settings } from '@/screens';

const Page = () => {
  const router = useRouter();
  return (
    <Settings
      onPressPrivacy={() => router.navigate(ACCOUNT_SCREENS.PRIVACY)}
      onPressNotification={() => router.navigate(ACCOUNT_SCREENS.NOTIFICATIONS)}
    />
  );
};

export default Page;

================
File: app/(tabs)/(ads)/(ads-tabs)/_layout.tsx
================
import {
  MaterialTopTabNavigationEventMap,
  MaterialTopTabNavigationOptions,
  createMaterialTopTabNavigator,
} from '@react-navigation/material-top-tabs';
import { ParamListBase, TabNavigationState } from '@react-navigation/native';
import { withLayoutContext } from 'expo-router';

import { ADS_TAB_SCREENS, COLORS } from '@/constants';
import { scale } from '@/utils';

const { Navigator } = createMaterialTopTabNavigator();

export const MaterialTopTabs = withLayoutContext<
  MaterialTopTabNavigationOptions,
  typeof Navigator,
  TabNavigationState<ParamListBase>,
  MaterialTopTabNavigationEventMap
>(Navigator);

export default function TabLayout() {
  return (
    <MaterialTopTabs
      screenOptions={{
        tabBarActiveTintColor: COLORS.fontMainColor,
        tabBarInactiveTintColor: COLORS.fontSecondColor,
        tabBarStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        tabBarIndicatorStyle: {
          backgroundColor: COLORS.buttonbackground,
          height: scale(2),
        },
      }}>
      <MaterialTopTabs.Screen name={ADS_TAB_SCREENS.ADS} />
      <MaterialTopTabs.Screen name={ADS_TAB_SCREENS.FAVOURITE} />
    </MaterialTopTabs>
  );
}

================
File: app/(tabs)/(ads)/(ads-tabs)/favourite.tsx
================
import React from 'react';

import { Favourite } from '@/screens';

const Page = () => {
  return <Favourite onPressNavigateToMain={console.log} profile={{ likes: [] }} />;
};

export default Page;

================
File: app/(tabs)/(ads)/(ads-tabs)/index.tsx
================
import React from 'react';

import { MainAds } from '@/screens';

const Page = () => {
  return <MainAds refetch={console.log} onPressStartSelling={console.log} />;
};

export default Page;

================
File: app/(tabs)/(ads)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { ADS_SCREENS, COLORS } from '@/constants';
import { textStyles } from '@/utils';

export default function ChatLayout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen
        name={ADS_SCREENS.MAIN_ADS}
        options={{
          title: 'MY ADS',
          headerStyle: {
            backgroundColor: COLORS.headerbackground,
          },
        }}
      />
    </Stack>
  );
}

================
File: app/(tabs)/(chat)/(inbox-tabs)/_layout.tsx
================
import {
  MaterialTopTabNavigationEventMap,
  MaterialTopTabNavigationOptions,
  createMaterialTopTabNavigator,
} from '@react-navigation/material-top-tabs';
import { ParamListBase, TabNavigationState } from '@react-navigation/native';
import { withLayoutContext } from 'expo-router';

import { COLORS, INBOX_SCREENS } from '@/constants';
import { scale } from '@/utils';

const { Navigator } = createMaterialTopTabNavigator();

export const MaterialTopTabs = withLayoutContext<
  MaterialTopTabNavigationOptions,
  typeof Navigator,
  TabNavigationState<ParamListBase>,
  MaterialTopTabNavigationEventMap
>(Navigator);

export default function TabLayout() {
  return (
    <MaterialTopTabs
      screenOptions={{
        tabBarActiveTintColor: COLORS.fontMainColor,
        tabBarInactiveTintColor: COLORS.fontSecondColor,
        tabBarStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        tabBarIndicatorStyle: {
          backgroundColor: COLORS.buttonbackground,
          height: scale(2),
        },
      }}>
      <MaterialTopTabs.Screen name={INBOX_SCREENS.ALL} options={{ title: 'ALL' }} />
      <MaterialTopTabs.Screen name={INBOX_SCREENS.BUYING} options={{ title: 'BUYING' }} />
      <MaterialTopTabs.Screen name={INBOX_SCREENS.SELLING} options={{ title: 'SELLING' }} />
    </MaterialTopTabs>
  );
}

================
File: app/(tabs)/(chat)/(inbox-tabs)/buying.tsx
================
import { Buying } from '@/screens';

export default function BuyingScreen() {
  return <Buying />;
}

================
File: app/(tabs)/(chat)/(inbox-tabs)/index.tsx
================
import { All } from '@/screens';

export default function AllScreen() {
  return <All />;
}

================
File: app/(tabs)/(chat)/(inbox-tabs)/selling.tsx
================
import { Selling } from '@/screens';

export default function SellingScreen() {
  return <Selling />;
}

================
File: app/(tabs)/(chat)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { CHAT_SCREENS, COLORS } from '@/constants';
import { textStyles } from '@/utils';

export default function ChatLayout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen
        name={CHAT_SCREENS.MAIN_CHAT}
        options={{
          headerTitle: 'Inbox',
          headerStyle: {
            backgroundColor: COLORS.headerbackground,
          },
        }}
      />
      <Stack.Screen
        name={CHAT_SCREENS.LIVE_CHAT}
        options={{
          headerTitle: 'Set Location',
          headerBackTitleVisible: false,
          headerTitleStyle: {
            color: COLORS.fontMainColor,
          },
        }}
      />
    </Stack>
  );
}

================
File: app/(tabs)/(chat)/index.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

const Chat = () => {
  return (
    <View>
      <Text>New </Text>
    </View>
  );
};

export default Chat;

================
File: app/(tabs)/(chat)/liveChat.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

const liveChat = () => {
  return (
    <View>
      <Text>liveChat</Text>
    </View>
  );
};

export default liveChat;

================
File: app/(tabs)/(home)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { COLORS, HOME_SCREENS } from '@/constants';
import { textStyles } from '@/utils';

export default function Layout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen name={HOME_SCREENS.MAIN} />
    </Stack>
  );
}

================
File: app/(tabs)/(home)/index.tsx
================
import { useNavigation } from 'expo-router';
import React, { useEffect, useLayoutEffect, useState } from 'react';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

import { MainHeader } from '@/components';
import { MainHome } from '@/screens';
import { useLocationStore } from '@/store';

const Home = () => {
  const navigation = useNavigation();
  const [filters, setFilters] = useState<{
    zone: string;
    title: string;
    latitude: number | null;
    longitude: number | null;
  }>({
    zone: '642e439cd320c55d90dd6cd9',
    title: 'Lucknow',
    latitude: null,
    longitude: null,
  });
  const inset = useSafeAreaInsets();
  const [search, setSearch] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [searchVisible, setSerachVisible] = useState(false);
  const t = useLocationStore((state) => state);

  const toggleModal = () => setModalVisible(!modalVisible);
  const toggleSearch = () => setSerachVisible(!searchVisible);

  useLayoutEffect(() => {
    navigation.setOptions({
      header: () => (
        <MainHeader
          search={search}
          onModalToggle={toggleModal}
          toggleSearch={toggleSearch}
          locationText={filters.title}
          inset={inset}
          onPressNotification={console.log}
        />
      ),
    });
  }, [navigation, filters, search]);

  useEffect(() => {
    storageLocation();
  }, []);

  async function storageLocation() {
    console.log(t);
    if (t) {
      setFilters({
        zone: '642e439cd320c55d90dd6cd9',
        title: t.label,
        latitude: t.latitude,
        longitude: t.longitude,
      });
    }
  }

  return (
    <MainHome
      //   categoryData={[]}
      //   categoryError={null}
      //   data={[]}
      error={null}
      loading
      networkStatus={0}
      onPressCategories={console.log}
      onPressSubCategory={console.log}
      refetch={console.log}
      search={''}
      setFilters={setFilters}
      setSearch={setSearch}
    />
  );
};

export default Home;

================
File: app/(tabs)/(sell)/(product-description-tabs)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { COLORS, PRODUCT_DESCRIPTION_SCREENS } from '@/constants';
import { textStyles } from '@/utils';

export default function ProductDescriptionLayout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen name={PRODUCT_DESCRIPTION_SCREENS.PRODUCT_DESCRIPTION} />
      <Stack.Screen name={PRODUCT_DESCRIPTION_SCREENS.FULL_MAP} />
    </Stack>
  );
}

================
File: app/(tabs)/(sell)/(product-description-tabs)/fullMap.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

const Page = () => {
  return (
    <View>
      <Text>Page</Text>
    </View>
  );
};

export default Page;

================
File: app/(tabs)/(sell)/(product-description-tabs)/index.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

const Page = () => {
  return (
    <View>
      <Text>Page</Text>
    </View>
  );
};

export default Page;

================
File: app/(tabs)/(sell)/_layout.tsx
================
import { Stack } from 'expo-router';

import { BackButton } from '@/components';
import { COLORS, SELL_SCREENS } from '@/constants';
import { textStyles } from '@/utils';

export default function SellLayout() {
  return (
    <Stack
      screenOptions={{
        headerTitleAlign: 'center',
        headerBackTitleVisible: false,
        headerStyle: {
          backgroundColor: COLORS.headerbackground,
        },
        headerTitleStyle: {
          color: COLORS.headerText,
          ...textStyles.H3,
          ...textStyles.Bold,
        },
        headerLeft: () => <BackButton iconColor={COLORS.headerText} icon="leftArrow" />,
      }}>
      <Stack.Screen name={SELL_SCREENS.SELL} />
      <Stack.Screen name={SELL_SCREENS.CATEGORIES} options={{ title: 'Choose a category' }} />
      <Stack.Screen name={SELL_SCREENS.SUB_CATEGORIES} />
      <Stack.Screen name={SELL_SCREENS.SELLING_FORM} options={{ title: 'Include some details' }} />
      <Stack.Screen name={SELL_SCREENS.UPLOAD_IMAGE} />
      <Stack.Screen name={SELL_SCREENS.PRICE} />
      <Stack.Screen name={SELL_SCREENS.LOCATION_CONFIRM} />
      <Stack.Screen name={SELL_SCREENS.FULL_MAP} />
      <Stack.Screen name={SELL_SCREENS.PRODUCT_DESCRIPTION} options={{ headerShown: false }} />
    </Stack>
  );
}

================
File: app/(tabs)/(sell)/categories.tsx
================
import { useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect } from 'react';

import { LeftButton } from '@/components';
import { COLORS, SELL_SCREENS } from '@/constants';
import { Categories } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'What are you offering?',
      headerLeft: () => <LeftButton icon="close" iconColor={COLORS.headerText} />,
    });
  }, [navigation]);

  const handleOnPressCategory = ({ title, id }: { title: string; id: string }) => {
    router.navigate({
      pathname: SELL_SCREENS.SUB_CATEGORIES,
      params: {
        headerTitle: title,
        categoryId: id,
      },
    });
  };

  // return <MainSell onPressCategory={handleOnPressCategory} />;

  return <Categories onPressCategory={handleOnPressCategory} />;
};

export default Page;

================
File: app/(tabs)/(sell)/fullMap.tsx
================
import React from 'react';
import { View, Text } from 'react-native';

const Page = () => {
  return (
    <View>
      <Text>Page</Text>
    </View>
  );
};

export default Page;

================
File: app/(tabs)/(sell)/index.tsx
================
import { useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect } from 'react';

import { LeftButton } from '@/components';
import { COLORS, SELL_SCREENS } from '@/constants';
import { Categories } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'What are you offering?',
      headerLeft: () => <LeftButton icon="close" iconColor={COLORS.headerText} />,
    });
  }, [navigation]);

  const handleOnPressCategory = ({ title, id }: { title: string; id: string }) => {
    router.navigate({
      pathname: SELL_SCREENS.SUB_CATEGORIES,
      params: {
        headerTitle: title,
        categoryId: id,
      },
    });
  };

  // return <MainSell onPressCategory={handleOnPressCategory} />;

  return <Categories onPressCategory={handleOnPressCategory} />;
};

export default Page;

================
File: app/(tabs)/(sell)/locationConfirm.tsx
================
import { useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect } from 'react';

import { SELL_SCREENS } from '@/constants';
import { LocationConfirm } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'Confirm your location',
    });
  }, []);

  const handleOnPressFullMap = ({
    latitude,
    longitude,
  }: {
    latitude: number;
    longitude: number;
  }) => {
    router.navigate({
      pathname: SELL_SCREENS.FULL_MAP,
      params: {
        latitude,
        longitude,
        currentScreen: SELL_SCREENS.LOCATION_CONFIRM,
        title: 'Map',
      },
    });
  };

  return <LocationConfirm onPressFullMap={handleOnPressFullMap} defaultFormData={{}} />;
};

export default Page;

================
File: app/(tabs)/(sell)/price.tsx
================
import { useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect } from 'react';

import { SELL_SCREENS } from '@/constants';
import { Price } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'Set a price',
    });
  }, []);

  const handleOnPressNext = () => {
    router.navigate(SELL_SCREENS.LOCATION_CONFIRM);
  };

  return (
    <Price
      onPressNext={handleOnPressNext}
      defaultFormData={{
        price: '100',
      }}
    />
  );
};

export default Page;

================
File: app/(tabs)/(sell)/sellingForm.tsx
================
import { useRouter } from 'expo-router';
import React from 'react';

import { SELL_SCREENS } from '@/constants';
import { SellingForm } from '@/screens';

const Page = () => {
  const router = useRouter();

  const handleOnPressNext = () => {
    router.navigate({
      pathname: SELL_SCREENS.UPLOAD_IMAGE,
    });
  };

  return <SellingForm onPressNext={handleOnPressNext} />;
};

export default Page;

================
File: app/(tabs)/(sell)/subCategories.tsx
================
import { useLocalSearchParams, useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect } from 'react';

import { SELL_SCREENS } from '@/constants';
import { SubCategories } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  const { headerTitle } = useLocalSearchParams();

  useLayoutEffect(() => {
    navigation.setOptions({
      title: headerTitle,
    });
  }, [navigation, headerTitle]);

  const handleOnPressCategory = (id: string) => {
    router.navigate({
      pathname: SELL_SCREENS.SELLING_FORM,
      params: {
        subCategory: id,
      },
    });
  };

  return <SubCategories onPressSubCategory={handleOnPressCategory} loading={false} />;
};

export default Page;

================
File: app/(tabs)/(sell)/uploadImage.tsx
================
import * as Device from 'expo-device';
import * as ImagePicker from 'expo-image-picker';
import { useNavigation, useRouter } from 'expo-router';
import React, { useLayoutEffect, useState } from 'react';

import { FlashMessage } from '@/components';
import { SELL_SCREENS } from '@/constants';
import { UploadImages } from '@/screens';

const Page = () => {
  const navigation = useNavigation();
  const router = useRouter();
  const [, setNewImage] = useState(false);
  const [, setImage] = useState<string | null>(null);

  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'Upload your photos',
    });
  }, []);

  // useEffect(() => {
  //   (async () => {
  //     const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
  //     if (status !== ImagePicker.PermissionStatus.GRANTED) {
  //       alert('Sorry, we need camera roll permissions to make this work!');
  //     }
  //   })();
  // }, []);

  async function PickImage() {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
      base64: true,
      allowsEditing: true,
    });
    if (!result.canceled) {
      setNewImage(true);
      setImage(`data:image/jpg;base64,${result.assets}`);
    }
  }

  async function CaptureImage() {
    if (!Device.isDevice) {
      FlashMessage({
        message: 'Camers is not working on simulator!',
        type: 'warning',
      });
      return;
    }

    const { status: checkStatus } = await ImagePicker.getCameraPermissionsAsync();
    if (checkStatus !== ImagePicker.PermissionStatus.GRANTED) {
      const { status: CameraStatus } = await ImagePicker.getCameraPermissionsAsync();
      if (CameraStatus !== ImagePicker.PermissionStatus.GRANTED) {
        alert('Sorry, we need camera permission to make this work!');
        return;
      }
    }
    const { status: checkStatusRoll } = await ImagePicker.getMediaLibraryPermissionsAsync();
    if (checkStatusRoll !== ImagePicker.PermissionStatus.GRANTED) {
      const { status: CameraRollStatus } = await ImagePicker.getMediaLibraryPermissionsAsync();
      if (CameraRollStatus !== ImagePicker.PermissionStatus.GRANTED) {
        alert('Sorry, we need camera roll permission to make this work!');
        return;
      }
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
      base64: true,
      allowsEditing: true,
    });
    if (!result.canceled) {
      setNewImage(true);
      setImage(`data:image/jpg;base64,${result.assets}`);
    }
  }

  const handleOnPressNext = () => {
    router.navigate(SELL_SCREENS.PRICE);
  };

  return (
    <UploadImages
      onPressNext={handleOnPressNext}
      onPressCaptureImage={CaptureImage}
      onPressPickImage={PickImage}
    />
  );
};

export default Page;

================
File: app/(tabs)/_layout.tsx
================
import {
  AntDesign,
  FontAwesome5,
  Fontisto,
  MaterialCommunityIcons,
  SimpleLineIcons,
} from '@expo/vector-icons';
import { Tabs } from 'expo-router';

import { COLORS, FONT_STYLES, TAB_SCREENS, TAB_LABELS } from '@/constants';
import { scale } from '@/utils';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: COLORS.primary,
        tabBarInactiveTintColor: COLORS.fontSecondColor,
        tabBarHideOnKeyboard: true,
        tabBarStyle: {
          backgroundColor: COLORS.bottomTabColor,
        },
        tabBarLabelStyle: {
          fontFamily: FONT_STYLES.Bold,
          justifyContent: 'center',
        },
        tabBarItemStyle: {
          backgroundColor: COLORS.bottomTabColor,
          justifyContent: 'center',
          alignItems: 'center',
        },
        headerShown: false,
      }}>
      <Tabs.Screen
        name={TAB_SCREENS.HOME}
        options={{
          tabBarLabel: TAB_LABELS.HOME,
          tabBarIcon: ({ color, focused }) =>
            focused ? (
              <Fontisto name="home" size={scale(21)} color={color} />
            ) : (
              <SimpleLineIcons name="home" size={scale(21)} color={color} />
            ),
        }}
      />
      <Tabs.Screen
        name={TAB_SCREENS.CHAT}
        options={{
          tabBarLabel: TAB_LABELS.CHAT,
          tabBarIcon: ({ color, focused }) =>
            focused ? (
              <MaterialCommunityIcons name="chat" size={scale(25)} color={color} />
            ) : (
              <SimpleLineIcons name="bubble" size={scale(20)} color={color} />
            ),
        }}
      />
      <Tabs.Screen
        name={TAB_SCREENS.SELL}
        options={{
          tabBarLabel: TAB_LABELS.SELL,
          tabBarIcon: ({ color, focused }) =>
            focused ? (
              <AntDesign name="pluscircle" size={scale(22)} color={color} />
            ) : (
              <SimpleLineIcons name="plus" size={scale(22)} color={color} />
            ),
        }}
      />
      <Tabs.Screen
        name={TAB_SCREENS.ADS}
        options={{
          tabBarLabel: TAB_LABELS.ADS,
          tabBarIcon: ({ color, focused }) =>
            focused ? (
              <AntDesign name="heart" size={scale(21)} color={color} />
            ) : (
              <SimpleLineIcons name="heart" size={scale(21)} color={color} />
            ),
        }}
      />
      <Tabs.Screen
        name={TAB_SCREENS.ACCOUNT}
        options={{
          tabBarLabel: TAB_LABELS.ACCOUNT,
          tabBarIcon: ({ color, focused }) =>
            focused ? (
              <FontAwesome5 name="user-alt" size={scale(25)} color={color} />
            ) : (
              <SimpleLineIcons name="user" size={scale(25)} color={color} />
            ),
        }}
      />
    </Tabs>
  );
}

================
File: app/_layout.tsx
================
import { BottomSheetModalProvider } from '@gorhom/bottom-sheet';
import { SplashScreen, Stack, useRouter, useSegments } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { useEffect, useState } from 'react';
import { BackHandler } from 'react-native';
import FlashMessage from 'react-native-flash-message';
import { GestureHandlerRootView } from 'react-native-gesture-handler';

import { BASE_SCREENS, COLORS } from '@/constants';
import { useAuth, useInitializeAuth } from '@/hooks';
import { useLocationStore } from '@/store';
import { exitAlert } from '@/utils';

SplashScreen.preventAutoHideAsync();

export default function ApplicationNavigator() {
  useInitializeAuth(); // This will set up the auth listener
  const [isAppReady, setAppReady] = useState(false);
  const locationIsSet = useLocationStore((state) => state.isSet);
  const { user, isLoading: authLoading, authSkipped } = useAuth();

  const router = useRouter();
  const segments = useSegments();

  useEffect(() => {
    BackHandler.addEventListener('hardwareBackPress', exitAlert);
    setTimeout(() => setAppReady(true), 2000);
    return () => {
      BackHandler.removeEventListener('hardwareBackPress', exitAlert);
    };
  }, []);

  useEffect(() => {
    if (!isAppReady || authLoading) return;

    (async () => {
      await SplashScreen.hideAsync();
    })();

    const inAuthGroup = segments[0] === BASE_SCREENS.AUTHENTICATION;
    const inLocationGroup = segments[0] === BASE_SCREENS.LOCATION_SCREENS;

    if (!user && !authSkipped && !inAuthGroup) {
      router.replace(BASE_SCREENS.AUTHENTICATION);
    } else if ((user || authSkipped) && !locationIsSet && !inLocationGroup) {
      router.replace(BASE_SCREENS.LOCATION_SCREENS);
    } else if ((user || authSkipped) && locationIsSet && (inAuthGroup || inLocationGroup)) {
      router.replace(BASE_SCREENS.TAB_SCREENS);
    }
  }, [isAppReady, authLoading, user, locationIsSet, segments, authSkipped]);

  if (!isAppReady || authLoading) {
    return null;
  }

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <BottomSheetModalProvider>
        <StatusBar style="dark" backgroundColor={COLORS.primary} />
        <Stack screenOptions={{ headerShown: false }}>
          <Stack.Screen name={BASE_SCREENS.AUTHENTICATION} />
          <Stack.Screen name={BASE_SCREENS.LOCATION_SCREENS} />
          <Stack.Screen name={BASE_SCREENS.TAB_SCREENS} />
        </Stack>
        <FlashMessage position="top" />
      </BottomSheetModalProvider>
    </GestureHandlerRootView>
  );
}

================
File: app.config.js
================
module.exports = {
  expo: {
    name: 'olo',
    slug: 'olo',
    version: '1.0.0',
    scheme: 'olo',
    web: {
      bundler: 'metro',
      output: 'static',
      favicon: './assets/favicon.png',
    },
    plugins: [
      '@react-native-firebase/app',
      '@react-native-firebase/auth',
      '@react-native-firebase/crashlytics',
      [
        'expo-build-properties',
        {
          ios: {
            useFrameworks: 'static',
          },
        },
      ],
      'expo-router',
      '@react-native-google-signin/google-signin',
      [
        'expo-dev-launcher',
        {
          launchMode: 'most-recent',
        },
      ],
      [
        'expo-font',
        {
          fonts: [
            'node_modules/@expo-google-fonts/roboto/Roboto_100Thin.ttf',
            'node_modules/@expo-google-fonts/roboto/Roboto_300Light.ttf',
            'node_modules/@expo-google-fonts/roboto/Roboto_400Regular.ttf',
            'node_modules/@expo-google-fonts/roboto/Roboto_500Medium.ttf',
            'node_modules/@expo-google-fonts/roboto/Roboto_700Bold.ttf',
          ],
        },
      ],
      [
        'expo-location',
        {
          locationAlwaysAndWhenInUsePermission: 'Allow $(PRODUCT_NAME) to use your location.',
        },
      ],
      [
        'expo-image-picker',
        {
          photosPermission: 'The app accesses your photos to let you share them with your friends.',
          cameraPermission: 'Allow $(PRODUCT_NAME) to access your camera',
        },
      ],
    ],
    experiments: {
      typedRoutes: true,
      tsconfigPaths: true,
    },
    orientation: 'portrait',
    icon: './assets/icon.png',
    userInterfaceStyle: 'light',
    splash: {
      image: './assets/splash.png',
      resizeMode: 'contain',
      backgroundColor: '#002f34',
    },
    assetBundlePatterns: ['**/*'],
    ios: {
      supportsTablet: true,
      bundleIdentifier: 'com.kashaf.olo',
      googleServicesFile: process.env.GOOGLE_SERVICE_INFOPLIST ?? './GoogleService-Info.plist',
    },
    android: {
      adaptiveIcon: {
        foregroundImage: './assets/adaptive-icon.png',
        backgroundColor: '#ffffff',
      },
      package: 'com.kashaf.olo',
      googleServicesFile: process.env.GOOGLE_SERVICES_JSON ?? './google-services.json',
    },
    extra: {
      router: {
        origin: false,
      },
      eas: {
        projectId: 'd51a1e8f-91bd-4f76-bf50-71cc4a6ff4d3',
      },
      firebase: {
        apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY,
        authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN,
        databaseURL: process.env.EXPO_PUBLIC_FIREBASE_DATABASE_URL,
        projectId: process.env.EXPO_PUBLIC_PROJECT_ID,
        storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID,
        measurementId: process.env.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID,
        webClientId: process.env.EXPO_PUBLIC_WEB_CLIENT_ID,
      },
      googlePlaceAPIkey: process.env.EXPO_PUBLIC_PLACES_API_KEY,
    },
  },
};

================
File: babel.config.js
================
module.exports = function (api) {
  api.cache(true);
  const plugins = ['react-native-reanimated/plugin']; //react-native-reanimated/plugin need to be listed last

  return {
    presets: ['babel-preset-expo'],

    plugins,
  };
};

================
File: components/Buttons/DefaultTextButton/DefaultTextButton.tsx
================
import React from 'react';
import { TouchableOpacity, Text, StyleProp, ViewStyle } from 'react-native';

import { DefaultTextButtonProps } from './DefaultTextButton.types';
import styles from './styles';

import { COLORS } from '@/constants';

const DefaultTextButton = function ({
  type = 'default',
  buttonStyle,
  disabled,
  textStyle,
  text,
  ...rest
}: DefaultTextButtonProps) {
  const style: StyleProp<ViewStyle> = {};
  if (type === 'fill') {
    style.backgroundColor = COLORS.primary;
    style.borderWidth = 0;
  } else if (type === 'default') {
    style.borderColor = COLORS.primary;
  } else if (type === 'link') {
    style.borderWidth = 0;
  }
  return (
    <TouchableOpacity
      {...rest}
      style={[styles.buttonStyle, style, buttonStyle, disabled ? styles.disabled : {}]}>
      <Text style={[styles.textStyle, textStyle]}>{text}</Text>
    </TouchableOpacity>
  );
};

export default DefaultTextButton;

================
File: components/Buttons/DefaultTextButton/DefaultTextButton.types.ts
================
import { StyleProp, TextStyle, TouchableOpacityProps, ViewStyle } from 'react-native';

export interface DefaultTextButtonProps extends TouchableOpacityProps {
  type?: 'default' | 'link' | 'fill';
  buttonStyle?: StyleProp<ViewStyle>;
  disabled?: boolean;
  textStyle?: StyleProp<TextStyle>;
  text: string;
}

================
File: components/Buttons/DefaultTextButton/index.ts
================
import DefaultTextButton from './DefaultTextButton';

export { DefaultTextButton };

================
File: components/Buttons/DefaultTextButton/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  buttonStyle: {
    paddingTop: scale(8),
    paddingBottom: scale(8),
    paddingLeft: scale(16),
    paddingRight: scale(16),
    borderWidth: scale(1),
    borderRadius: scale(3),
    alignSelf: 'flex-start',
  },
  textStyle: {
    textTransform: 'uppercase',
    fontSize: scale(12),
    color: COLORS.primary,
  },
  disabled: {
    opacity: 0.5,
  },
});

export default styles;

================
File: components/Buttons/EmptyButton/EmptyButton.tsx
================
import React from 'react';
import { TouchableOpacity } from 'react-native';

import { EmptyButtonProps } from './EmptyButton.types';
import styles from './styles';
import { Spinner } from '../../Spinner';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';

function EmptyButton(props: EmptyButtonProps) {
  return (
    <TouchableOpacity
      disabled={props.disabled ?? false}
      activeOpacity={0.7}
      style={[
        styles.emptyButton,
        { backgroundColor: props.disabled ? COLORS.disabled : COLORS.buttonbackground },
      ]}
      onPress={props.onPress}>
      {props.loading ? (
        <Spinner spinnerColor={COLORS.white} backColor="transparent" />
      ) : (
        <TextDefault
          textColor={props.disabled ? COLORS.fontSecondColor : COLORS.buttonText}
          H4
          bolder
          center>
          {props.title}
        </TextDefault>
      )}
    </TouchableOpacity>
  );
}

export default React.memo(EmptyButton);

================
File: components/Buttons/EmptyButton/EmptyButton.types.ts
================
export type EmptyButtonProps = {
  onPress?: () => void;
  title: string;
  disabled?: boolean;
  loading?: boolean;
};

================
File: components/Buttons/EmptyButton/index.ts
================
import EmptyButton from './EmptyButton';

export { EmptyButton };

================
File: components/Buttons/EmptyButton/styles.ts
================
import { StyleSheet } from 'react-native';

import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  emptyButton: {
    width: '100%',
    height: scale(40),
    justifyContent: 'center',
    alignItems: 'center',

    borderRadius: scale(5),
    ...alignment.MTlarge,
  },
});
export default styles;

================
File: components/Buttons/LoginButton/LoginButton.tsx
================
import { SimpleLineIcons } from '@expo/vector-icons';
import React from 'react';
import { TouchableOpacity, StyleSheet, View } from 'react-native';

import { LoginButtonProps } from './LoginButton.types';
import styles from './styles';
import { Spinner } from '../../Spinner';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function LoginButton({
  disabled = false,
  style,
  onPressIn,
  onPress,
  loading,
  icon,
  title,
}: LoginButtonProps) {
  return (
    <TouchableOpacity
      disabled={disabled}
      activeOpacity={0.7}
      style={StyleSheet.compose(styles.emptyButton, style)}
      onPressIn={onPressIn}
      onPress={onPress}>
      {loading && (
        <View>
          <Spinner />
        </View>
      )}
      {!loading && (
        <>
          {icon && (
            <SimpleLineIcons name={icon as any} size={scale(20)} color={COLORS.buttonbackground} />
          )}
          <TextDefault textColor={COLORS.buttonbackground} H4 style={alignment.PLxSmall}>
            {title}
          </TextDefault>
        </>
      )}
    </TouchableOpacity>
  );
}

export default React.memo(LoginButton);

================
File: components/Buttons/LoginButton/LoginButton.types.ts
================
import { ViewStyle } from 'react-native';

export type LoginButtonProps = {
  onPress?: () => void;
  onPressIn?: () => void;
  title: string;
  style?: ViewStyle;
  disabled?: boolean;
  loading?: boolean;
  icon?: string;
};

================
File: components/Buttons/LoginButton/index.ts
================
import LoginButton from './LoginButton';

export { LoginButton };

================
File: components/Buttons/LoginButton/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  emptyButton: {
    width: '100%',
    height: scale(40),
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
    backgroundColor: COLORS.themeBackground,
    borderRadius: scale(5),
    borderColor: COLORS.buttonbackground,
    borderWidth: scale(1),
    ...alignment.MBsmall,
    ...alignment.PLlarge,
    ...alignment.PRlarge,
  },
});
export default styles;

================
File: components/Buttons/SkipButton/SkipButton.tsx
================
import React from 'react';
import { TouchableOpacity } from 'react-native';

import { SkipButtonProps } from './SkipButton.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';

function SkipButton({ disabled = false, onPress, title = 'Skip' }: SkipButtonProps) {
  return (
    <TouchableOpacity
      disabled={disabled}
      activeOpacity={0.7}
      style={[
        styles.button,
        { backgroundColor: disabled ? COLORS.disabled : COLORS.headerbackground },
      ]}
      onPress={onPress}>
      <TextDefault textColor={disabled ? COLORS.fontSecondColor : COLORS.primary} H4 bolder center>
        {title}
      </TextDefault>
    </TouchableOpacity>
  );
}

export default React.memo(SkipButton);

================
File: components/Buttons/SkipButton/SkipButton.types.ts
================
export type SkipButtonProps = {
  onPress?: () => void;
  title?: string;
  disabled?: boolean;
};

================
File: components/Buttons/SkipButton/index.ts
================
import SkipButton from './SkipButton';

export { SkipButton };

================
File: components/Buttons/SkipButton/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  button: {
    borderRadius: scale(5),
    borderColor: COLORS.primary,
    borderWidth: StyleSheet.hairlineWidth,
    justifyContent: 'center',
    padding: scale(5),
  },
});
export default styles;

================
File: components/Buttons/index.ts
================
import { DefaultTextButton } from './DefaultTextButton';
import { EmptyButton } from './EmptyButton';
import { LoginButton } from './LoginButton';
import { SkipButton } from './SkipButton';

export { EmptyButton, LoginButton, SkipButton, DefaultTextButton };

================
File: components/Card/FollowerCard/FollowerCard.tsx
================
import { Feather } from '@expo/vector-icons';
import React from 'react';
import { Image, View, TouchableOpacity } from 'react-native';
import { BorderlessButton } from 'react-native-gesture-handler';

import { FollowerCardProps } from './FollowerCard.types';
import styles from './styles';

import { TextDefault } from '@/components/Text';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function FollowerCard({ onPressUserProfile, name, followers, onPressFollower }: FollowerCardProps) {
  return (
    <>
      <View style={styles.userContainer}>
        <TouchableOpacity
          activeOpacity={1}
          //   onPress={() => navigation.navigate('UserProfile', { user: props._id })}
          onPress={onPressUserProfile}
          style={styles.avatar}>
          <Image style={styles.img} source={require('@/assets/avatar.png')} />
        </TouchableOpacity>
        <TextDefault
          textColor={COLORS.buttonbackground}
          bold
          style={[alignment.PLmedium, styles.flex]}>
          {name}
        </TextDefault>
        <BorderlessButton
          style={alignment.Psmall}
          //   onPress={() => (followers ? onModalToggle() : onFollowing())}
          onPress={onPressFollower}>
          {followers ? (
            <Feather name="user-check" size={scale(20)} color="black" />
          ) : (
            <Feather name="user-plus" size={scale(20)} color="black" />
          )}
        </BorderlessButton>
      </View>
    </>
  );
}

export default React.memo(FollowerCard);

================
File: components/Card/FollowerCard/FollowerCard.types.ts
================
export type FollowerCardProps = {
  onPressUserProfile?: () => void;
  name: string;
  followers: boolean;
  onPressFollower?: () => void;
};

================
File: components/Card/FollowerCard/index.ts
================
import FollowerCard from './FollowerCard';

export { FollowerCard };

================
File: components/Card/FollowerCard/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  notificationContainer: {
    backgroundColor: COLORS.lightHorizontalLine,
    alignItems: 'center',
    flexDirection: 'row',
    ...alignment.Plarge,
    ...alignment.MBsmall,
  },
  imgResponsive: {
    height: scale(70),
    width: scale(70),
  },
  img: {
    flex: 1,
    height: undefined,
    width: undefined,
  },
  notificationText: {
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
    ...alignment.PLmedium,
  },
  userContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.Psmall,
    ...alignment.PLlarge,
  },
  avatar: {
    height: scale(40),
    width: scale(40),
  },
});
export default styles;

================
File: components/Card/FollowingCard/FollowingCard.tsx
================
import { Feather } from '@expo/vector-icons';
import React from 'react';
import { Image, View, TouchableOpacity } from 'react-native';
import { BorderlessButton } from 'react-native-gesture-handler';

import { FollowingCardProps } from './FollowingCard.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function Card({ onPressUserProfile, name, onPressModalToggle }: FollowingCardProps) {
  return (
    <>
      <View style={styles.userContainer}>
        <TouchableOpacity
          activeOpacity={1}
          // onPress={() => navigation.navigate('UserProfile', { user: props._id })}
          onPress={onPressUserProfile}
          style={styles.avatar}>
          <Image style={styles.img} source={require('@/assets/avatar.png')} />
        </TouchableOpacity>
        <TextDefault
          textColor={COLORS.buttonbackground}
          bold
          style={[alignment.PLmedium, styles.flex]}>
          {name}
        </TextDefault>
        <BorderlessButton style={alignment.Psmall} onPress={onPressModalToggle}>
          <Feather name="user-check" size={scale(20)} color="black" />
        </BorderlessButton>
      </View>
    </>
  );
}

export default React.memo(Card);

================
File: components/Card/FollowingCard/FollowingCard.types.ts
================
export type FollowingCardProps = {
  onPressUserProfile?: () => void;
  name: string;
  onPressModalToggle?: () => void;
};

================
File: components/Card/FollowingCard/index.ts
================
import FollowingCard from './FollowingCard';

export { FollowingCard };

================
File: components/Card/FollowingCard/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  notificationContainer: {
    backgroundColor: COLORS.lightHorizontalLine,
    alignItems: 'center',
    flexDirection: 'row',
    ...alignment.Plarge,
    ...alignment.MBsmall,
  },
  imgResponsive: {
    height: scale(70),
    width: scale(70),
  },
  img: {
    flex: 1,
    height: undefined,
    width: undefined,
  },
  notificationText: {
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
    ...alignment.PLmedium,
  },
  userContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.Psmall,
    ...alignment.PLlarge,
  },
  avatar: {
    height: scale(40),
    width: scale(40),
  },
});
export default styles;

================
File: components/Card/index.ts
================
import { FollowerCard } from './FollowerCard';
import { FollowingCard } from './FollowingCard';

export { FollowerCard, FollowingCard };

================
File: components/CustomMarker/CustomMarker.tsx
================
import React from 'react';
import Svg, { Path, SvgProps } from 'react-native-svg';

import { COLORS } from '@/constants';

function CustomMarker(props: SvgProps) {
  return (
    <Svg viewBox="0 0 512 512" {...props}>
      <Path
        fill={COLORS.primary}
        d="M256 103.278c-39.429 0-71.505 32.077-71.505 71.505 0 39.429 32.077 71.505 71.505 71.505s71.505-32.077 71.505-71.505-32.076-71.505-71.505-71.505z"
      />
      <Path
        fill={COLORS.primary}
        d="M256 0C158.107 0 78.465 79.642 78.465 177.535c0 40.042 28.089 106.034 83.486 196.143 40.502 65.88 81.577 121.48 81.987 122.033L256 512l12.062-16.289c.41-.553 41.485-56.153 81.987-122.033 55.397-90.109 83.486-156.101 83.486-196.143C433.535 79.642 353.893 0 256 0zm0 276.306c-55.98 0-101.522-45.543-101.522-101.522 0-55.98 45.543-101.522 101.522-101.522s101.522 45.543 101.522 101.522c0 55.979-45.542 101.522-101.522 101.522z"
      />
    </Svg>
  );
}

export default CustomMarker;

================
File: components/CustomMarker/index.ts
================
import CustomMarker from './CustomMarker';

export default CustomMarker;

================
File: components/FlashMessage/FlashMessage.tsx
================
import { showMessage, MessageOptions } from 'react-native-flash-message';

import styles from './styles';

const FlashMessage = (props: MessageOptions) => {
  showMessage({
    hideOnPress: true,
    hideStatusBar: false,
    type: props.type,
    floating: false,
    titleStyle: styles.text,
    ...props,
    position: props.position ?? 'top',
  });
};

export default FlashMessage;

================
File: components/FlashMessage/index.ts
================
import FlashMessage from './FlashMessage';

export default FlashMessage;

================
File: components/FlashMessage/styles.ts
================
import { StyleSheet } from 'react-native';

import { FONT_ALIGN, FONT_SIZE } from '@/utils/textStyles';

const styles = StyleSheet.create({
  text: {
    fontSize: FONT_SIZE.H5,
    textAlign: FONT_ALIGN.CENTER,
  },
});
export default styles;

================
File: components/Header/HeaderIcons/HeaderIcons.tsx
================
import { Ionicons, EvilIcons, MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { View, TouchableOpacity, Modal } from 'react-native';
import { BorderlessButton } from 'react-native-gesture-handler';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

import { BackButtonProps, LeftButtonProps, RightButtonProps } from './HeaderIcons.types';
import styles from './styles';

import { TextDefault } from '@/components/Text';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function BackButton(props: BackButtonProps) {
  if (props.icon === 'leftArrow') {
    return (
      <Ionicons
        name="arrow-back"
        size={scale(30)}
        style={styles.leftIconPadding}
        color={props.iconColor}
      />
    );
  } else if (props.icon === 'menu') {
    return (
      <MaterialIcons
        name="menu"
        size={scale(30)}
        style={styles.leftIconPadding}
        color={props.iconColor}
      />
    );
  } else if (props.icon === 'share') {
    return (
      <EvilIcons
        name="share-google"
        size={scale(30)}
        style={styles.leftIconPadding}
        color={props.iconColor}
      />
    );
  } else if (props.icon === 'dots') {
    return (
      <MaterialCommunityIcons
        name="dots-vertical"
        size={scale(30)}
        style={styles.rightIconPadding}
        color={props.iconColor}
      />
    );
  } else if (props.icon === 'target') {
    return <MaterialIcons name="my-location" size={scale(20)} color={props.iconColor} />;
  } else {
    return (
      <Ionicons
        name="close"
        size={scale(30)}
        style={styles.leftIconPadding}
        color={props.iconColor}
      />
    );
  }
}

function LeftButton(props: LeftButtonProps) {
  const router = useRouter();
  if (props.icon === 'back') {
    return (
      <TouchableOpacity onPress={router.back}>
        <BackButton iconColor={props.iconColor} icon="leftArrow" />
      </TouchableOpacity>
    );
  } else if (props.icon === 'close' && props.action === 'POP') {
    return (
      <TouchableOpacity
        onPress={() => {
          router.back();
        }}>
        <BackButton iconColor={props.iconColor} icon="close" />
      </TouchableOpacity>
    );
  } else if (props.icon === 'close') {
    return (
      <TouchableOpacity
        onPress={() => {
          if (props.navigate) props.navigate();
          else router.back();
          // navigation.dispatch(state => {
          //   const routes = state.routes.filter(r => r.name === 'Menu')
          //   return CommonActions.reset({
          //     ...state,
          //     routes,
          //     index: 0
          //   })
          // })
        }}>
        <BackButton iconColor={props.iconColor} icon="close" />
      </TouchableOpacity>
    );
  }
}
function RightButton(props: RightButtonProps) {
  const [password, setPassword] = useState(false);
  const inset = useSafeAreaInsets();

  function togglePassword() {
    setPassword((prev) => !prev);
  }
  if (props.icon === 'share') {
    return (
      <TouchableOpacity onPress={props?.onPress}>
        <BackButton iconColor={props.iconColor} icon="share" />
      </TouchableOpacity>
    );
  } else if (props.icon === 'dots') {
    return (
      <View>
        {password ? (
          <Modal animationType="fade" visible={password} onRequestClose={() => setPassword(false)}>
            <TouchableOpacity
              activeOpacity={1}
              style={{ flex: 1 }}
              onPress={() => {
                if (props.share) props?.share();
                setPassword(false);
              }}>
              <BorderlessButton
                onPress={props.share}
                borderless={false}
                style={[styles.shareBtn, { top: inset.top }]}>
                <TextDefault textColor={COLORS.headerText} H5 bold style={styles.flex}>
                  Share Profile
                </TextDefault>
              </BorderlessButton>
            </TouchableOpacity>
          </Modal>
        ) : (
          <TouchableOpacity onPress={togglePassword}>
            <BackButton iconColor={props.iconColor} icon="dots" />
          </TouchableOpacity>
        )}
      </View>
    );
  } else if (props.icon === 'text') {
    return (
      <BorderlessButton onPress={props?.onPress} borderless={false} style={styles.rightOuter}>
        <TextDefault textColor={props.iconColor} H5 style={styles.textIcon}>
          {props.title || ''}
        </TextDefault>
      </BorderlessButton>
    );
  } else if (props.icon === 'target') {
    return (
      <TouchableOpacity onPress={props?.onPressRight}>
        <View style={[styles.rightContainer, { ...alignment.PRsmall }]}>
          <BackButton iconColor={props.iconColor} icon="target" />
        </View>
      </TouchableOpacity>
    );
  } else {
    return null;
  }
}

export { BackButton, LeftButton, RightButton };

================
File: components/Header/HeaderIcons/HeaderIcons.types.ts
================
export type BackButtonProps = {
  icon?: string;
  iconColor: string;
};

export type LeftButtonProps = {
  action?: string;
  icon?: string;
  iconColor: string;
  navigate?: () => void;
};

export type RightButtonProps = {
  icon?: string;
  iconColor: string;
  onPress?: () => void;
  share?: () => void;
  title?: string;
  onPressRight?: () => void;
};

================
File: components/Header/HeaderIcons/index.ts
================
import { BackButton, LeftButton, RightButton } from './HeaderIcons';

export { BackButton, LeftButton, RightButton };

================
File: components/Header/HeaderIcons/styles.ts
================
import { Dimensions, StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  leftIconPadding: {
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  rightIconPadding: {
    ...alignment.PLmedium,
    ...alignment.PRsmall,
  },
  textIcon: {
    ...alignment.PLmedium,
    ...alignment.PRsmall,
  },
  rightOuter: {
    height: '90%',
    justifyContent: 'center',
  },
  //   rightContainer: {
  //     height: '95%',
  //     width: scale(140),
  //     justifyContent: 'center',
  //     backgroundColor: COLORS.containerBox,
  //     ...alignment.MRsmall,
  //     ...alignment.PLsmall,
  //   },
  shareBtn: {
    width: width * 0.5,
    backgroundColor: COLORS.containerBox,
    position: 'absolute',
    right: scale(5),
    ...alignment.Psmall,
  },
  rightContainer: {
    position: 'relative',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
    ...alignment.PLxSmall,
  },
  flex: {
    display: 'flex',
  },
});

export default styles;

================
File: components/Header/MainHeader/MainHeader.tsx
================
import { Feather, FontAwesome, MaterialIcons, Octicons } from '@expo/vector-icons';
import React from 'react';
import { TouchableOpacity, View } from 'react-native';
import { BorderlessButton } from 'react-native-gesture-handler';

import { MainHeaderProps } from './MainHeader.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

function MainHeader({
  onPressNotification,
  inset,
  onModalToggle,
  locationText,
  toggleSearch,
  search,
}: MainHeaderProps) {
  return (
    <View style={[styles.headerBackground, { paddingTop: inset.top }]}>
      <TouchableOpacity activeOpacity={1} onPress={onModalToggle} style={styles.row}>
        <MaterialIcons name="location-on" size={scale(25)} color={COLORS.headerText} />
        <TextDefault numberOfLines={1} textColor={COLORS.headerText} H5 style={styles.title}>
          {locationText}
        </TextDefault>
        <Feather name="chevron-down" size={scale(20)} color={COLORS.fontSecondColor} />
      </TouchableOpacity>
      <View style={styles.searchContainer}>
        <TouchableOpacity onPress={toggleSearch} activeOpacity={1} style={styles.inputConainer}>
          <Octicons name="search" size={scale(18)} color={COLORS.headerText} />
          <TextDefault textColor={COLORS.fontSecondColor} style={styles.searchBar} light>
            {search ? search : 'Find Cars, Mobile Phone and more...'}
          </TextDefault>
        </TouchableOpacity>
        <BorderlessButton style={styles.bellBtn} onPress={onPressNotification}>
          <FontAwesome name="bell-o" size={scale(18)} color={COLORS.headerText} />
        </BorderlessButton>
      </View>
    </View>
  );
}
export default React.memo(MainHeader);

================
File: components/Header/MainHeader/MainHeader.types.ts
================
export type MainHeaderProps = {
  onPressNotification: () => void;
  inset: {
    top: number;
  };
  onModalToggle: () => void;
  locationText: string;
  toggleSearch: () => void;
  search?: string;
};

================
File: components/Header/MainHeader/index.ts
================
import MainHeader from './MainHeader';

export { MainHeader };

================
File: components/Header/MainHeader/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  headerBackground: {
    height: scale(120),
    backgroundColor: COLORS.headerbackground,
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    justifyContent: 'space-around',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
    ...alignment.PBxSmall,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    height: scale(30),
  },
  title: {
    maxWidth: '75%',
    ...alignment.PLsmall,
    ...alignment.PRsmall,
  },
  searchContainer: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  inputConainer: {
    width: '90%',
    borderWidth: StyleSheet.hairlineWidth * 2.5,
    borderRadius: scale(6),
    height: scale(35),
    alignItems: 'center',
    flexDirection: 'row',
    ...alignment.PLsmall,
    ...alignment.PRsmall,
    backgroundColor: COLORS.containerBox,
  },
  searchBar: {
    ...alignment.PLmedium,
  },
  bellBtn: {
    flex: 1,
    height: '70%',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
export default styles;

================
File: components/Header/ModalHeader/ModalHeader.tsx
================
import React from 'react';
import { StyleSheet, View } from 'react-native';

import { ModalHeaderProps } from './ModalHeader.types';
import styles from './styles';
import { TextDefault } from '../../Text';
import { LeftButton } from '../HeaderIcons/HeaderIcons';

import { COLORS } from '@/constants';

function ModalHeader({ title, closeModal }: ModalHeaderProps) {
  return (
    <View
      style={[styles.headerContainer, { borderBottomWidth: title ? StyleSheet.hairlineWidth : 0 }]}>
      <View style={styles.headerContents}>
        <LeftButton icon="close" iconColor={COLORS.headerText} navigate={closeModal} />
        {title && (
          <TextDefault textColor={COLORS.headerText} style={styles.title} bolder H3>
            {title}
          </TextDefault>
        )}
      </View>
    </View>
  );
}
export default React.memo(ModalHeader);

================
File: components/Header/ModalHeader/ModalHeader.types.ts
================
export type ModalHeaderProps = {
  title?: string;
  closeModal?: () => void;
};

================
File: components/Header/ModalHeader/index.ts
================
import ModalHeader from './ModalHeader';

export { ModalHeader };

================
File: components/Header/ModalHeader/styles.ts
================
import { Dimensions, StyleSheet } from 'react-native';

import { COLORS } from '@/constants';

const { height } = Dimensions.get('window');

const styles = StyleSheet.create({
  headerContainer: {
    width: '100%',
    height: height * 0.07,
    backgroundColor: COLORS.headerbackground,
    justifyContent: 'center',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
  },
  headerContents: {
    width: '100%',
    height: '90%',
    flexDirection: 'row',
    alignItems: 'center',
  },
  closeBtn: {
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    width: '15%',
  },
  title: {
    width: '70%',
  },
});

export default styles;

================
File: components/Header/index.ts
================
import { BackButton, LeftButton, RightButton } from './HeaderIcons';
import { MainHeader } from './MainHeader';
import { ModalHeader } from './ModalHeader';

export { BackButton, LeftButton, RightButton, ModalHeader, MainHeader };

================
File: components/LocationPermission/LocationPermission.tsx
================
import React from 'react';
import Svg, { Path, G, Circle, SvgProps } from 'react-native-svg';

import { COLORS } from '@/constants';

function LocationPermission(props: SvgProps) {
  return (
    <Svg viewBox="0 0 500 500" {...props}>
      <Path fill="#e0e0e0" d="M95.12 322.65h68.79V453.2H95.12z" />
      <Path fill="#ebebeb" d="M131.66 322.65h32.25V453.2h-32.25z" />
      <Path
        fill="#f5f5f5"
        d="M109.55 334.93h6.18v15.03h-6.18zM109.55 393.74h6.18v15.03h-6.18zM131.66 355.86c0 .13-8.18.23-18.27.23s-18.27-.1-18.27-.23 8.18-.24 18.27-.24 18.27.11 18.27.24zM109.55 364.56h6.18v15.03h-6.18zM131.66 385.49c0 .12-8.18.23-18.27.23s-18.27-.11-18.27-.23 8.18-.24 18.27-.24 18.27.11 18.27.24z"
      />
      <Path
        fill="#e0e0e0"
        d="M138.51 334.93h6.18v15.03h-6.18zM151.93 334.93h6.18v15.03h-6.18zM138.51 363.45h6.18v15.03h-6.18zM151.93 363.45h6.18v15.03h-6.18zM138.51 391.96h6.18v15.03h-6.18zM151.93 391.96h6.18v15.03h-6.18zM89.95 319.49h79.13v3.27H89.95z"
      />
      <Path
        d="M164.39 323.07c0 .13-15.37.23-34.33.23s-34.34-.1-34.34-.23 15.37-.23 34.34-.23 34.33.1 34.33.23zM49.92 371.61h61.58v81.22H49.92z"
        fill="#ebebeb"
      />
      <Path fill="#e0e0e0" d="M82.63 371.61h28.87v81.22H82.63z" />
      <Path
        fill="#f5f5f5"
        d="M62.83 382.61h5.54v13.45h-5.54zM62.83 435.26h5.54v13.45h-5.54zM82.63 401.34c0 .15-7.33.27-16.36.27s-16.35-.12-16.35-.27 7.32-.28 16.35-.28 16.36.13 16.36.28zM62.83 409.13h5.54v13.45h-5.54zM82.63 427.86c0 .15-7.33.28-16.36.28s-16.35-.13-16.35-.28 7.32-.27 16.35-.27 16.36.12 16.36.27zM88.76 382.61h5.54v13.45h-5.54zM100.77 382.61h5.54v13.45h-5.54zM88.76 408.13h5.54v13.45h-5.54zM100.77 408.13h5.54v13.45h-5.54zM88.76 433.66h5.54v13.45h-5.54zM100.77 433.66h5.54v13.45h-5.54z"
      />
      <Path fill="#e0e0e0" d="M45.29 368.78h70.84v2.93H45.29z" />
      <Path
        d="M111.93 372c0 .15-13.76.27-30.74.27s-30.74-.12-30.74-.27 13.76-.28 30.74-.28 30.74.12 30.74.28zM82.47 66.27s-9.8 3-.76 24 15.58 31.63 15.58 31.63 1.53 4.85-2.5 5.32-12.71-1.51-14.8 3.25c-2.18 4.93 1.18 9.94 8.34 14.61s22.48 15.49 23.87 16.47 2.63 3.27-.07 4-22.55 1.55-21.63 10.95 23 19.14 25.42 20.25 2.91 2.19 2.62 3.53-7 1-12.62 1.4-12.1 1.95-11.12 7.32 13.67 17.38 46 22.73l15.16 1.5L165.1 221c17.9-27.48 17.61-44.93 14.31-49.29s-8.77-.62-12.91 3.24-8.38 9.05-9.56 8.37-1.63-1.81-.83-4.32 8.53-25.4 2.22-32.42-20.27 7.1-22.65 8.58-3.21-1-3-2.67 2.58-20.29 4-28.73 0-14.29-5.14-16c-4.93-1.67-9.33 6.07-12.39 8.72s-5.62-1.75-5.62-1.75-3.38-12-12.8-32.84-18.46-15.55-18.46-15.55"
        fill="#ebebeb"
      />
      <Path
        d="M156.53 236.87c-6.86-15.37-18.6-42.9-28.8-66.48s-19.44-44.9-26.23-60.31l-8-18.23c-.94-2.14-1.68-3.81-2.18-5l-.56-1.3-.18-.45a3.6 3.6 0 01.22.43c.15.31.35.73.6 1.28l2.27 4.92c2 4.28 4.76 10.49 8.19 18.18 6.86 15.37 16.16 36.68 26.36 60.25s21.88 51.13 28.67 66.53"
        fill="#e0e0e0"
      />
      <Path
        d="M92 133.73a4.82 4.82 0 011 .37c.66.26 1.6.66 2.76 1.17 2.31 1 5.47 2.53 8.92 4.25l8.83 4.43 2.69 1.32a4.48 4.48 0 011 .53 5.06 5.06 0 01-1-.36c-.66-.26-1.6-.67-2.75-1.19-2.3-1.05-5.44-2.59-8.9-4.31l-8.86-4.36-2.69-1.31a5.14 5.14 0 01-1-.54zM118.32 144.9c-.12-.06 2.68-6.7 6.26-14.85s6.58-14.71 6.7-14.66-2.69 6.7-6.27 14.85-6.57 14.76-6.69 14.66zM132.34 181.81a5.71 5.71 0 01.68-.9l2-2.34c1.66-2 3.93-4.73 6.33-7.85s4.48-6 6-8.11l1.76-2.5a6.34 6.34 0 01.69-.89 4.51 4.51 0 01-.54 1c-.37.62-.93 1.51-1.64 2.59-1.42 2.15-3.46 5.09-5.87 8.21s-4.72 5.85-6.44 7.78c-.87 1-1.58 1.73-2.08 2.24a5 5 0 01-.89.77zM106.33 177a4 4 0 011 .08l2.8.41c2.36.37 5.61.91 9.19 1.53s6.83 1.21 9.18 1.66l2.77.56a3.67 3.67 0 011 .27 4.48 4.48 0 01-1-.09l-2.79-.41c-2.36-.36-5.61-.9-9.2-1.53s-6.83-1.21-9.17-1.66l-2.77-.56a4.59 4.59 0 01-1.01-.26zM114.57 211.1a7.93 7.93 0 011.32.13l3.59.51a996.968 996.968 0 0123.58 3.86l3.56.66a7.19 7.19 0 011.29.31 8 8 0 01-1.32-.13l-3.59-.51c-3-.45-7.19-1.11-11.8-1.86s-8.76-1.46-11.78-2l-3.56-.66a6.24 6.24 0 01-1.29-.31zM147.15 216.21a9.89 9.89 0 01.84-1.16l2.38-3.06c2-2.58 4.76-6.16 7.7-10.2s5.5-7.76 7.34-10.47c.89-1.3 1.62-2.38 2.18-3.21a9.19 9.19 0 01.85-1.15 9.23 9.23 0 01-.69 1.25c-.47.79-1.17 1.91-2.06 3.29-1.77 2.76-4.29 6.52-7.24 10.57s-5.75 7.6-7.82 10.13c-1 1.27-1.9 2.28-2.5 3a8.1 8.1 0 01-.98 1.01z"
        fill="#e0e0e0"
      />
      <Path
        d="M374.8 275.76c-20.26-14.15-24.85-40.42-24.05-64 .13-3.94-.3-8.1 1.57-11.56s6.25-5.82 9.78-4.16c2.93 1.38 4.21 4.79 5.84 7.6a23 23 0 009.25 8.83c2.51 1.3 5.61 2.1 8.09.73 3.4-1.87 3.8-6.57 3.78-10.49l-.14-21.92c0-3.92 0-7.92 1.18-11.64s3.92-7.18 7.65-8.22 8.34 1.1 9.12 4.94c.33 1.6 0 3.25.12 4.88s.86 3.43 2.41 3.88 3.13-.65 4.3-1.8c4.05-4 6.8-9.05 9.36-14.13s5.06-10.26 8.73-14.58 8.75-7.73 14.36-8.05 11.6 3.15 13 8.66-1.8 11.13-5.31 15.61a87.7 87.7 0 01-18.22 17.36c-1.24.88-2.58 1.83-3.05 3.28-.85 2.61 1.63 5.21 4.21 6.07 2.92 1 6.09.67 9.15 1s6.36 1.71 7.52 4.59c1.61 4-1.74 8.21-5 11a74.93 74.93 0 01-22.19 12.81c-2.88 1.05-5.92 2-8.24 4s-3.73 5.55-2.33 8.31 5 3.64 8 3.08 5.72-2.2 8.6-3.28c5.39-2 12.34-1.66 15.8 3 2.26 3.06 2.46 7.32 1.32 11s-3.48 6.79-5.95 9.69c-8.63 10.13-19.69 18.29-32.18 22.62s-24.08 5.51-36.5 1"
        fill="#f5f5f5"
      />
      <Path
        d="M374.49 293.27A172.51 172.51 0 01380.9 261a349 349 0 0113.94-37.82c1.41-3.28 2.79-6.53 4.16-9.72s2.74-6.36 4.26-9.37a177.92 177.92 0 019.75-16.8c3.36-5.19 6.74-10 9.93-14.47s6.26-8.57 9.21-12.19a140.48 140.48 0 0115.18-16.05c1.93-1.74 3.48-3 4.54-3.92l1.21-1a2.51 2.51 0 01.43-.32 3 3 0 01-.38.37l-1.17 1c-1 .91-2.54 2.25-4.44 4a149 149 0 00-15 16.17c-2.91 3.63-5.94 7.74-9.12 12.22s-6.52 9.29-9.85 14.48a177.29 177.29 0 00-9.68 16.76c-1.51 3-2.85 6.13-4.23 9.33s-2.75 6.44-4.16 9.72a359.36 359.36 0 00-14 37.72 174.72 174.72 0 00-6.48 32.21"
        fill="#e0e0e0"
      />
      <Path
        d="M403.47 204a8.14 8.14 0 01-.38-1.68c-.21-1.08-.45-2.66-.73-4.61-.55-3.9-1.14-9.32-1.75-15.29s-1.28-11.37-1.89-15.26c-.3-1.94-.56-3.51-.75-4.59a7.59 7.59 0 01-.22-1.7 8.16 8.16 0 01.49 1.64c.28 1.07.61 2.63 1 4.57.74 3.87 1.48 9.28 2.1 15.26s1.13 11.23 1.55 15.31c.19 1.84.36 3.39.49 4.63a7.66 7.66 0 01.09 1.72zM453.87 194.61a11.13 11.13 0 01-2 .24c-1.29.11-3.16.27-5.47.54-4.62.49-11 1.41-17.93 2.72s-13.22 2.79-17.71 4c-2.25.58-4.06 1.1-5.31 1.45a11.66 11.66 0 01-2 .49 10.27 10.27 0 011.88-.76c1.23-.43 3-1 5.26-1.67 4.47-1.33 10.73-2.88 17.71-4.21a177.61 177.61 0 0118-2.52c2.32-.2 4.21-.28 5.51-.31a9.35 9.35 0 012.06.03zM381.52 260s-.15-.2-.35-.61l-.86-1.82c-.74-1.59-1.76-3.92-3-6.8-2.43-5.78-5.54-13.86-8.85-22.82s-6.34-17.07-8.65-22.89l-2.75-6.88-.74-1.87a2.86 2.86 0 01-.21-.68 2.6 2.6 0 01.34.62c.24.49.52 1.09.87 1.82.74 1.59 1.75 3.91 3 6.8 2.44 5.77 5.54 13.85 8.85 22.82s6.34 17.06 8.65 22.88l2.75 6.88c.3.75.54 1.37.74 1.88a3.19 3.19 0 01.21.67zM448.49 238.45a2.59 2.59 0 01-.66.27l-1.95.65-7.17 2.33c-6.06 2-14.39 4.77-23.59 7.89s-17.58 5.85-23.67 7.69c-3.05.92-5.53 1.64-7.25 2.1l-2 .52a2.32 2.32 0 01-.7.13 3.15 3.15 0 01.66-.27l1.94-.65 7.18-2.33c6.05-2 14.39-4.77 23.59-7.89s17.57-5.85 23.67-7.69c3.05-.92 5.52-1.64 7.24-2.1l2-.52a2.28 2.28 0 01.71-.13z"
        fill="#e0e0e0"
      />
      <G>
        <Path
          d="M470.24 454.64c0 .14-98.61.26-220.23.26s-220.25-.12-220.25-.26 98.59-.27 220.25-.27 220.23.12 220.23.27z"
          fill="#263238"
        />
      </G>
      <G>
        <Path
          d="M151.32 299.36c15.89-16 15.72-40.42 11.14-61.52-.77-3.53-1.06-7.34-3.31-10.14s-6.58-4.21-9.48-2.14c-2.41 1.72-3 5-4 7.79a21 21 0 01-6.87 9.46c-2 1.58-4.7 2.8-7.15 2-3.37-1.13-4.5-5.29-5.12-8.82q-1.72-9.87-3.47-19.73c-.62-3.53-1.26-7.13-3-10.28s-4.69-5.81-8.22-6.14-7.32 2.36-7.4 5.94a33.42 33.42 0 00.7 4.41c.17 1.48-.22 3.22-1.53 3.88s-2.93-.07-4.17-.91c-4.29-2.9-7.59-7-10.73-11.17s-6.23-8.4-10.24-11.68-9.13-5.53-14.23-4.9-9.92 4.74-10.29 9.92 3.45 9.72 7.33 13.17a79.73 79.73 0 0019.23 12.63 6.57 6.57 0 013.28 2.45c1.19 2.21-.61 4.95-2.79 6.15-2.47 1.35-5.37 1.6-8.06 2.42s-5.44 2.58-6 5.37c-.79 3.87 2.91 7.09 6.33 9a68.5 68.5 0 0022 7.88c2.77.48 5.65.81 8.07 2.25s4.26 4.38 3.45 7.1-3.91 4.1-6.72 4.09-5.5-1-8.27-1.55c-5.18-.94-11.38.53-13.72 5.28-1.53 3.13-1 7 .61 10.09a26.13 26.13 0 006.94 7.73 68.84 68.84 0 0032.65 15.07c11.94 1.85 22.55 1 33-5.11"
          fill={COLORS.spinnerColor1}
        />
        <Path
          d="M154.46 315.05a156.79 156.79 0 00-11.05-28 321.36 321.36 0 00-18.74-31.73l-5.33-8.06c-1.76-2.65-3.51-5.27-5.37-7.72A161 161 0 00102.45 226c-3.87-4.12-7.69-7.88-11.29-11.38s-7-6.69-10.29-9.46a125.8 125.8 0 00-16.28-11.94c-2-1.26-3.63-2.18-4.72-2.79l-1.25-.69a2.18 2.18 0 00-.44-.21 3 3 0 00.41.27l1.21.75c1.08.64 2.66 1.6 4.66 2.89a134.24 134.24 0 0116.11 12.08c3.22 2.79 6.62 6 10.21 9.49s7.38 7.3 11.23 11.42a161.09 161.09 0 0111.45 13.48c1.85 2.45 3.57 5 5.33 7.7s3.53 5.34 5.34 8.06a329.18 329.18 0 0118.74 31.63A160.2 160.2 0 01154 315.18"
          fill="#263238"
        />
        <Path
          d="M113.78 239.54a6.57 6.57 0 00.07-1.56c0-1 0-2.47-.1-4.27-.14-3.6-.51-8.57-.93-14s-.71-10.43-.8-14c0-1.79-.07-3.25-.08-4.25a6.29 6.29 0 00-.08-1.57 8 8 0 00-.17 1.56c-.08 1-.12 2.46-.13 4.26 0 3.61.18 8.59.61 14.08s.82 10.28 1.11 14c.13 1.68.23 3.1.31 4.25a6.72 6.72 0 00.19 1.5zM66.91 239.33a11 11 0 001.85-.11c1.18-.11 2.89-.28 5-.41 4.23-.31 10.09-.53 16.57-.49s12.34.34 16.58.68c2.12.15 3.83.32 5 .43a8.86 8.86 0 001.85.11 11 11 0 00-1.82-.37 91.39 91.39 0 00-5-.64c-4.24-.46-10.12-.83-16.62-.88a162 162 0 00-16.61.69c-2.12.19-3.83.43-5 .62a8.85 8.85 0 00-1.8.37zM142.7 286.32a3 3 0 00.21-.61l.48-1.78c.4-1.55.93-3.81 1.55-6.6 1.24-5.6 2.71-13.37 4.22-22s2.91-16.38 4-22c.55-2.73 1-5 1.35-6.64.14-.72.26-1.32.36-1.81a2.77 2.77 0 00.08-.64s-.1.2-.21.61l-.48 1.78c-.41 1.55-.94 3.8-1.56 6.6-1.24 5.59-2.71 13.37-4.22 22s-2.9 16.39-4 22c-.56 2.72-1 5-1.35 6.63-.15.73-.26 1.33-.36 1.81a2.82 2.82 0 00-.07.65z"
          fill="#263238"
        />
        <Path
          d="M78.93 277.88a3.16 3.16 0 00.64.13l1.86.27 6.83.92c5.77.77 13.72 1.93 22.51 3.22s16.76 2.39 22.55 3c2.89.33 5.23.57 6.85.71l1.87.14a2.55 2.55 0 00.66 0 2.19 2.19 0 00-.64-.14l-1.86-.27-6.83-.91c-5.77-.78-13.72-1.94-22.51-3.23s-16.76-2.39-22.54-3c-2.9-.33-5.24-.57-6.86-.71l-1.87-.14a1.86 1.86 0 00-.66.01z"
          fill="#263238"
        />
        <Path
          d="M333.32 118.08a11.14 11.14 0 003.83-10.5 14.8 14.8 0 00-6.37-9.48c-1.49-1-3.34-1.84-5.07-1.32a4.73 4.73 0 00-3.08 3.71 9.57 9.57 0 00.58 5c1.89 5.48 4.73 10.43 10.11 12.61M338.39 127.44a26.05 26.05 0 0123-6c2.05.47 4.35 1.56 4.69 3.63s-1.52 3.84-3.34 4.89a22.23 22.23 0 01-24.6-2M367.75 84.11a13 13 0 00-10.07 1.73 22.92 22.92 0 00-7.2 7.52c-3.63 5.73-4.9 13.42-5.06 20.19 7.51-.3 13.94-6.21 17-9.41 4.85-5.06 10.55-17.16 5.32-20"
          fill="#455a64"
        />
        <Path
          d="M327 137.67a26 26 0 001.87-2.83 47.52 47.52 0 004.24-12.07 24 24 0 00-.94-12.74 15.82 15.82 0 00-1.82-3.45c-.54-.75-.89-1.11-.93-1.08a33.2 33.2 0 012.25 4.72 25.14 25.14 0 01.69 12.41 55.59 55.59 0 01-4 12"
          fill="#263238"
        />
        <Path
          d="M327 137.76l3.91-5c3.3-4.27 7.86-10.16 13-16.59s9.85-12.2 13.28-16.37l4.05-4.94a13.14 13.14 0 001.41-1.88 14.6 14.6 0 00-1.65 1.64c-1 1.11-2.46 2.75-4.23 4.79-3.54 4.07-8.33 9.79-13.46 16.23s-9.64 12.39-12.83 16.75c-1.59 2.18-2.86 4-3.72 5.2"
          fill="#263238"
        />
        <Path
          d="M356.71 125.87a4.79 4.79 0 00-1.31-.4 11 11 0 00-1.57-.3 19.19 19.19 0 00-2.11-.23 28.13 28.13 0 00-5.52.21 29.21 29.21 0 00-12.54 4.85 27.57 27.57 0 00-4.22 3.58 18.35 18.35 0 00-1.4 1.59 9.93 9.93 0 00-1 1.29c-.49.73-.42 1.07-.38 1.1a46.35 46.35 0 013.11-3.6 30.32 30.32 0 014.23-3.38 34.31 34.31 0 015.87-3 33.83 33.83 0 016.38-1.72 30.78 30.78 0 015.4-.37c3.14.07 5.03.51 5.06.38z"
          fill="#263238"
        />
      </G>
      <G>
        <Path
          d="M298.42 454.51l-133.87-.62c-16.1-.07-29.09-13.54-29-30.09L137 78.94c.07-16.55 13.18-29.92 29.29-29.84l133.87.62c16.1.07 29.09 13.54 29 30.09l-1.46 344.86c-.06 16.55-13.17 29.92-29.28 29.84z"
          fill="#263238"
        />
        <Path d="M318.55 364.13a2.95 2.95 0 11-2.94-2.95 2.95 2.95 0 012.94 2.95z" fill="#e0e0e0" />
        <Path d="M315.61 370.6a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47z" fill="#e0e0e0" />
        <Path
          d="M302.83 61.1l-26.77-.1a6.65 6.65 0 00-6.53 6.77v4.85a6.65 6.65 0 01-6.53 6.75l-52.19-.24a6.66 6.66 0 01-6.47-6.83v-4.85a6.65 6.65 0 00-6.47-6.83h-9.42L165 60.47a21.06 21.06 0 00-21.16 21l-1.43 337.89a21.06 21.06 0 0021 21.16l137.81.64a21.07 21.07 0 0021.16-21l1.42-337.9a21.08 21.08 0 00-20.97-21.16z"
          fill="#fafafa"
        />
        <Path
          d="M151.58 327.74c1.18-.88 58.81-26.27 58.81-26.27l-67.32-33.58-.23 54.11z"
          fill="#ebebeb"
        />
        <Path
          fill={COLORS.spinnerColor1}
          d="M155.1 266.85l49.11-24.96-52.77-29.26-8.14 2.04-.2 47.34 12 4.84z"
        />
        <Path
          fill="#fff"
          opacity={0.7}
          d="M155.1 266.85l49.11-24.96-52.77-29.26-8.14 2.04-.2 47.34 12 4.84z"
        />
        <Path
          fill="#ebebeb"
          d="M145.07 209.23l151.37-70.7-149.97-49.01-1.4 119.71zM143.31 393.35l69.17-35.5 102.97 60.58-24.53 21.51h-87.87l-59.74-36.51v-10.08zM226.1 354.01l85.54 50.72 9.54-1.08v-48.77l-46.88-24.81-48.2 23.94zM240.16 305.58l80.65 45.37v-59.31l-29.18-12.5-51.47 26.44zM154.02 330.58l47.31 25.96 57.42-29.74-45.62-23.2-59.11 26.98zM225.04 241.56l67.02 33.21 31.08-15.87.2-22.26-45.27-21.97-53.03 26.89zM156.5 270.53l67.02 33.21 31.08-15.87.2-22.26-45.28-21.97-53.02 26.89zM165.78 210.84l54.62 27.35 50.94-27.35-52.78-24.08-52.78 24.08z"
        />
        <Path
          d="M271.34 385.62a6.72 6.72 0 01-1-.5l-2.82-1.59-10.85-6.27-40.16-23.55-.83-.49.86-.44L269.23 326v1.22l-39.34-21-1.24-.66 1.25-.66 54.64-28.68v1.39l-6.52-3.3-122.4-62.1-1.15-.58 1.17-.56 65-31 18-8.49 4.74-2.18 1.23-.54a2.18 2.18 0 01.43-.15 1.62 1.62 0 01-.39.24l-1.18.62-4.69 2.43-17.88 8.81-64.71 31.47v-1.18l122.53 61.83 6.52 3.3 1.35.69-1.34.7-54.68 28.62v-1.32L269.86 326l1.16.62-1.17.59L217 353.73v-.93l39.92 24 10.7 6.51 2.75 1.72a5.69 5.69 0 01.97.59z"
          fill={COLORS.spinnerColor1}
        />
        <Path
          d="M259.59 136.64c0-10-10.48-16.3-21.17-11.3a12.13 12.13 0 00-5.62 5.39c-2.69 5.21-1.5 11.16.93 16.1l8.32 21.08a3.58 3.58 0 006.68 0l8.15-21.19c2.83-6.48 2.71-10.08 2.71-10.08zm-10 8.68c-7.19 4.18-14.47-3.54-10.53-11.16a6 6 0 012.28-2.42c7.19-4.18 14.47 3.54 10.53 11.16a6 6 0 01-2.32 2.42z"
          fill={COLORS.spinnerColor1}
        />
        <Path fill="#f5f5f5" d="M243.63 245.78l-.24-11.78 30.71 14.87v12.24l-30.47-15.33z" />
        <Path fill="#e0e0e0" d="M274.1 248.87l38.14-18.95v13.19l-38.14 18v-12.24z" />
        <Path fill="#f5f5f5" d="M243.39 234l37.43-18.72 31.42 14.64-38.14 18.95L243.39 234z" />
        <Path
          fill="#fafafa"
          d="M247.4 239.09v5.71l3 1.35v-5.46l-3-1.6zM252.2 241.2v5.72l3.01 1.35v-5.46l-3.01-1.61z"
        />
        <Path fill="#e0e0e0" d="M147.01 171.45v-15.33l36.35 17.61v14.48l-36.35-16.76z" />
        <Path fill="#f5f5f5" d="M183.36 173.73l45.16-22.44v15.62l-45.16 21.3v-14.48z" />
        <Path
          fill="#fafafa"
          d="M147.01 156.12l44.3-22.15 37.21 17.32-45.16 22.44-36.35-17.61zM151.76 162.14v6.77l3.55 1.6v-6.47l-3.55-1.9zM157.44 164.65v6.76l3.56 1.61v-6.47l-3.56-1.9z"
        />
        <Path d="M256.59 299.59v12.08l13 6.39v-12.48z" fill="#e0e0e0" />
        <Path fill="#e0e0e0" d="M286.09 297.67l-16.55 7.91v12.48l16.55-9.24v-11.15z" />
        <Path fill="#f5f5f5" d="M256.59 299.59l16.4-7.95 13.1 6.03-16.55 7.91-12.95-5.99z" />
        <Path fill="#fafafa" d="M261.19 308.26v5.71l3 1.36v-5.46l-3-1.61z" />
        <Path
          d="M151.94 293.34v12.08l12.95 6.39v-12.48zM181.45 291.42l-16.56 7.91v12.48l16.56-9.24v-11.15z"
          fill="#e0e0e0"
        />
        <Path fill="#f5f5f5" d="M151.94 293.34l16.41-7.95 13.1 6.03-16.56 7.91-12.95-5.99z" />
        <Path fill="#fafafa" d="M156.54 302.01v5.71l3 1.36v-5.46l-3-1.61z" />
        <Path d="M205.65 213.6v12.09l12.95 6.39V219.6z" fill="#f5f5f5" />
        <Path fill="#e0e0e0" d="M235.16 211.69l-16.56 7.91v12.48l16.56-9.24v-11.15z" />
        <Path fill="#f5f5f5" d="M205.65 213.6l16.41-7.94 13.1 6.03-16.56 7.91-12.95-6z" />
        <Path
          fill="#e0e0e0"
          d="M210.25 222.28v5.71l3 1.36v-5.47l-3-1.6zM191.25 317.13v12.09l12.95 6.38v-12.47z"
        />
        <Path fill="#ebebeb" d="M220.76 315.21l-16.55 7.92v12.47l16.55-9.23v-11.16z" />
        <Path fill="#f5f5f5" d="M191.25 317.13l16.41-7.94 13.1 6.02-16.55 7.92-12.96-6z" />
        <Path fill="#fafafa" d="M195.85 325.8v5.72l3 1.35v-5.46l-3-1.61z" />
        <Path d="M244.73 346.32v15.15L272 377.54V361.9z" fill="#f5f5f5" />
        <Path fill="#e0e0e0" d="M292.79 350.72l-20.76 11.18v15.64l20.76-11.58v-15.24z" />
        <Path
          fill="#fafafa"
          d="M244.73 346.31l20.58-9.96 27.48 14.37-20.76 11.18-27.3-15.59zM255.04 360.33v7.16l3.77 2.26v-7.08l-3.77-2.34z"
        />
        <Path d="M179.06 377.5v15.15l27.3 16.08v-15.65z" fill="#e0e0e0" />
        <Path fill="#fafafa" d="M238.94 375.43l-32.58 17.65v15.65l32.67-18.11-.09-15.19z" />
        <Path fill="#f5f5f5" d="M179.06 377.5l34.46-16.69 25.51 14.68-32.67 17.59-27.3-15.58z" />
        <Path fill="#fafafa" d="M189.37 391.51v7.17l3.76 2.26v-7.09l-3.76-2.34z" />
        <Path fill="#f5f5f5" d="M282.4 320.85v60.51l17.04 8.81V328.9l-17.04-8.05z" />
        <Path fill="#fafafa" d="M294.99 315.05l-12.59 5.8 17.04 8.05 11.46-6.46-15.91-7.39z" />
        <Path fill="#e0e0e0" d="M299.44 328.9v61.27l10.37-5.58 1.09-62.15-11.46 6.46z" />
        <Path fill="#f5f5f5" d="M210.39 271.84v60.51l17.04 8.81v-61.27l-17.04-8.05z" />
        <Path fill="#fafafa" d="M222.97 266.03l-12.58 5.81 17.04 8.05 11.46-6.46-15.92-7.4z" />
        <Path
          fill="#e0e0e0"
          d="M227.43 279.89v61.27l10.36-5.11 1.1-62.62-11.46 6.46zM218.12 386.91v15.15l27.31 16.08V402.5z"
        />
        <Path fill="#fafafa" d="M266.18 391.32l-20.75 11.18v15.64l20.75-11.58v-15.24z" />
        <Path fill="#f5f5f5" d="M218.12 386.91l20.82-11.48 27.24 15.89-20.75 11.18-27.31-15.59z" />
        <Path fill="#fafafa" d="M228.43 400.92v7.17l3.77 2.26v-7.09l-3.77-2.34z" />
        <Path fill="#ebebeb" d="M278.84 206.28l-49.72-22.41 69.24-35.24 22.72 33.88-42.24 23.77z" />
        <Path fill={COLORS.spinnerColor1} d="M323.1 226.86l.34-38.8L284.89 210l38.21 16.86z" />
        <Path d="M293.81 265.72a2.95 2.95 0 11-2.95-3 3 3 0 012.95 3z" fill="#e0e0e0" />
        <Path
          d="M290.86 272.19a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM213.34 258.49a3 3 0 11-3-3 2.95 2.95 0 013 3z"
          fill="#e0e0e0"
        />
        <Path
          d="M210.39 265a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM173.92 299.67a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M171 306.14a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM176.87 267.89a2.95 2.95 0 11-3-2.95 2.95 2.95 0 013 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M173.92 274.36a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM249.67 265a3 3 0 11-2.95-2.94 2.95 2.95 0 012.95 2.94z"
          fill="#e0e0e0"
        />
        <Path
          d="M246.72 271.44a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM296.26 287.07a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M293.31 293.54a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM298.14 304.42a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M295.19 310.89a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM215.43 340.42a2.95 2.95 0 11-3-2.95 2.95 2.95 0 013 2.95z"
          fill="#e0e0e0"
        />
        <Path d="M212.48 346.89a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47z" fill="#e0e0e0" />
        <Circle cx={309.39} cy={391.85} r={2.95} fill="#e0e0e0" />
        <Path
          d="M309.39 398.32a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM256 424.11a3 3 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M253 430.58a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM233.26 415.2a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M230.31 421.67a20.26 20.26 0 010-6.47 19.52 19.52 0 010 6.47zM285.35 408.73a3 3 0 11-3-3 2.95 2.95 0 013 3z"
          fill="#e0e0e0"
        />
        <Path d="M282.4 415.2a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47z" fill="#e0e0e0" />
        <Circle cx={237.99} cy={351.92} r={2.95} fill="#e0e0e0" />
        <Path
          d="M238 358.39a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM248.38 323.13a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M245.43 329.6a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM176.87 326.37a2.95 2.95 0 11-3-2.95 2.95 2.95 0 013 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M173.92 332.84a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM313.09 299.67a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M310.14 306.14a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM305.18 255.54a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path d="M302.23 262a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47z" fill="#e0e0e0" />
        <Circle cx={242.5} cy={216.54} r={2.95} fill="#e0e0e0" />
        <Path
          d="M242.5 223a19.52 19.52 0 010-6.47 20.26 20.26 0 010 6.47zM189.05 272.19a2.95 2.95 0 11-3-2.95 2.95 2.95 0 013 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M186.1 278.66a20.26 20.26 0 010-6.47 19.52 19.52 0 010 6.47zM223.71 195.49a3 3 0 11-3-3 2.95 2.95 0 013 3z"
          fill="#e0e0e0"
        />
        <Path
          d="M220.76 202a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM283.86 189a2.95 2.95 0 11-2.95-3 2.95 2.95 0 012.95 3z"
          fill="#e0e0e0"
        />
        <Path
          d="M280.91 195.49a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM300.49 186.3a3 3 0 11-2.95-3 2.95 2.95 0 012.95 3z"
          fill="#e0e0e0"
        />
        <Path
          d="M297.54 192.77a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM293.81 164.54a2.95 2.95 0 11-2.95-2.95 3 3 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M290.86 171a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM201.18 214.67a2.95 2.95 0 11-3-2.95 2.95 2.95 0 013 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M198.23 221.14a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM269.74 186.76a3 3 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M266.79 193.23a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM186.91 120.32a3 3 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M184 126.78a10.35 10.35 0 01-.26-3.23 10.35 10.35 0 01.26-3.23 10 10 0 01.26 3.23 10 10 0 01-.26 3.23zM220.76 136.47a2.95 2.95 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M217.81 142.94a10.41 10.41 0 01-.26-3.23 10.45 10.45 0 01.26-3.24 10.45 10.45 0 01.26 3.24 10.41 10.41 0 01-.26 3.23zM167 187.49a3 3 0 11-3-3 2.95 2.95 0 013 3z"
          fill="#e0e0e0"
        />
        <Path
          d="M164 194a20.26 20.26 0 010-6.47 20.26 20.26 0 010 6.47zM169.91 139.42a3 3 0 11-2.95-2.95 2.95 2.95 0 012.95 2.95z"
          fill="#e0e0e0"
        />
        <Path
          d="M167 145.89a10.06 10.06 0 01-.26-3.23 10.1 10.1 0 01.26-3.24 10.45 10.45 0 01.26 3.24 10.41 10.41 0 01-.26 3.23z"
          fill="#e0e0e0"
        />
        <Path
          fill="#ebebeb"
          d="M296.86 276.97l24.32-12.89-.1 23.25-24.22-10.36zM195.85 359.41l-53.28 27.5V335.6l5.9-2.63 47.38 26.44z"
        />
        <Path
          d="M275.43 386.91a3.4 3.4 0 11-3.4-3.4 3.4 3.4 0 013.4 3.4z"
          fill={COLORS.spinnerColor1}
        />
        <Path fill="#ebebeb" d="M306.54 144.22l16.97 5.16v26.74l-16.97-31.9z" />
        <Path
          d="M323.68 108.5l-.1-29.18a21.06 21.06 0 00-20.75-18.22l-26.77-.1a6.65 6.65 0 00-6.53 6.77v4.85a6.65 6.65 0 01-6.53 6.75l-52.19-.24a6.66 6.66 0 01-6.47-6.83v-4.85a6.65 6.65 0 00-6.47-6.83h-9.42L165 60.47A21 21 0 00150.75 66c-2.35 4.53-4.92 11-3.74 15.89l176.54 57.47z"
          fill={COLORS.spinnerColor1}
        />
        <Path
          d="M323.68 108.5l-.1-29.18a21.06 21.06 0 00-20.75-18.22l-26.77-.1a6.65 6.65 0 00-6.53 6.77v4.85a6.65 6.65 0 01-6.53 6.75l-52.19-.24a6.66 6.66 0 01-6.47-6.83v-4.85a6.65 6.65 0 00-6.47-6.83h-9.42L165 60.47A21 21 0 00150.75 66c-2.35 4.53-4.92 11-3.74 15.89l176.54 57.47z"
          fill="#fff"
          opacity={0.7}
        />
        <Path
          d="M302.83 61.1h.72a16.21 16.21 0 012.13.18 19.74 19.74 0 017.89 2.76 20.4 20.4 0 014.79 3.96 21.15 21.15 0 014 6.31 21.86 21.86 0 011.54 8.55v9.93c-.1 28.07-.24 68.68-.42 118.86s-.43 109.93-.69 176.28q0 12.43-.1 25.18v6.39a22.49 22.49 0 01-.84 6.41 21 21 0 01-2.71 5.92 22.48 22.48 0 01-4.4 4.84 21.27 21.27 0 01-12.16 4.67c-1.11.07-2.21.05-3.31.05h-9.93l-26.83-.12-55.13-.27-28.16-.13-14.22-.11a22.26 22.26 0 01-13.68-3.84 21.47 21.47 0 01-8.32-11.55 22.9 22.9 0 01-.85-7.12v-7.1l.12-28.17q.12-28 .23-55.07c.16-36.11.31-70.94.46-104.12s.29-64.7.42-94.21q.1-22.13.2-42.69v-5.11c0-.85.08-1.71.13-2.56s.22-1.68.44-2.5a21.52 21.52 0 014.46-8.9 21.36 21.36 0 0117.19-7.53l18.36.09h13.16a6.71 6.71 0 014.13 1.17 7 7 0 012.64 3.45 11.57 11.57 0 01.41 4.16v2a14.87 14.87 0 000 2 6.68 6.68 0 001.57 3.54 6.15 6.15 0 003.22 2 7.1 7.1 0 001.9.2h9.55l27.77.15 12.25.07h2.87a6.17 6.17 0 002.59-.9 6.69 6.69 0 003-4.24 12.21 12.21 0 00.17-2.56V68.9a13.33 13.33 0 01.12-2.45 6.86 6.86 0 01.8-2.25 6.59 6.59 0 013.37-3 10.58 10.58 0 014.18-.43l13.66.09 8.4.06h2.87-24.93a10.16 10.16 0 00-4.12.43 6.46 6.46 0 00-3.28 2.88 6.94 6.94 0 00-.77 2.2 13.74 13.74 0 00-.11 2.42v2.52a11.46 11.46 0 01-.18 2.6 6.85 6.85 0 01-3.06 4.38 6.37 6.37 0 01-2.67.94c-1 .08-1.92 0-2.9 0h-12.25l-27.77-.11h-9.55a7.45 7.45 0 01-2-.2 6.57 6.57 0 01-3.33-1.98 7 7 0 01-1.64-3.71 15.7 15.7 0 01-.06-2.05v-2a11 11 0 00-.39-4 6.65 6.65 0 00-2.44-3.22 6.34 6.34 0 00-3.94-1.1h-13.16l-18.37-.07A21 21 0 00149 68.07a21.22 21.22 0 00-4.37 8.74c-.21.8-.28 1.64-.43 2.46s-.11 1.66-.12 2.51v5.11q-.09 20.53-.17 42.69c-.11 29.51-.24 61-.37 94.21s-.28 68-.43 104.12Q143 355 142.84 383q0 14-.11 28.17v7.11a22.43 22.43 0 00.83 7 21 21 0 008.08 11.26 21.74 21.74 0 0013.36 3.7l14.22.06 28.17.13 55.05.26 26.83.13h9.93c1.1 0 2.2 0 3.28-.05a20.78 20.78 0 0011.88-4.56 22 22 0 004.3-4.73 20.68 20.68 0 002.65-5.77 21.84 21.84 0 00.81-6.28v-6.39q.06-12.75.11-25.19c.31-66.34.58-126.09.8-176.27s.45-90.79.59-118.86q0-5.26.05-9.93a21.55 21.55 0 00-1.5-8.49 20.71 20.71 0 00-3.94-6.28 20.47 20.47 0 00-4.74-3.91 19.93 19.93 0 00-7.84-2.8 15.42 15.42 0 00-2.13-.2c-.45.02-.69-.01-.69-.01z"
          fill="#263238"
        />
      </G>
      <G>
        <Path
          d="M365.37 259.79c14.81.37 29.78.76 44.1 4.56s28.15 11.36 36.64 23.5c9.36 13.36 11.22 30.44 12.15 46.72a521.33 521.33 0 01-1.26 81.08c-1.34 13.64-6.18 26.32-18.87 31.51-15.26 6.25-35.77 0-35.77 0"
          fill="#263238"
        />
        <Path
          d="M405.09 443.91h2.21l6.33-.05a71.69 71.69 0 0010-.52c1-.16 2-.27 3-.53l1.54-.34c.52-.14 1-.31 1.57-.46 1.07-.28 2.11-.73 3.2-1.13a30.58 30.58 0 003.2-1.58 23.14 23.14 0 006-4.76 18.06 18.06 0 003.91-7.2 85.86 85.86 0 002.25-18.23c.2-6.49.13-13.31.19-20.39s.06-14.39.1-21.89.11-14.83-.13-21.9a148.81 148.81 0 00-1.92-20.26c-2.16-12.79-6.63-23.88-12.41-31.82a71 71 0 00-8.84-9.82c-2.85-2.67-5.41-4.85-7.51-6.62l-4.86-4.05-1.25-1.07a4.85 4.85 0 01-.42-.38s.16.11.45.34l1.29 1 4.92 4c2.12 1.74 4.71 3.9 7.58 6.56a70.17 70.17 0 018.94 9.82c5.85 8 10.39 19.11 12.59 32a148.21 148.21 0 011.94 20.33c.26 7.08.18 14.41.15 21.91s-.07 14.82-.11 21.9 0 13.89-.22 20.4a86.42 86.42 0 01-2.31 18.33 18.49 18.49 0 01-4 7.35 23.61 23.61 0 01-6.07 4.81 32.26 32.26 0 01-3.24 1.59c-1.11.4-2.17.84-3.25 1.12l-1.58.45-1.56.34c-1 .25-2 .35-3 .51a69.38 69.38 0 01-10 .43h-7.98z"
          fill="#455a64"
        />
        <Path
          d="M448.71 370.65a14.77 14.77 0 015.19-.93 15.07 15.07 0 015.26.44c0 .15-2.36-.06-5.24.08s-5.18.56-5.21.41z"
          fill="#455a64"
        />
        <Path
          d="M384.72 260.56H386.23c1 0 2.46 0 4.34.17a66.55 66.55 0 0115.6 3.33l2.43.9 1.26.47 1.24.56 2.57 1.17c.88.39 1.71.89 2.6 1.35a71.05 71.05 0 0110.6 6.93 73 73 0 0110.2 9.59 53.69 53.69 0 018.25 12.55c4.46 9.35 6.39 19.14 7.38 28s1 16.92 1 23.66 0 12.18.13 15.95c.06 1.86.1 3.31.13 4.34v1.12a2.29 2.29 0 010 .39 1.65 1.65 0 010-.38c0-.28 0-.66-.08-1.13-.07-1-.14-2.45-.22-4.33-.15-3.77-.23-9.22-.3-16s-.18-14.76-1.15-23.61-3-18.53-7.37-27.8a52.83 52.83 0 00-8.17-12.44 71.59 71.59 0 00-10.11-9.55 70.39 70.39 0 00-10.51-6.93c-.87-.46-1.7-1-2.57-1.36l-2.55-1.17-1.24-.57-1.24-.47-2.41-.92a69.87 69.87 0 00-15.5-3.47c-1.87-.16-3.34-.19-4.32-.26l-1.13-.07a1.65 1.65 0 01-.37-.02z"
          fill="#e0e0e0"
        />
        <Path
          d="M375.46 260.53s3.63-9.59 16.56-7.77c0 0 5.76-.32 6.81 2.88 0 0-12.05-3-17.18 5.34z"
          fill="#263238"
        />
        <Path
          d="M412.31 272.21h-7.57s-1.47-20-19.83-19.25c0 .04 22.82-7.64 27.4 19.25zM448.82 382.87l10.86 1.5-1.09 3.86-10.13-.78.36-4.58z"
          fill="#455a64"
        />
        <Path
          d="M449.48 386.36a8.85 8.85 0 011.27-1.95l.15-.2.17.2 1.52 1.85-.35-.05 1.08-.8 1.13-.82.2-.15.15.21 1.39 2-.28-.05a9.26 9.26 0 012-1.16 8.42 8.42 0 01-1.72 1.49l-.19.07-.12-.16-1.48-1.9.35.05-1.11.83-1.09.79-.2.15-.15-.2-1.44-1.9h.32a8.81 8.81 0 01-1.6 1.7zM291 454.34s-2.1-6.84-1.68-9.74 4.31-5.52 4.31-5.52l-4.22-109.65s-.54-48 24.84-62.87l15.15-3.82 37.37-2.21c1.21.4 45.13 16.92 51.17 23.37L399 380.6s2.3 28.57 4.59 49.1c.47 4.2 3.62 24.94 3.62 24.94z"
          fill={COLORS.spinnerColor1}
        />
        <Path
          d="M402.89 423.25c-.36 2.66-1.37 5.91-3.93 6.74a16.73 16.73 0 01-8 .11c-9.36-1.67-18-6.07-26.45-10.41-15.81-8.13-31.77-16.34-45.43-27.74-1.92-1.6-4-4.09-2.79-6.3 1.33-2.5 5.08-1.66 7.65-.47 26.82 12.36 52.12 25.7 78.94 38.07"
          opacity={0.3}
        />
        <Path
          d="M308.56 269.55s-16.73 5.58-22.14 21.08c-6 17.12-9.94 50.36-9.94 50.36l16.52 2.08zM417.92 283.9s9 11.8 13.34 26.14 6.86 55.89 6.86 55.89l-45-.62-2.39-36.57s-4.54-61.01 27.19-44.84z"
          fill={COLORS.spinnerColor1}
        />
        <Path
          d="M282.38 305.56a5.33 5.33 0 011.25-1.17 6.11 6.11 0 014.73-.91c2.18.32 4.3 2 7.09 3.1a8 8 0 004.64.57c1.64-.35 3.07-1.53 4.57-2.68a12.6 12.6 0 012.5-1.57 4 4 0 013.11-.13 5.23 5.23 0 012.42 2.16c.62.9 1.12 1.88 1.77 2.76a4.85 4.85 0 002.54 2 5.93 5.93 0 003.34 0 12.83 12.83 0 003.26-1.41c1-.61 2-1.35 3.11-2a14.77 14.77 0 013.48-1.69 6.62 6.62 0 014 0 10.46 10.46 0 013.46 2.12c1 .87 2 1.83 3.05 2.66a7.73 7.73 0 003.56 1.74 7.31 7.31 0 004-.41c2.6-1 4.9-2.74 7.46-4.15a13.83 13.83 0 014.07-1.63 8.11 8.11 0 014.34.34c2.72 1.06 4.74 3.13 7.16 4.28a8.6 8.6 0 001.86.66 7.46 7.46 0 001.94.13 10.87 10.87 0 003.73-1.07c2.37-1.07 4.51-2.57 7-3.38a7.6 7.6 0 013.78-.33 7.08 7.08 0 013.29 1.68c1.83 1.53 3.28 3.48 5.37 4.13a6.23 6.23 0 003.15.09 23.24 23.24 0 003-.9c1.93-.68 3.95-1.38 5.91-.93a6.18 6.18 0 012.54 1.25c.73.56 1.37 1.18 2 1.74a10.79 10.79 0 002 1.45 6.41 6.41 0 002.16.69 9 9 0 004.09-.41 12.26 12.26 0 003.11-1.59 27.23 27.23 0 003.68-3.19l.9-.9a1.7 1.7 0 01.32-.29s-.09.12-.28.33l-.86.94a26.21 26.21 0 01-3.65 3.28 12.36 12.36 0 01-3.14 1.65 9.2 9.2 0 01-4.21.47 6.65 6.65 0 01-2.27-.71 11.51 11.51 0 01-2-1.47c-1.29-1.1-2.57-2.51-4.41-2.88s-3.76.26-5.69.95a24.21 24.21 0 01-3.06.93 6.72 6.72 0 01-3.36-.09 8.22 8.22 0 01-3-1.81c-.88-.78-1.68-1.63-2.59-2.38a6.48 6.48 0 00-3.08-1.57 7.16 7.16 0 00-3.54.33c-2.35.78-4.49 2.27-6.91 3.37a11.13 11.13 0 01-3.89 1.12 8.06 8.06 0 01-2.08-.13 9.33 9.33 0 01-2-.7c-2.52-1.21-4.54-3.26-7.13-4.25a7.53 7.53 0 00-4.05-.32A13.76 13.76 0 00356 307c-2.52 1.38-4.82 3.17-7.53 4.19a8 8 0 01-4.26.43 8.29 8.29 0 01-3.78-1.85c-2.17-1.69-3.91-3.89-6.36-4.7a6.11 6.11 0 00-3.69 0 14.3 14.3 0 00-3.36 1.63c-1.07.65-2.06 1.39-3.14 2a13.33 13.33 0 01-3.37 1.44 6.48 6.48 0 01-3.6 0 5.39 5.39 0 01-2.75-2.13c-.67-.92-1.17-1.91-1.76-2.79a5 5 0 00-2.22-2 3.59 3.59 0 00-2.82.12 11.74 11.74 0 00-2.43 1.51c-1.5 1.12-3 2.33-4.72 2.71a8.31 8.31 0 01-4.82-.63c-2.83-1.12-4.91-2.83-7-3.17a6.09 6.09 0 00-4.64.8 11.7 11.7 0 00-1.37 1zM277.08 332.6a2.43 2.43 0 01.44 0l1.3.13a11.19 11.19 0 004.92-.13c1.06-.23 2.25-.44 3.55-.67s2.69-.54 4.23-.72a11.74 11.74 0 015 .36c1.7.5 3.35 1.37 5.17 2a10 10 0 005.88.17c2-.49 4-1.42 6.21-2.17a11.69 11.69 0 017-.69c2.42.68 4.37 2.47 6.79 3.06a5.45 5.45 0 001.84.13 8.59 8.59 0 001.85-.44c1.22-.42 2.4-1 3.69-1.49a5.89 5.89 0 014.14-.14 14.8 14.8 0 013.5 2.32 8.39 8.39 0 001.74 1.05 4.72 4.72 0 002 .37 10.62 10.62 0 004-1.19 22.85 22.85 0 014.08-1.63 6.65 6.65 0 012.27-.16 6.35 6.35 0 012.18.71 38 38 0 013.66 2.51 8.9 8.9 0 001.86 1 4.78 4.78 0 001 .28l.51.09h.52a11.37 11.37 0 004.08-.85c1.32-.48 2.62-1.05 4-1.45a7.93 7.93 0 014.21-.31 7.78 7.78 0 013.55 2.14 27.42 27.42 0 002.92 2.64 5.47 5.47 0 003.52 1 9.59 9.59 0 003.52-1.07c1.11-.54 2.16-1.17 3.23-1.76 2.1-1.17 4.41-2.24 6.8-2a13.09 13.09 0 016 2.81 34.43 34.43 0 005 3.37 14.66 14.66 0 005.24 1.42 18.64 18.64 0 004.86-.37 17.38 17.38 0 007-3.41 16 16 0 003.26-3.72c.28-.49.47-.89.61-1.14a3.52 3.52 0 01.22-.39 2.44 2.44 0 01-.17.41c-.13.26-.3.67-.57 1.17a15.08 15.08 0 01-3.22 3.82 17.44 17.44 0 01-7.05 3.54 18.29 18.29 0 01-4.94.42 14.8 14.8 0 01-5.38-1.42 33.69 33.69 0 01-5.09-3.37 12.77 12.77 0 00-5.81-2.71c-2.24-.25-4.45.77-6.54 1.94-1.05.59-2.11 1.23-3.25 1.78a10.05 10.05 0 01-3.69 1.13 6 6 0 01-3.82-1.08 26.33 26.33 0 01-3-2.68 7.27 7.27 0 00-3.33-2 7.45 7.45 0 00-3.95.31c-1.32.39-2.61 1-3.95 1.44a11.71 11.71 0 01-4.26.89h-.57l-.55-.1a4.53 4.53 0 01-1.09-.31 9.54 9.54 0 01-2-1.07 39.94 39.94 0 00-3.61-2.48 5.73 5.73 0 00-2-.65 6.42 6.42 0 00-2.09.14 23.81 23.81 0 00-4 1.6 11.25 11.25 0 01-4.18 1.24 5.56 5.56 0 01-2.18-.41 9 9 0 01-1.84-1.12 15.41 15.41 0 00-3.37-2.26 5.44 5.44 0 00-3.81.14c-1.24.43-2.43 1.05-3.69 1.48a8.74 8.74 0 01-2 .46 6.11 6.11 0 01-2-.14c-2.59-.66-4.52-2.45-6.81-3.09a11.29 11.29 0 00-6.78.65 65.5 65.5 0 01-6.26 2.16 10.32 10.32 0 01-6.09-.22c-1.86-.63-3.49-1.51-5.15-2a11.41 11.41 0 00-4.81-.38c-1.52.16-2.93.46-4.23.68s-2.49.4-3.55.62c-.53.1-1 .22-1.52.29a5.64 5.64 0 01-1.36 0c-.83-.09-1.53-.19-2.1-.27l-1.28-.18a2.28 2.28 0 01-.41-.03zM293.73 356.18h.3l.87.09c.76.08 1.88.23 3.32.45 2.89.39 7 1.25 12.21 1.68a42.6 42.6 0 008.47-.15 20.13 20.13 0 014.79 0 8.55 8.55 0 012.43.71 12.18 12.18 0 012.18 1.42c1.36 1 2.65 2.33 4.32 2.83a4.52 4.52 0 002.55 0 17.63 17.63 0 002.54-1 9.9 9.9 0 012.75-.92 4.3 4.3 0 012.92.63c1.73 1.05 2.86 2.8 4.62 3.54s3.77.29 5.58-.24a21.78 21.78 0 015.62-1.31 6.31 6.31 0 012.81.59 10.08 10.08 0 012.31 1.56 19.8 19.8 0 004.12 3.18 6.27 6.27 0 004.74 0c1.54-.48 2.95-1.23 4.49-1.58a6.58 6.58 0 014.47.34 3.61 3.61 0 011.53 1.54 13.84 13.84 0 01.7 1.9 4.25 4.25 0 00.86 1.6 3.51 3.51 0 001.43.93 5.27 5.27 0 003.17 0 5.68 5.68 0 002.37-1.46 9.89 9.89 0 001.45-1.9 21.52 21.52 0 001.4-3c.14-.33.24-.6.32-.81a1.16 1.16 0 01.13-.27 1.33 1.33 0 01-.08.29l-.27.83a18.7 18.7 0 01-1.33 3.09 9.37 9.37 0 01-1.44 2 6 6 0 01-2.46 1.57 5.56 5.56 0 01-3.36.05 3.79 3.79 0 01-1.59-1 4.61 4.61 0 01-1-1.72 14.49 14.49 0 00-.69-1.84 3.29 3.29 0 00-1.37-1.37 6.16 6.16 0 00-4.19-.26c-1.46.33-2.88 1.08-4.45 1.59a9.25 9.25 0 01-2.49.49 5.84 5.84 0 01-2.59-.5 20.2 20.2 0 01-4.24-3.24 10.52 10.52 0 00-2.2-1.49 6 6 0 00-2.59-.53 21.66 21.66 0 00-5.48 1.29 15.27 15.27 0 01-2.9.64 6 6 0 01-3-.41c-1.95-.85-3.09-2.63-4.69-3.58a3.77 3.77 0 00-2.59-.56 9.37 9.37 0 00-2.6.87 17.64 17.64 0 01-2.61 1.07 5 5 0 01-2.83 0c-1.84-.57-3.14-1.9-4.48-2.93a11.31 11.31 0 00-2.08-1.37 8.14 8.14 0 00-2.3-.69 19.79 19.79 0 00-4.68 0 43.05 43.05 0 01-8.54.09c-5.21-.48-9.33-1.4-12.21-1.85l-3.31-.55-.86-.13zM292.33 422.87l.3-.12.87-.3c.77-.27 1.91-.68 3.38-1.16a25.89 25.89 0 015.52-1.29 8.18 8.18 0 013.52.58 16.1 16.1 0 003.75 1.07 8.11 8.11 0 004.1-.92 23.33 23.33 0 014.41-1.77 10.82 10.82 0 015.1.3c1.69.45 3.36 1.12 5.1 1.63a11.1 11.1 0 005.43.46 34.28 34.28 0 005.43-2.11 9.09 9.09 0 013-.71 5.44 5.44 0 013.06.81c1.83 1.08 3.14 2.86 5.06 3.57a5 5 0 002.95.07 18.07 18.07 0 002.86-1.09 21 21 0 012.88-1.14 5.43 5.43 0 013.12-.07 6.14 6.14 0 012.54 1.69c.7.71 1.32 1.45 2 2.05a5.56 5.56 0 005.08 1.07c1.77-.35 3.44-1 5.13-1.49a10.41 10.41 0 012.59-.39 4.79 4.79 0 012.49.61 5 5 0 011.81 1.68c.46.66.82 1.35 1.19 2a5.56 5.56 0 002.91 2.9 4.92 4.92 0 003.7-.38 8.63 8.63 0 002.73-2.08 25.71 25.71 0 002.89-4.8 20 20 0 011.88-3.05 6.88 6.88 0 01.85-.91s-.28.32-.76 1a21.5 21.5 0 00-1.79 3.07 25.21 25.21 0 01-2.85 4.9 8.77 8.77 0 01-2.81 2.19 5.26 5.26 0 01-4 .43 6 6 0 01-3.14-3.05c-.75-1.29-1.45-2.79-2.86-3.51s-3.12-.58-4.75-.15-3.32 1.14-5.15 1.51a7.37 7.37 0 01-2.85.1 6 6 0 01-1.42-.43 6.1 6.1 0 01-1.24-.83c-.75-.64-1.38-1.39-2.06-2.07a5.52 5.52 0 00-2.34-1.56 5 5 0 00-2.83.07 21.35 21.35 0 00-2.81 1.12 16.8 16.8 0 01-2.95 1.12 5.55 5.55 0 01-3.25-.08c-2.12-.81-3.42-2.62-5.14-3.62a4.92 4.92 0 00-2.78-.73 8.54 8.54 0 00-2.84.67 34.06 34.06 0 01-5.51 2.12 11.57 11.57 0 01-5.66-.49c-1.78-.53-3.43-1.2-5.09-1.65a10.5 10.5 0 00-4.89-.32 23.49 23.49 0 00-4.34 1.72 8.56 8.56 0 01-4.3.92 16.27 16.27 0 01-3.82-1.12 7.88 7.88 0 00-3.39-.61 26.72 26.72 0 00-5.48 1.19l-3.4 1.07-.9.25a1 1 0 01-.23.06zM348.51 398.1a3.25 3.25 0 01-.57.37 13.14 13.14 0 01-1.76.8 14.46 14.46 0 01-7.05.73 14.88 14.88 0 01-2.32-.54c-.79-.25-1.58-.61-2.38-.95a5.57 5.57 0 00-2.54-.52 5.38 5.38 0 00-2.52 1.08c-.79.56-1.56 1.23-2.47 1.79a6 6 0 01-1.5.66 3.87 3.87 0 01-.83.12 3 3 0 01-.85 0c-2.28-.29-4.1-1.8-6.09-2.8a5.4 5.4 0 00-3.09-.79l-.38.05a2.53 2.53 0 00-.36.12 2.61 2.61 0 00-.7.32 6.25 6.25 0 00-1.17 1 20.15 20.15 0 01-2.2 2.34 3.23 3.23 0 01-1.49.68 2.73 2.73 0 01-1.6-.23 6 6 0 01-2.12-2.1 20.11 20.11 0 00-1.59-2.18 5.57 5.57 0 00-4.25-1.69 6.28 6.28 0 00-3.59 1.45A8.64 8.64 0 00293 400a4.53 4.53 0 00-.81 2.39 1.93 1.93 0 010-.67 4.43 4.43 0 01.66-1.83 8.56 8.56 0 012.08-2.27 6.65 6.65 0 013.75-1.59 5.92 5.92 0 014.59 1.77 21.52 21.52 0 011.63 2.2 5.57 5.57 0 001.94 1.92 2.4 2.4 0 002.59-.41 22.49 22.49 0 002.13-2.28 6.53 6.53 0 011.27-1.12 3.65 3.65 0 01.8-.37l.42-.14.44-.06a6 6 0 013.38.84c2 1 3.84 2.51 5.91 2.77a4.3 4.3 0 002.86-.69c.86-.52 1.64-1.18 2.46-1.75a4.92 4.92 0 015.5-.57c.81.36 1.57.71 2.33 1a15.4 15.4 0 002.25.56 14.86 14.86 0 006.93-.56c1.58-.58 2.37-1.09 2.4-1.04zM293.31 449.59a1.19 1.19 0 01.3.08l.37.12.52.08a6.26 6.26 0 003.35-.82 25.33 25.33 0 015.15-2.25 5.83 5.83 0 011.73-.09 5.63 5.63 0 011.75.58 26.17 26.17 0 013.22 2.26 5.75 5.75 0 003.84 1.36 13.76 13.76 0 004.29-1.55 10.24 10.24 0 012.38-.79 7.11 7.11 0 012.6.06c1.74.32 3.37 1.06 5.09 1.53a10.68 10.68 0 005.39.08 38.46 38.46 0 005.47-1.81 25.23 25.23 0 015.82-1.68 11 11 0 016.17 1c1.94.84 3.71 1.92 5.58 2.67a8.64 8.64 0 005.71.53c3.73-1.07 6.46-4.09 10-5.26a8.18 8.18 0 015.35 0 18.68 18.68 0 014.47 2.31c1.35.89 2.62 1.79 3.91 2.52a14.33 14.33 0 003.93 1.58 14.8 14.8 0 007.23-.31 15 15 0 004.9-2.51 15.24 15.24 0 003.2-3.47 1.56 1.56 0 01-.15.28l-.49.78a13.28 13.28 0 01-2.44 2.57A15.19 15.19 0 01397 452a13.89 13.89 0 01-11.44-1.2c-1.32-.73-2.59-1.63-3.94-2.5a18.1 18.1 0 00-4.38-2.24 7.67 7.67 0 00-5.05 0 21.68 21.68 0 00-4.82 2.63 19.22 19.22 0 01-5.22 2.68 9.26 9.26 0 01-6-.54c-1.92-.78-3.69-1.86-5.59-2.69a10.53 10.53 0 00-5.9-.93 24.81 24.81 0 00-5.7 1.63 37.93 37.93 0 01-5.55 1.83 11.24 11.24 0 01-5.62-.11c-1.77-.49-3.38-1.23-5-1.54a6.48 6.48 0 00-2.44-.07 9.5 9.5 0 00-2.28.74 14.1 14.1 0 01-4.44 1.56 6.09 6.09 0 01-4.09-1.46 26.66 26.66 0 00-3.15-2.26 5.43 5.43 0 00-1.64-.57 5.21 5.21 0 00-1.63.06 26.21 26.21 0 00-5.1 2.16 6.2 6.2 0 01-3.44.73c-.21 0-.38-.06-.53-.1l-.36-.15a1.42 1.42 0 01-.38-.07zM295.78 277.65s.3.36 1 .9a8.17 8.17 0 003.44 1.5 20.08 20.08 0 006 .12c1.17-.09 2.43-.21 3.78-.19a11.73 11.73 0 014.2.75 39.18 39.18 0 014.14 2.17 14.4 14.4 0 002.23 1 9.59 9.59 0 002.47.4 24.71 24.71 0 005.31-.6 19.61 19.61 0 015.77-.44 14.09 14.09 0 015.61 2.33 15.34 15.34 0 005.6 2.49 8.86 8.86 0 003.11-.21 19.44 19.44 0 003-1.14 38.26 38.26 0 016.2-2.64 8.91 8.91 0 013.45-.2 9.9 9.9 0 013.19 1.19c1.95 1.1 3.61 2.52 5.52 3.4a10.24 10.24 0 006 .74 36.69 36.69 0 005.79-1.5 32.45 32.45 0 015.61-1.35 15.38 15.38 0 015.44.34 68.34 68.34 0 019.12 3.37 15.34 15.34 0 007.74 1.23 18.37 18.37 0 005.8-1.46 11.26 11.26 0 004.1-3 6.32 6.32 0 01-.86 1 10.74 10.74 0 01-3.16 2.16 18.67 18.67 0 01-5.85 1.56 17.33 17.33 0 01-3.8 0 15.56 15.56 0 01-4.1-1.14 68 68 0 00-9.09-3.29 14.81 14.81 0 00-5.29-.31 33.91 33.91 0 00-5.52 1.36 38.27 38.27 0 01-5.85 1.54 10.88 10.88 0 01-6.29-.77c-2-.92-3.66-2.36-5.56-3.42a9.39 9.39 0 00-3-1.13 8.26 8.26 0 00-3.24.2 37.3 37.3 0 00-6.11 2.61 20.14 20.14 0 01-3.12 1.16 9.18 9.18 0 01-3.3.21 15.59 15.59 0 01-5.79-2.57 13.66 13.66 0 00-5.41-2.27c-3.85-.42-7.47 1.17-11 1a9.7 9.7 0 01-2.58-.45 14 14 0 01-2.29-1 39.92 39.92 0 00-4.08-2.18c-2.74-1.09-5.51-.75-7.83-.61a19.84 19.84 0 01-6.05-.21 8 8 0 01-3.46-1.62 4.71 4.71 0 01-.99-1.03z"
          fill="#fafafa"
        />
        <Path
          d="M370.79 289.15l14.12 9.77c-4.49 11.13-.34 26.58 3.56 39.22 1.51 4.92 6.52 10 6.27 15.18s4.07 13.88-.91 15.18c-3.3.87-6.89-.26-9.64-2.28a26.93 26.93 0 01-6.56-7.78c-9.92-16.04-14.55-46.72-6.84-69.29z"
          opacity={0.3}
        />
        <Path
          d="M296.46 441.08a1.82 1.82 0 01.54.06l1.52.28 5.58 1.06c4.71.89 11.24 2 18.48 3s13.83 1.7 18.6 2.14l5.66.5 1.54.15a1.9 1.9 0 01.53.09 2.27 2.27 0 01-.54 0l-1.54-.05c-1.35-.06-3.28-.17-5.68-.34-4.78-.35-11.39-1-18.64-2s-13.78-2.21-18.48-3.19c-2.35-.48-4.25-.91-5.55-1.22l-1.5-.38a2.32 2.32 0 01-.52-.1zM318.44 438.47a8.15 8.15 0 01.83.18c.54.12 1.32.38 2.36.57a48.41 48.41 0 008.83 1.14 49.64 49.64 0 0013.11-1.21 47.4 47.4 0 0026.89-16.79 50.31 50.31 0 009.71-19.68c.27-1 .38-1.83.52-2.37a4.2 4.2 0 01.2-.82 5.27 5.27 0 01-.1.84c-.1.55-.18 1.37-.43 2.4a46 46 0 01-2.71 8.53 49.35 49.35 0 01-6.81 11.4 48.43 48.43 0 01-40.4 18.07 45.36 45.36 0 01-8.86-1.31c-1-.23-1.81-.52-2.34-.67a3.94 3.94 0 01-.8-.28zM327.3 262.69a3.2 3.2 0 010 .73v2.06a29.79 29.79 0 00.76 7.49 13.59 13.59 0 002.16 4.66 13.36 13.36 0 004.47 3.79 22.44 22.44 0 006.18 2.21 28.9 28.9 0 007 .68 25.82 25.82 0 0013-3.67 20.52 20.52 0 007.46-8.09 18.22 18.22 0 001.94-7.22c.07-1.78-.12-2.76-.05-2.77a5.15 5.15 0 01.13.71 14.48 14.48 0 01.13 2.07 17.67 17.67 0 01-1.82 7.37 20.64 20.64 0 01-7.54 8.34 26 26 0 01-13.23 3.78 29.39 29.39 0 01-7.14-.7 22.82 22.82 0 01-6.3-2.29 13.59 13.59 0 01-4.59-4 13.82 13.82 0 01-2.17-4.82 28.46 28.46 0 01-.61-7.58c0-.9.08-1.6.12-2.07a3.2 3.2 0 01.1-.68z"
          fill="#263238"
        />
        <Path
          d="M321.19 264.43s-24.33.93-30.11 25.22c-6.69 28.15-2.65 59.17 5.76 74.71l.39-27.68a127.17 127.17 0 0113.53-55.27z"
          fill="#455a64"
        />
        <Path
          d="M292.59 344.3a4.67 4.67 0 01-.06-.85c0-.6 0-1.41-.08-2.43s-.06-2.35 0-3.85 0-3.22.17-5.1q.09-1.43.18-3c.07-1 .2-2.09.3-3.2.19-2.22.55-4.57.89-7a149.74 149.74 0 013.46-15.9 147.18 147.18 0 015.36-15.36c1-2.3 1.92-4.49 2.93-6.48.49-1 .93-2 1.41-2.89s.95-1.79 1.4-2.62c.86-1.68 1.77-3.14 2.52-4.44s1.44-2.39 2-3.28l1.34-2a4.53 4.53 0 01.5-.69 6.44 6.44 0 01-.41.75l-1.24 2.04c-.56.9-1.23 2-1.95 3.32s-1.61 2.77-2.45 4.46l-1.36 2.63c-.47.92-.9 1.9-1.38 2.9-1 2-1.89 4.18-2.87 6.47a139.62 139.62 0 00-8.79 31.16c-.36 2.46-.74 4.8-.94 7-.11 1.11-.25 2.17-.33 3.2s-.15 2-.21 2.95c-.17 1.88-.19 3.59-.25 5.08s-.08 2.79-.08 3.85v2.43a5 5 0 01-.06.85zM303.72 270.59a3 3 0 01-.29.65c-.24.46-.54 1.07-.93 1.82-.83 1.56-1.95 3.87-3.26 6.75-.63 1.46-1.36 3-2 4.77-.33.87-.71 1.76-1 2.69s-.66 1.9-1 2.89a113.08 113.08 0 00-3.52 13.13 125.78 125.78 0 00-2.25 24.59c0 3.17.08 5.73.17 7.5 0 .85.06 1.53.07 2.05a2.78 2.78 0 010 .71 4.42 4.42 0 01-.09-.71c0-.51-.1-1.19-.17-2-.15-1.77-.27-4.34-.34-7.51a118.12 118.12 0 012.11-24.7 107.68 107.68 0 013.51-13.22c.35-1 .69-1.95 1-2.89s.73-1.82 1.07-2.69c.67-1.74 1.43-3.31 2.08-4.76 1.35-2.87 2.53-5.16 3.42-6.7l1-1.77a3.82 3.82 0 01.42-.6z"
          fill="#263238"
        />
        <Path
          d="M399.8 273.8s-16.35 44.48-4.3 82l.66 13.27s-9.22-.63-16.19-13.79-9.23-26.76-11.59-46.35 8.37-44.53 8.37-44.53 19.04 4.2 23.05 9.4z"
          fill="#455a64"
        />
        <Path
          d="M396.59 368a1.06 1.06 0 01-.24-.12l-.68-.38a13.71 13.71 0 01-2.34-1.86 21.93 21.93 0 01-5.18-9.61 55.73 55.73 0 01-1.6-7.41c-.47-2.69-.85-5.57-1.19-8.62a153.47 153.47 0 01-.86-19.9 151.12 151.12 0 011.73-19.85 120.47 120.47 0 013.4-15.91 47.81 47.81 0 014.19-10.14 29.06 29.06 0 011.59-2.53l.45-.62.17-.21s0 .09-.12.24l-.42.65c-.36.58-.88 1.43-1.5 2.57a51.22 51.22 0 00-4 10.14 126.9 126.9 0 00-3.28 15.88 157.85 157.85 0 00-1.71 19.81 160.36 160.36 0 00.81 19.84c.33 3 .7 5.92 1.14 8.6a60.87 60.87 0 001.55 7.43 22.27 22.27 0 005 9.57 18.37 18.37 0 003.09 2.43z"
          fill="#263238"
        />
        <Path
          d="M396 367.56a.84.84 0 01-.27-.09l-.78-.32a17.58 17.58 0 01-2.74-1.67 29.39 29.39 0 01-7.45-9.11 96.08 96.08 0 01-7.15-16 100.49 100.49 0 01-4.73-20.88 103.66 103.66 0 01-.26-21.42 99 99 0 013.16-17.21c.71-2.39 1.31-4.57 2-6.41s1.23-3.47 1.83-4.73 1-2.23 1.3-2.93c.15-.31.26-.56.35-.76a1.57 1.57 0 01.14-.25.93.93 0 01-.09.27l-.3.78c-.29.71-.7 1.7-1.21 3s-1.09 2.9-1.75 4.76-1.27 4-1.95 6.41a100.38 100.38 0 00-3 17.15 104.23 104.23 0 00.3 21.32 102.75 102.75 0 004.6 20.78 99.84 99.84 0 007 15.94 30.21 30.21 0 007.25 9.13 19.73 19.73 0 002.67 1.74l.75.36zM388.23 290.64l10.6 2.79-1.54 3.71-9.97-1.99.91-4.51z"
          fill="#263238"
        />
        <Path
          d="M388.47 294.19a8.58 8.58 0 011.49-1.78l.18-.19.14.22c.41.64.84 1.31 1.28 2l-.34-.09 1.18-.67c.41-.23.81-.46 1.21-.67l.22-.13.12.22 1.15 2.11-.27-.07a8.88 8.88 0 012.08-.92 8.58 8.58 0 01-1.89 1.27l-.17.1-.1-.18c-.4-.65-.81-1.34-1.24-2.06l.35.1-1.21.68-1.18.66-.22.12-.12-.21-1.2-2.06h.32a9.73 9.73 0 01-1.78 1.55z"
          fill={COLORS.spinnerColor1}
        />
        <Path
          fill="#455a64"
          d="M301.39 354.19l-11.53-21.29h-35.11l-1.11 2.11 29.72 49.41 33.64 1.62-15.61-31.85z"
        />
        <Path
          d="M435.24 365.93v37.21a22.64 22.64 0 01-8.32 17.52 22.62 22.62 0 01-22.83 3.42l-81.92-36.31 8-27.32 65.9 21.72-.07-16.94z"
          fill="#ffbe9d"
        />
        <Path
          fill="#263238"
          d="M300.28 356.3l-11.54-21.29h-35.1l28.6 51.52 33.64 1.62-15.6-31.85z"
        />
        <Path
          d="M333.42 363.38l-5.55-6.89a19.26 19.26 0 00-15-7.18H308l-3.29 3.69s-23.74 1-24.61 4v1.5l20.31 1.36s-17.27-.05-18.31 0-4.82-.29-4.74 1.73c.06 1.67 2 3 5 3.42 1.22.18 16.19 1.48 16.19 1.48l-16.47-.16c-1.85 0-1.62 3-.52 3.33.87.29 22 6.45 22 6.45s-3.55 2.37-6.44 2.17-7.86-3.93-8.89-2.17-.83 2.79-.21 3.2 7.44 3.93 9.72 4.55 20.85 3.56 20.85 3.56l6.7 1.08zM258.55 343.32s-3.67 1.28-1.81 6a40.37 40.37 0 007.45 11.8 4.31 4.31 0 001.47 4.22s-2.6.65-1 5a4.94 4.94 0 003.09 6.5s-1.3 3.74 3.41 5.52 9.26-1.3 9.26-1.3z"
          fill="#ffbe9d"
        />
        <Path
          d="M266 360.75c3.34.9 7 1.62 10.09 2.79 1 .38 2 .4 2.7 1.25a2.33 2.33 0 01.06 3 3.25 3.25 0 01-2.72.55 48 48 0 01-10.34-2.87"
          fill="#ffbe9d"
        />
        <Path
          d="M267.33 366.32c3.33.9 7 1.61 10.08 2.79 1 .38 2 .4 2.7 1.25a2.33 2.33 0 01.06 3 3.29 3.29 0 01-2.72.55 48.57 48.57 0 01-10.34-2.91"
          fill="#ffbe9d"
        />
        <Path
          d="M269.22 372.05c3.34.9 7 1.61 10.09 2.78 1 .39 2 .41 2.69 1.26a2.32 2.32 0 01.06 3 3.22 3.22 0 01-2.71.54 48 48 0 01-10.35-2.88"
          fill="#ffbe9d"
        />
        <Path
          d="M266 365.57c0-.14 2.41.68 5.37 1.5s5.39 1.35 5.37 1.49a19.75 19.75 0 01-5.51-1 20.59 20.59 0 01-5.23-1.99zM265.36 370.48a61.43 61.43 0 016.1 1.74c3.36 1 6.11 1.69 6.08 1.83a43.67 43.67 0 01-12.18-3.57zM267.55 376.8a33 33 0 015.73 1.16 34.11 34.11 0 015.61 1.67 32.85 32.85 0 01-5.73-1.16 32.28 32.28 0 01-5.61-1.67zM263.22 360.07c0-.15 3 .85 6.73 1.81s6.78 1.52 6.76 1.68a8.19 8.19 0 01-2-.17 48.32 48.32 0 01-4.84-1 46 46 0 01-4.73-1.47 7.68 7.68 0 01-1.92-.85zM296.63 353.32A67.35 67.35 0 01305 353a67.19 67.19 0 018.33.21 66.08 66.08 0 01-8.33.31 65.93 65.93 0 01-8.37-.2z"
          fill="#eb996e"
        />
        <Path d="M271.46 344a1.76 1.76 0 10-.27-2.48 1.76 1.76 0 00.27 2.48z" fill="#ebebeb" />
        <Path
          d="M391.8 381.21a2.08 2.08 0 01.81.09 15.85 15.85 0 012.15.54 24.67 24.67 0 0111.87 8.24 16.8 16.8 0 011.26 1.82c.27.45.4.7.37.72s-.71-.91-1.92-2.31a28.24 28.24 0 00-11.7-8.12c-1.74-.64-2.86-.9-2.84-.98z"
          fill="#eb996e"
        />
        <Path
          d="M347.11 282.64a20.05 20.05 0 01-18.43-21c.37-7.6.77-14.45.77-14.45s-16.3-2.54-16.5-18.82 2.63-53.7 2.63-53.7a56.61 56.61 0 0156.88 7.16l2.41 1.85-6.17 80.49a20.06 20.06 0 01-21.59 18.47z"
          fill="#ffbe9d"
        />
        <Path d="M329.42 247a37.86 37.86 0 0021.23-6s-5 11.72-21.27 10.25z" fill="#eb996e" />
        <Path
          d="M319.6 200.21a2.32 2.32 0 002.24 2.35 2.23 2.23 0 002.4-2.1 2.34 2.34 0 00-2.24-2.35 2.23 2.23 0 00-2.4 2.1zM318.66 197.6c.29.3 2-1 4.55-1s4.34 1.26 4.61 1c.13-.14-.16-.69-1-1.27a6.44 6.44 0 00-3.69-1.14 6.16 6.16 0 00-3.62 1.17c-.73.55-.99 1.1-.85 1.24zM343.2 200.8a2.33 2.33 0 002.24 2.35 2.22 2.22 0 002.4-2.1 2.33 2.33 0 00-2.24-2.35 2.22 2.22 0 00-2.4 2.1zM343.26 198.07c.29.3 2.06-1 4.56-1s4.33 1.26 4.61 1c.13-.13-.16-.68-1-1.26a6.36 6.36 0 00-3.69-1.14 6.15 6.15 0 00-3.63 1.17c-.73.54-.99 1.09-.85 1.23zM334.18 216.63c0-.14-1.55-.41-4.07-.73-.64-.07-1.24-.2-1.35-.63a3.26 3.26 0 01.43-1.9l1.89-4.87c2.62-6.93 4.52-12.62 4.24-12.73s-2.63 5.43-5.26 12.36q-.94 2.56-1.81 4.9a3.75 3.75 0 00-.33 2.51 1.58 1.58 0 001.05.93 4.17 4.17 0 001.09.15c2.54.14 4.11.15 4.12.01zM341.55 218.36c-.41 0-.42 2.69-2.74 4.62s-5.22 1.63-5.24 2c0 .17.64.53 1.87.56a6.75 6.75 0 004.37-1.52 5.86 5.86 0 002.12-3.88c.07-1.14-.2-1.8-.38-1.78zM342.62 188.26c.24.68 2.74.35 5.68.71s5.31 1.15 5.7.54c.17-.29-.24-.93-1.2-1.59a9.48 9.48 0 00-4.22-1.48 9.65 9.65 0 00-4.45.52c-1.08.44-1.62.97-1.51 1.3zM319.58 190.35c.44.57 2.16 0 4.24 0s3.83.39 4.23-.21c.18-.29-.1-.86-.87-1.39a6.09 6.09 0 00-6.82.21c-.73.53-.98 1.12-.78 1.39z"
          fill="#263238"
        />
        <Path
          d="M372.87 200.56c.27-.12 11.19-3.31 10.83 7.83s-11.46 8.48-11.47 8.16.64-15.99.64-15.99z"
          fill="#ffbe9d"
        />
        <Path
          d="M375.77 212.44c.05 0 .19.14.51.3a1.91 1.91 0 001.45.08c1.19-.39 2.24-2.23 2.36-4.23a6.33 6.33 0 00-.46-2.8 2.24 2.24 0 00-1.41-1.54 1 1 0 00-1.16.5c-.16.31-.1.53-.16.55s-.23-.2-.13-.65a1.32 1.32 0 01.47-.69 1.49 1.49 0 011.08-.25 2.76 2.76 0 012 1.8 6.57 6.57 0 01.57 3.12c-.14 2.24-1.36 4.31-3 4.72a2.1 2.1 0 01-1.77-.35c-.34-.29-.39-.54-.35-.56z"
          fill="#eb996e"
        />
        <Path
          d="M309.34 160.61a17.23 17.23 0 0126.75-5.14 16.86 16.86 0 0127.71-3.6c3.12 3.54 4.74 8.35 8.4 11.33 3.16 2.57 7.46 3.43 10.64 6a12.3 12.3 0 01-4.39 21.44c3.5 6.3.22 15.33-6.5 17.93l-1.62-.67a23.18 23.18 0 01-3.33-25.59 5.83 5.83 0 01-.59 0 13 13 0 01-16.94-3.87 14.46 14.46 0 01-15.52.65 6 6 0 00-2.34-1.06 5.58 5.58 0 00-2.92.87 13.7 13.7 0 01-7.88 1.59 7.59 7.59 0 01-5.92-4.23 1.25 1.25 0 01-.19 0 8.75 8.75 0 01-6.52-6.31 13.07 13.07 0 011.16-9.34z"
          fill="#263238"
        />
      </G>
    </Svg>
  );
}

export default LocationPermission;

================
File: components/LocationPermission/index.ts
================
import LocationPermission from './LocationPermission';

export default LocationPermission;

================
File: components/LocationPickerBottomSheet/LocationPickerBottomSheet.tsx
================
import { Ionicons } from '@expo/vector-icons';
import { BottomSheetBackdrop, BottomSheetModal, BottomSheetTextInput } from '@gorhom/bottom-sheet';
import type { BottomSheetDefaultBackdropProps } from '@gorhom/bottom-sheet/lib/typescript/components/bottomSheetBackdrop/types';
import Constants from 'expo-constants';
import React, { useCallback, useImperativeHandle, useRef } from 'react';
import { View } from 'react-native';
import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';

import styles from './styles';
import { LocationPickerBottomSheetI, LocationPickerBottomSheetProps } from './types';
import { TextDefault } from '../Text';

import { COLORS } from '@/constants';

const defaultSnapPoints = ['75%'];
const API_KEY =
  Constants.expoConfig?.extra?.googlePlaceAPIkey || process.env.EXPO_PUBLIC_PLACES_API_KEY;

const LocationPickerBottomSheet = React.forwardRef<
  LocationPickerBottomSheetI,
  LocationPickerBottomSheetProps
>((props, ref) => {
  const bottomSheetModalRef = useRef<BottomSheetModal>(null);

  const onOpen = useCallback(() => {
    bottomSheetModalRef.current?.present?.();
  }, [bottomSheetModalRef]);

  const onClose = useCallback(() => {
    bottomSheetModalRef.current?.close?.();
  }, [bottomSheetModalRef]);

  useImperativeHandle(ref, () => ({ onOpen, onClose }), [onClose, onOpen]);

  const renderBackdrop = useCallback(
    (backdropProps: BottomSheetDefaultBackdropProps) => (
      <BottomSheetBackdrop
        {...backdropProps}
        appearsOnIndex={0}
        disappearsOnIndex={-1}
        pressBehavior="close"
      />
    ),
    []
  );

  return (
    <>
      <BottomSheetModal
        ref={bottomSheetModalRef}
        index={0}
        snapPoints={defaultSnapPoints}
        backdropComponent={renderBackdrop}
        {...props}>
        <View style={styles.containerStyle}>
          <TextDefault H3 style={styles.textStyle}>
            Select a location
          </TextDefault>
          <GooglePlacesAutocomplete
            placeholder="Search for area, street or locality..."
            fetchDetails
            onPress={(data, details = null) => {
              // 'details' is provided when fetchDetails = true
              console.log(data, details);
            }}
            query={{
              key: API_KEY,
              language: 'en',
              components: 'country:ind',
            }}
            renderLeftButton={() => (
              <Ionicons
                name="search"
                size={24}
                color={COLORS.buttonbackground}
                style={styles.leftIconStyle}
              />
            )}
            textInputProps={{
              InputComp: BottomSheetTextInput,
              leftIcon: { type: 'font-awesome', name: 'chevron-left' },
              errorStyle: { color: 'red' },
            }}
            onFail={(e) => console.log('onFail', e)}
            onNotFound={() => console.log('onNotFound')}
            onTimeout={() => console.log('onTimeout')}
            styles={{
              textInputContainer: styles.inputTextContainer,
              poweredContainer: {
                justifyContent: 'center',
              },
            }}
          />
        </View>
      </BottomSheetModal>
    </>
  );
});

export default LocationPickerBottomSheet;

================
File: components/LocationPickerBottomSheet/index.ts
================
import LocationPickerBottomSheet from './LocationPickerBottomSheet';

export default LocationPickerBottomSheet;

================
File: components/LocationPickerBottomSheet/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  containerStyle: {
    flex: 1,
    padding: scale(10),
    gap: scale(10),
  },
  textStyle: {
    fontWeight: 'bold',
  },
  leftIconStyle: {
    // alignSelf: 'center',
  },
  inputTextContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: COLORS.buttonbackground,
    borderRadius: scale(8),
    paddingHorizontal: scale(4),
  },
});

export default styles;

================
File: components/LocationPickerBottomSheet/types.ts
================
import type { BottomSheetModalProps } from '@gorhom/bottom-sheet';

export type ClosableType = {
  onClose: () => void;
  onOpen: () => void;
};

export type LocationPickerBottomSheetProps = Partial<Omit<BottomSheetModalProps, 'children'>>;

export interface LocationPickerBottomSheetI extends ClosableType {}

================
File: components/Modal/AddFilter/AddFilter.tsx
================
import React from 'react';
import { FlatList, Modal, SafeAreaView, TouchableOpacity, View } from 'react-native';

import { AddFilterProps } from './AddFilter.types';
import styles from './styles';
import { ModalHeader } from '../../Header';
import { TextDefault } from '../../Text';

const OPTIONS = [
  {
    value: 'ALL',
    title: 'View all',
  },
  {
    value: 'ACTIVE',
    title: 'Active Ads',
  },
  {
    value: 'INACTIVE',
    title: 'Inactive Ads',
  },
  {
    value: 'PENDING',
    title: 'Pending Ads',
  },
];

function AddFilter({ visible, onModalToggle, setFilter }: AddFilterProps) {
  return (
    <Modal animationType="slide" transparent visible={visible}>
      <SafeAreaView style={[styles.safeAreaViewStyles, styles.flex]}>
        <View style={[styles.flex, styles.mainContainer]}>
          <ModalHeader closeModal={onModalToggle} title="Filters" />
          <FlatList
            data={OPTIONS}
            contentContainerStyle={{ flexGrow: 1 }}
            style={styles.body}
            ItemSeparatorComponent={() => <View style={styles.seperator} />}
            keyExtractor={(item, index) => index.toString()}
            renderItem={({ item, index }) => (
              <TouchableOpacity
                style={styles.stateBtn}
                onPress={() => {
                  onModalToggle();
                  setFilter(item);
                }}>
                <TextDefault style={[styles.flex, styles.font]} H5>
                  {item.title}
                </TextDefault>
              </TouchableOpacity>
            )}
          />
        </View>
      </SafeAreaView>
    </Modal>
  );
}
export default React.memo(AddFilter);

================
File: components/Modal/AddFilter/AddFilter.types.ts
================
export type AddFilterProps = {
  visible: boolean;
  onModalToggle: () => void;
  setFilter: (v: { value: string; title: string }) => void;
};

================
File: components/Modal/AddFilter/index.ts
================
import AddFilter from './AddFilter';

export { AddFilter };

================
File: components/Modal/AddFilter/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaViewStyles: {
    backgroundColor: COLORS.headerbackground,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  body: {
    ...alignment.PTsmall,
  },
  stateBtn: {
    justifyContent: 'center',
    ...alignment.Psmall,
  },
  seperator: {
    height: StyleSheet.hairlineWidth,
    backgroundColor: COLORS.horizontalLine,
  },
  font: {
    ...alignment.PLsmall,
  },
});

export default styles;

================
File: components/Modal/DeactivateModal/DeactivateModal.tsx
================
import React from 'react';
import { Modal, View, TouchableOpacity } from 'react-native';

import { DeactivateModalProps } from './DeactivateModal.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { alignment } from '@/utils';

function DeactivateModal(props: DeactivateModalProps) {
  return (
    <Modal animationType="slide" transparent visible={props.modalVisible}>
      <View style={styles.centeredView}>
        <View style={styles.modalView}>
          <TextDefault bolder H4 style={{ width: '100%' }}>
            Deactivate account
          </TextDefault>
          <TextDefault style={alignment.MTmedium}>
            Are you sure you want to deactive your account? this action cannot be undone
          </TextDefault>
          <View style={styles.buttonsRow}>
            <TouchableOpacity style={styles.button} onPress={props.onModalToggle}>
              <View style={styles.buttonText}>
                <TextDefault bold H5>
                  Cancel
                </TextDefault>
              </View>
            </TouchableOpacity>
            <TouchableOpacity style={styles.button} onPress={props.onModalToggle}>
              <View style={styles.buttonText}>
                <TextDefault bold H5>
                  Deactivate
                </TextDefault>
              </View>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

export default React.memo(DeactivateModal);

================
File: components/Modal/DeactivateModal/DeactivateModal.types.ts
================
export type DeactivateModalProps = {
  modalVisible: boolean;
  onModalToggle: () => void;
};

================
File: components/Modal/DeactivateModal/index.ts
================
import DeactivateModal from './DeactivateModal';

export { DeactivateModal };

================
File: components/Modal/DeactivateModal/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22,
  },
  modalView: {
    margin: scale(20),
    width: '85%',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(5),
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    ...alignment.Plarge,
  },
  buttonsRow: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignSelf: 'flex-end',
    ...alignment.PTsmall,
  },
  button: {
    ...alignment.PTmedium,
    ...alignment.PLlarge,
    ...alignment.MLsmall,
  },
  buttonText: {
    borderBottomColor: COLORS.buttonbackground,
    borderBottomWidth: 2,
    ...alignment.PBxSmall,
  },
});
export default styles;

================
File: components/Modal/LoadingModal/LoadingModal.tsx
================
import React from 'react';
import { ActivityIndicator, Modal, Text, View } from 'react-native';

import { LoadingModalProps } from './LocationModal.types';
import styles from './styles';

function LoadingModal({
  modalVisible = false,
  color,
  title,
  darkMode = false,
  modalStyle,
  textStyle,
}: LoadingModalProps) {
  return (
    <Modal animationType="fade" transparent visible={modalVisible} statusBarTranslucent>
      <View style={styles.centeredView}>
        <View style={[styles.modalView, darkMode && { backgroundColor: '#121212' }, modalStyle]}>
          <ActivityIndicator size="large" color={color} />
          <Text style={[styles.modalText, darkMode && { color: 'white' }, textStyle]}>
            {title ? title + ' ' : ''}
          </Text>
        </View>
      </View>
    </Modal>
  );
}
export default React.memo(LoadingModal);

================
File: components/Modal/LoadingModal/LocationModal.types.ts
================
import { StyleProp, ViewStyle } from 'react-native';

export type LoadingModalProps = {
  modalVisible?: boolean;
  color?: string;
  title?: string;
  fontFamily?: string;
  darkMode?: boolean;
  modalStyle?: StyleProp<ViewStyle>;
  textStyle?: object;
};

================
File: components/Modal/LoadingModal/index.ts
================
import LoadingModal from './LoadingModal';

export { LoadingModal };

================
File: components/Modal/LoadingModal/styles.ts
================
import { StyleSheet } from 'react-native';

const styles = StyleSheet.create({
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0008',
  },
  modalView: {
    margin: 20,
    width: 200,
    height: 70,
    backgroundColor: 'white',
    borderRadius: 5,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },

  modalText: {
    marginVertical: 15,
    textAlign: 'center',
    fontSize: 17,
    marginLeft: 15,
  },
});

export default styles;

================
File: components/Modal/LocationModal/LocationModal.tsx
================
import { Entypo, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import React from 'react';
import {
  FlatList,
  KeyboardAvoidingView,
  Modal,
  Platform,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { LocationModalProps } from './LocationModal.types';
import styles from './styles';
import { ModalHeader } from '../../Header';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function LocationModal({
  loading,
  data,
  setFilters,
  onModalToggle,
  visible,
  onPressStorageLocation,
  error,
}: LocationModalProps) {
  function btnLocation(zone: { id: string; title: string }) {
    setFilters({ zone: zone.id, title: zone.title, latitude: null, longitude: null });
    onModalToggle();
  }

  return (
    <Modal animationType="slide" transparent visible={visible}>
      <SafeAreaView edges={['top', 'bottom']} style={[styles.safeAreaViewStyles, styles.flex]}>
        <KeyboardAvoidingView
          style={[styles.flex]}
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
          <View style={[styles.flex, styles.mainContainer]}>
            <ModalHeader closeModal={onModalToggle} title="Location" />
            <View style={styles.body}>
              <View style={styles.headerContents}>
                <View style={styles.closeBtn}>
                  <TouchableOpacity onPress={onModalToggle} style={styles.backBtn}>
                    <Ionicons name="search" size={scale(17)} color={COLORS.headerText} />
                  </TouchableOpacity>
                  <TextInput
                    style={styles.inputAddress}
                    placeholderTextColor={COLORS.fontSecondColor}
                    placeholder="Search city, area or neighbour"
                  />
                </View>
                <TouchableOpacity style={styles.currentLocation} onPress={onPressStorageLocation}>
                  <MaterialCommunityIcons
                    name="target"
                    size={scale(25)}
                    color={COLORS.spinnerColor}
                  />
                  <View style={alignment.PLsmall}>
                    <TextDefault textColor={COLORS.spinnerColor} H5 bold>
                      Use current location
                    </TextDefault>
                    {loading && (
                      <TextDefault
                        numberOfLines={1}
                        textColor={COLORS.fontMainColor}
                        light
                        small
                        style={{ ...alignment.MTxSmall, width: '85%' }}>
                        Fetching location...
                      </TextDefault>
                    )}
                  </View>
                </TouchableOpacity>
              </View>
              <TextDefault textColor={COLORS.fontSecondColor} uppercase style={styles.title}>
                Choose State
              </TextDefault>
            </View>

            {error ? (
              <TextDefault>{error.message}</TextDefault>
            ) : (
              <FlatList
                contentContainerStyle={alignment.PBlarge}
                showsVerticalScrollIndicator={false}
                data={data.zones || []}
                keyExtractor={(item) => item.id}
                renderItem={({ item, index }) => (
                  <TouchableOpacity style={styles.stateBtn} onPress={() => btnLocation(item)}>
                    <TextDefault style={styles.flex}>{item.title}</TextDefault>
                    <Entypo
                      name="chevron-small-right"
                      size={scale(20)}
                      color={COLORS.fontMainColor}
                    />
                  </TouchableOpacity>
                )}
              />
            )}
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );
}
export default React.memo(LocationModal);

================
File: components/Modal/LocationModal/LocationModal.types.ts
================
export type LocationModalProps = {
  loading: boolean;
  data: { zones: { id: string; title: string }[] };
  setFilters: (s: any) => void;
  onModalToggle: () => void;
  visible: boolean;
  onPressStorageLocation: () => void;
  error?: { message: string };
};

================
File: components/Modal/LocationModal/index.ts
================
import LocationModal from './LocationModal';

export { LocationModal };

================
File: components/Modal/LocationModal/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaViewStyles: {
    backgroundColor: COLORS.headerbackground,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  body: {
    ...alignment.PTsmall,
  },
  headerContents: {
    width: '95%',
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'center',
  },
  closeBtn: {
    width: '100%',
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    height: scale(35),
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: COLORS.containerBox,
    overflow: 'hidden',
  },
  backBtn: {
    height: '100%',
    width: '10%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  inputAddress: {
    width: '90%',
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  currentLocation: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.MTlarge,
  },
  title: {
    backgroundColor: COLORS.headerbackground,
    ...alignment.MTmedium,
    ...alignment.PLmedium,
    ...alignment.PTxSmall,
    ...alignment.PBxSmall,
  },
  stateBtn: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Psmall,
  },
});

export default styles;

================
File: components/Modal/SearchModal/SearchModal.tsx
================
import { Ionicons, SimpleLineIcons } from '@expo/vector-icons';
import React, { useState } from 'react';
import { Modal, SafeAreaView, TextInput, TouchableOpacity, View } from 'react-native';

import { SearchModalProps } from './SearchModal.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

function SearchModal({ setSearch, onModalToggle, visible, categories }: SearchModalProps) {
  const [text, setText] = useState('');

  function handleNavigate(item?: string) {
    if (item) {
      setSearch(item);
    } else {
      setSearch(text);
    }
    onModalToggle();
  }

  function header() {
    return (
      <View style={styles.headerContainer}>
        <View style={styles.headerContents}>
          <View style={styles.closeBtn}>
            <TouchableOpacity onPress={onModalToggle} style={styles.backBtn}>
              <Ionicons name="arrow-back" size={scale(23)} color={COLORS.headerText} />
            </TouchableOpacity>
            <TextInput
              style={styles.inputText}
              placeholderTextColor={COLORS.fontSecondColor}
              placeholder="Find Cars, Mobile, Phone and more..."
              value={text}
              onChange={(e) => {
                setText(e.nativeEvent.text);
              }}
            />
            <TouchableOpacity onPress={() => handleNavigate()} style={styles.searchBtn}>
              <Ionicons name="search" size={scale(20)} color={COLORS.white} />
            </TouchableOpacity>
          </View>
        </View>
        <View style={styles.headerContents}>
          <View style={styles.closeBtn}>
            <TouchableOpacity onPress={() => handleNavigate()} style={styles.backBtn}>
              <SimpleLineIcons name="location-pin" size={scale(17)} color={COLORS.headerText} />
            </TouchableOpacity>
            <TextInput
              style={styles.inputAddress}
              placeholderTextColor={COLORS.fontSecondColor}
              placeholder="Search city, area or neighbour"
            />
          </View>
        </View>
      </View>
    );
  }

  return (
    <Modal animationType="slide" transparent visible={visible}>
      <SafeAreaView style={[styles.safeAreaViewStyles, styles.flex]}>
        <View style={[styles.flex, styles.mainContainer]}>
          {header()}
          <View style={styles.body}>
            <TextDefault textColor={COLORS.fontSecondColor} light uppercase>
              Popular categories
            </TextDefault>
            {categories.map((item, index) => (
              <TouchableOpacity
                onPress={() => handleNavigate(item.title)}
                style={styles.category}
                key={index}>
                <Ionicons name="search" size={scale(20)} color={COLORS.buttonbackground} />
                <TextDefault textColor={COLORS.fontSecondColor} H5 style={styles.fontText}>
                  {item.title}
                </TextDefault>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </SafeAreaView>
    </Modal>
  );
}
export default React.memo(SearchModal);

================
File: components/Modal/SearchModal/SearchModal.types.ts
================
export type SearchModalProps = {
  setSearch: (s: string) => void;
  onModalToggle: () => void;
  visible: boolean;
  categories: {
    title: string;
  }[];
};

================
File: components/Modal/SearchModal/index.ts
================
import SearchModal from './SearchModal';

export { SearchModal };

================
File: components/Modal/SearchModal/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaViewStyles: {
    backgroundColor: COLORS.headerbackground,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  headerContainer: {
    width: '100%',
    height: scale(50),
    backgroundColor: COLORS.headerbackground,
    justifyContent: 'space-evenly',
    alignItems: 'center',
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: COLORS.horizontalLine,
  },
  headerContents: {
    width: '95%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  closeBtn: {
    width: '100%',
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    height: scale(30),
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: COLORS.headerbackground,
    overflow: 'hidden',
  },
  backBtn: {
    height: '100%',
    width: '10%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  searchBtn: {
    backgroundColor: COLORS.buttonbackground,
    height: '100%',
    width: '10%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  inputText: {
    width: '80%',
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  inputAddress: {
    width: '90%',
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  body: {
    ...alignment.Plarge,
  },
  category: {
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.MTlarge,
  },
  fontText: {
    flex: 1,
    ...alignment.PLlarge,
  },
});

export default styles;

================
File: components/Modal/UnfollowModal/UnfollowModal.tsx
================
import React from 'react';
import { Modal, View, TouchableOpacity } from 'react-native';

import { UnfollowModalProps } from './UnfollowModal.types';
import styles from './styles';
import { TextDefault } from '../../Text';

import { alignment } from '@/utils';

function UnfollowModal(props: UnfollowModalProps) {
  function CallOk() {
    props.unFollow();
    props.onModalToggle();
  }
  return (
    <Modal animationType="slide" transparent visible={props.modalVisible}>
      <TouchableOpacity activeOpacity={1} onPress={props.onModalToggle} style={styles.centeredView}>
        <View style={styles.modalView}>
          <TextDefault bolder H5 style={{ width: '100%' }}>
            {`Do you want to unfollow ${props.name}`}
          </TextDefault>
          <TextDefault style={[alignment.MTmedium, { width: '100%' }]}>
            You will have to find this user again
          </TextDefault>
          <View style={styles.buttonsRow}>
            <TouchableOpacity style={styles.button} onPress={props.onModalToggle}>
              <View style={styles.buttonText}>
                <TextDefault bold H5>
                  Cancel
                </TextDefault>
              </View>
            </TouchableOpacity>
            <TouchableOpacity style={styles.button} onPress={() => CallOk()}>
              <View style={styles.buttonText}>
                <TextDefault bold H5>
                  Unfollow
                </TextDefault>
              </View>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    </Modal>
  );
}

export default React.memo(UnfollowModal);

================
File: components/Modal/UnfollowModal/UnfollowModal.types.ts
================
export type UnfollowModalProps = {
  unFollow: () => void;
  onModalToggle: () => void;
  modalVisible: boolean;
  name: string;
};

================
File: components/Modal/UnfollowModal/index.ts
================
import UnfollowModal from './UnfollowModal';

export { UnfollowModal };

================
File: components/Modal/UnfollowModal/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  modalView: {
    margin: scale(20),
    width: '85%',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(5),
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    ...alignment.Plarge,
  },
  buttonsRow: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignSelf: 'flex-end',
    ...alignment.PTsmall,
  },
  button: {
    ...alignment.PTmedium,
    ...alignment.PLlarge,
    ...alignment.MLsmall,
  },
  buttonText: {
    borderBottomColor: COLORS.buttonbackground,
    borderBottomWidth: 2,
    ...alignment.PBxSmall,
  },
});
export default styles;

================
File: components/Modal/ZoneModal/ZoneModal.tsx
================
import { Entypo } from '@expo/vector-icons';
import React from 'react';
import {
  FlatList,
  Modal,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { ZoneModalProps } from './ZoneModal.types';
import styles from './styles';
import { ModalHeader } from '../../Header';
import { TextDefault } from '../../Text';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function ZoneModal({ visible, onModalToggle, error, data, setZone, location }: ZoneModalProps) {
  return (
    <Modal animationType="slide" transparent visible={visible}>
      <SafeAreaView edges={['top', 'bottom']} style={[styles.safeAreaViewStyles, styles.flex]}>
        <KeyboardAvoidingView
          style={[styles.flex]}
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
          <View style={[styles.flex, styles.mainContainer]}>
            <ModalHeader closeModal={onModalToggle} title="Location" />
            <View style={styles.body}>
              <TextDefault textColor={COLORS.fontSecondColor} uppercase style={styles.title}>
                Choose State
              </TextDefault>
            </View>

            {error ? (
              <TextDefault>{error.message}</TextDefault>
            ) : (
              <FlatList
                contentContainerStyle={alignment.PBlarge}
                showsVerticalScrollIndicator={false}
                data={data.zones || []}
                keyExtractor={(item) => item.id}
                renderItem={({ item, index }) => (
                  <TouchableOpacity
                    style={styles.stateBtn}
                    onPress={() => {
                      setZone({ value: item.id, label: item.title });
                      onModalToggle();
                    }}>
                    <TextDefault style={styles.flex}>{item.title}</TextDefault>
                    {location?.value === item.id && (
                      <Entypo name="check" size={scale(15)} color={COLORS.fontMainColor} />
                    )}
                  </TouchableOpacity>
                )}
              />
            )}
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );
}
export default React.memo(ZoneModal);

================
File: components/Modal/ZoneModal/ZoneModal.types.ts
================
export type ZoneModalProps = {
  visible: boolean;
  onModalToggle: () => void;
  error?: { message: string };
  data: { zones: { id: string; title: string }[] };
  setZone: (s: { value: string; label: string }) => void;
  location: { value: string };
};

================
File: components/Modal/ZoneModal/index.ts
================
import ZoneModal from './ZoneModal';

export { ZoneModal };

================
File: components/Modal/ZoneModal/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaViewStyles: {
    backgroundColor: COLORS.headerbackground,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  body: {
    ...alignment.PTsmall,
  },
  headerContents: {
    width: '95%',
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'center',
  },
  closeBtn: {
    width: '100%',
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    height: scale(35),
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: COLORS.containerBox,
    overflow: 'hidden',
  },
  backBtn: {
    height: '100%',
    width: '10%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  inputAddress: {
    width: '90%',
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  currentLocation: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.MTlarge,
  },
  title: {
    backgroundColor: COLORS.headerbackground,
    ...alignment.MTmedium,
    ...alignment.PLmedium,
    ...alignment.PTxSmall,
    ...alignment.PBxSmall,
  },
  stateBtn: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Psmall,
  },
});

export default styles;

================
File: components/Modal/index.ts
================
import { AddFilter } from './AddFilter';
import { DeactivateModal } from './DeactivateModal';
import { LoadingModal } from './LoadingModal';
import { LocationModal } from './LocationModal';
import { SearchModal } from './SearchModal';
import { UnfollowModal } from './UnfollowModal';
import { ZoneModal } from './ZoneModal';

export {
  LoadingModal,
  DeactivateModal,
  UnfollowModal,
  ZoneModal,
  AddFilter,
  LocationModal,
  SearchModal,
};

================
File: components/OtpInputContainer/OtpInputContainer.tsx
================
import React, { useRef, memo, useImperativeHandle, forwardRef, Ref } from 'react';
import { Platform, View, TextInput } from 'react-native';

import {
  OtpInputContainerProps,
  OtpInputContainerRef,
  RefCallback,
} from './OtpInputContainer.types';
import styles from './styles';
import { OtpTextInput } from '../OtpTextInput';

const OtpInputContainer = (
  { onOtpArrayChange, otpArray = [] }: OtpInputContainerProps,
  ref: Ref<OtpInputContainerRef>
) => {
  const firstTextInputRef = useRef<TextInput>(null);
  const secondTextInputRef = useRef<TextInput>(null);
  const thirdTextInputRef = useRef<TextInput>(null);
  const fourthTextInputRef = useRef<TextInput>(null);
  const fifthTextInputRef = useRef<TextInput>(null);
  const sixthTextInputRef = useRef<TextInput>(null);

  useImperativeHandle(ref, () => ({
    focusInput: (index: number) => {
      const refs = [
        firstTextInputRef,
        secondTextInputRef,
        thirdTextInputRef,
        fourthTextInputRef,
        fifthTextInputRef,
        sixthTextInputRef,
      ];
      if (index >= 0 && index < refs.length) {
        refs[index].current?.focus();
      }
    },
    getInputRefs: () => [
      firstTextInputRef,
      secondTextInputRef,
      thirdTextInputRef,
      fourthTextInputRef,
      fifthTextInputRef,
      sixthTextInputRef,
    ],
  }));

  const onOtpChange = (index: number) => {
    return (value: string) => {
      if (isNaN(Number(value))) {
        return;
      }
      const otpArrayCopy = otpArray.concat();
      otpArrayCopy[index] = value;
      onOtpArrayChange?.(otpArrayCopy);

      if (value !== '') {
        if (index === 0) {
          secondTextInputRef?.current?.focus();
        } else if (index === 1) {
          thirdTextInputRef?.current?.focus();
        } else if (index === 2) {
          fourthTextInputRef?.current?.focus();
        } else if (index === 3) {
          fifthTextInputRef?.current?.focus();
        } else if (index === 4) {
          sixthTextInputRef?.current?.focus();
        }
      }
    };
  };

  const onOtpKeyPress = (index: number) => {
    return ({ nativeEvent: { key: value } }: { nativeEvent: { key: string } }) => {
      if (value === 'Backspace' && otpArray[index] === '') {
        if (index === 1) {
          firstTextInputRef?.current?.focus();
        } else if (index === 2) {
          secondTextInputRef?.current?.focus();
        } else if (index === 3) {
          thirdTextInputRef?.current?.focus();
        } else if (index === 4) {
          fourthTextInputRef?.current?.focus();
        } else if (index === 5) {
          fifthTextInputRef?.current?.focus();
        }

        /**
         * clear the focused text box as well only on Android because on mweb onOtpChange will be also called
         * doing this thing for us
         * todo check this behaviour on ios
         */
        if (Platform.OS === 'android' && index > 0) {
          const otpArrayCopy = otpArray.concat();
          otpArrayCopy[index - 1] = ''; // clear the previous box which will be in focus
          onOtpArrayChange?.(otpArrayCopy);
        }
      }
    };
  };

  const createRefCallback = (
    textInputRef: React.MutableRefObject<TextInput | null>
  ): RefCallback => {
    return (node: TextInput | null) => {
      textInputRef.current = node;
    };
  };

  return (
    <View style={styles.containerStyle}>
      {[
        firstTextInputRef,
        secondTextInputRef,
        thirdTextInputRef,
        fourthTextInputRef,
        fifthTextInputRef,
        sixthTextInputRef,
      ].map((textInputRef, index) => (
        <OtpTextInput
          containerStyle={styles.textInputStyle}
          value={otpArray[index]}
          onKeyPress={onOtpKeyPress(index)}
          onChangeText={onOtpChange(index)}
          keyboardType="numeric"
          maxLength={1}
          style={styles.textStyle}
          autoFocus={index === 0 ? true : undefined}
          ref={createRefCallback(textInputRef)}
          key={index}
        />
      ))}
    </View>
  );
};

export default memo(forwardRef(OtpInputContainer));

================
File: components/OtpInputContainer/OtpInputContainer.types.ts
================
import { RefObject } from 'react';
import { TextInput } from 'react-native';

export type RefCallback = (instance: TextInput | null) => void;

export type OtpInputContainerProps = {
  onOtpArrayChange?: (value: string[]) => void;
  otpArray?: string[];
};

export type OtpInputContainerRef = {
  focusInput: (index: number) => void;
  getInputRefs: () => RefObject<TextInput>[];
};

================
File: components/OtpInputContainer/index.ts
================
import OtpInputContainer from './OtpInputContainer';

export { OtpInputContainer };

================
File: components/OtpInputContainer/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  fill: { flex: 1 },
  containerStyle: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: scale(12),
  },
  textInputStyle: {
    flex: 1,
    marginRight: scale(12),
  },
  textStyle: {
    fontWeight: 'bold',
    color: COLORS.primary,
    fontSize: 18,
    width: '100%',
    textAlign: 'center',
  },
});

export default styles;

================
File: components/OtpTextInput/OtpTextInput.tsx
================
import React, { Ref, forwardRef } from 'react';
import { View, TextInput } from 'react-native';

import { OtpTextInputProps } from './OtpTextInput.types';
import styles from './styles';

const OtpTextInput = function (
  { containerStyle, style, ...remainingProps }: OtpTextInputProps,
  ref: Ref<TextInput>
) {
  return (
    <View style={[styles.containerStyle, containerStyle]}>
      <TextInput
        {...remainingProps}
        style={[styles.textInputStyle, styles.fill, style]}
        ref={ref}
      />
    </View>
  );
};

export default forwardRef(OtpTextInput);

================
File: components/OtpTextInput/OtpTextInput.types.ts
================
import { StyleProp, TextInputProps, TextStyle, ViewStyle } from 'react-native';

export interface OtpTextInputProps extends TextInputProps {
  containerStyle?: StyleProp<ViewStyle>;
  style?: StyleProp<TextStyle>;
}

================
File: components/OtpTextInput/index.ts
================
import OtpTextInput from './OtpTextInput';

export { OtpTextInput };

================
File: components/OtpTextInput/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  fill: { flex: 1 },
  containerStyle: {
    flexDirection: 'row',
    borderColor: COLORS.buttonbackground,
    borderWidth: StyleSheet.hairlineWidth,
    borderRadius: scale(5),
    padding: scale(8),
  },
  textInputStyle: {
    padding: 0,
  },
});

export default styles;

================
File: components/PhoneNumberInput/PhoneNumberInput.tsx
================
import React, { forwardRef, ForwardedRef } from 'react';
import { StyleSheet } from 'react-native';
import PhoneInput, { PhoneInputProps } from 'react-native-phone-number-input';

import styles from './styles';

const PhoneNumberInput = forwardRef<PhoneInput, PhoneInputProps>(
  ({ containerStyle, textContainerStyle, ...props }, ref: ForwardedRef<PhoneInput>) => {
    return (
      <PhoneInput
        ref={ref}
        defaultCode="IN"
        layout="first"
        autoFocus
        containerStyle={StyleSheet.compose(styles.container, containerStyle)}
        textContainerStyle={StyleSheet.compose(styles.textContainer, textContainerStyle)}
        {...props}
      />
    );
  }
);

export default React.memo(PhoneNumberInput);

================
File: components/PhoneNumberInput/index.ts
================
import PhoneNumberInput from './PhoneNumberInput';

export { PhoneNumberInput };

================
File: components/PhoneNumberInput/styles.ts
================
import { StyleSheet } from 'react-native';

import { scale } from '@/utils';

const styles = StyleSheet.create({
  container: {
    width: '100%',
    borderRadius: scale(5),
  },
  textContainer: {
    borderRadius: scale(5),
  },
});
export default styles;

================
File: components/Spinner/Spinner.tsx
================
import React from 'react';
import { ActivityIndicator } from 'react-native';

import { SpinnerProps } from './Spinner.types';

import { COLORS } from '@/constants';

function Spinner(props: SpinnerProps) {
  return (
    <ActivityIndicator
      animating={props.loading ?? true}
      style={[
        {
          flex: 1,
          backgroundColor: props.backColor ? props.backColor : COLORS.themeBackground,
        },
        props.style,
      ]}
      size={props.size || 'large'}
      color={props.spinnerColor ? props.spinnerColor : COLORS.spinnerColor}
    />
  );
}

export default Spinner;

================
File: components/Spinner/Spinner.types.ts
================
import { StyleProp, ViewStyle } from 'react-native';

export type SpinnerProps = {
  backColor?: string;
  spinnerColor?: string;
  size?: number | 'small' | 'large' | undefined;
  loading?: boolean;
  style?: StyleProp<ViewStyle>;
};

================
File: components/Spinner/index.ts
================
import Spinner from './Spinner';

export { Spinner };

================
File: components/Text/TextDefault/TextDefault.tsx
================
import { Text, StyleSheet } from 'react-native';

import { TextDefaultProps } from './TextDefault.types';
import color from './styles';

import { COLORS } from '@/constants';
import { FONT_FAMILY, FONT_SIZE, textStyles } from '@/utils';

function TextDefault(props: TextDefaultProps) {
  const textColor = props.textColor ? props.textColor : COLORS.fontMainColor;
  const defaultStyle = StyleSheet.flatten([
    color(textColor).color,
    {
      fontFamily: FONT_FAMILY.REGULAR,
      fontSize: FONT_SIZE.NORMAL,
    },
  ]);
  let customStyles = [defaultStyle];

  if (props.thin) customStyles.push(textStyles.Thin);
  if (props.light) customStyles.push(textStyles.Light);
  if (props.bold) customStyles.push(textStyles.Bold);
  if (props.bolder) customStyles.push(textStyles.Bolder);
  if (props.center) customStyles.push(textStyles.Center as any);
  if (props.right) customStyles.push(textStyles.Right as any);
  if (props.small) customStyles.push(textStyles.Small);
  if (props.H5) customStyles.push(textStyles.H5);
  if (props.H4) customStyles.push(textStyles.H4);
  if (props.H3) customStyles.push(textStyles.H3);
  if (props.H2) customStyles.push(textStyles.H2);
  if (props.H1) customStyles.push(textStyles.H1);
  if (props.uppercase) customStyles.push(textStyles.UpperCase as any);

  customStyles = StyleSheet.flatten([customStyles, props.style]);

  return (
    <Text onPress={props?.onPress} numberOfLines={props.numberOfLines ?? 0} style={customStyles}>
      {props.children}
    </Text>
  );
}

export default TextDefault;

================
File: components/Text/TextDefault/TextDefault.types.ts
================
import { ReactNode } from 'react';

export type TextDefaultProps = {
  bold?: boolean;
  bolder?: boolean;
  center?: boolean;
  right?: boolean;
  small?: boolean;
  H5?: boolean;
  H4?: boolean;
  H3?: boolean;
  H2?: boolean;
  H1?: boolean;
  uppercase?: boolean;
  numberOfLines?: number;
  textColor?: string;
  style?: any;
  children: ReactNode;
  thin?: boolean;
  light?: boolean;
  onPress?: () => void;
};

================
File: components/Text/TextDefault/index.ts
================
import TextDefault from './TextDefault';

export default TextDefault;

================
File: components/Text/TextDefault/styles.ts
================
import { StyleSheet } from 'react-native';

const color = (textColor: string) =>
  StyleSheet.create({
    color: {
      color: textColor,
    },
  });

export default color;

================
File: components/Text/TextError/TextError.tsx
================
import React from 'react';
import { View } from 'react-native';

import { TextErrorProps } from './TextError.types';
import TextDefault from '../TextDefault';

import { COLORS } from '@/constants';

function TextError(props: TextErrorProps) {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: props.backColor ? props.backColor : COLORS.dark,
      }}>
      <TextDefault
        style={props.style}
        textColor={props.textColor ? props.textColor : COLORS.fontMainColor}
        bold
        H5
        center>
        {props.text}{' '}
      </TextDefault>
    </View>
  );
}

export default TextError;

================
File: components/Text/TextError/TextError.types.ts
================
export type TextErrorProps = {
  text: string;
  backColor?: string;
  textColor?: string;
  style?: any;
};

================
File: components/Text/TextError/index.ts
================
import TextError from './TextError';

export default TextError;

================
File: components/Text/TextTimer/TextTimer.tsx
================
import React from 'react';

import { TextTimerProps } from './TextTimer.types';
import styles from './styles';
import TextDefault from '../TextDefault';

const TextTimer = ({ text, time }: TextTimerProps) => {
  return (
    <TextDefault style={styles.containerStyle}>
      {text}
      <TextDefault style={styles.textStyle}>{` ${time}s`}</TextDefault>
    </TextDefault>
  );
};

export default TextTimer;

================
File: components/Text/TextTimer/TextTimer.types.ts
================
export type TextTimerProps = { text: string; time: string | number };

================
File: components/Text/TextTimer/index.ts
================
import TextTimer from './TextTimer';

export default TextTimer;

================
File: components/Text/TextTimer/styles.ts
================
import { StyleSheet } from 'react-native';

import { scale } from '@/utils';

const styles = StyleSheet.create({
  containerStyle: {
    fontSize: scale(12),
    textAlign: 'center',
    marginTop: scale(24),
  },
  textStyle: {
    fontWeight: 'bold',
  },
});

export default styles;

================
File: components/Text/index.ts
================
import TextDefault from './TextDefault';
import TextError from './TextError';
import TextTimer from './TextTimer';

export { TextDefault, TextError, TextTimer };

================
File: components/index.ts
================
import { EmptyButton, LoginButton, SkipButton, DefaultTextButton } from './Buttons';
import { FollowerCard, FollowingCard } from './Card';
import CustomMarker from './CustomMarker';
import FlashMessage from './FlashMessage';
import { BackButton, LeftButton, RightButton, ModalHeader, MainHeader } from './Header';
import LocationPermission from './LocationPermission';
import LocationPickerBottomSheet from './LocationPickerBottomSheet';
import {
  AddFilter,
  DeactivateModal,
  LocationModal,
  SearchModal,
  UnfollowModal,
  ZoneModal,
  LoadingModal,
} from './Modal';
import { OtpInputContainer } from './OtpInputContainer';
import { PhoneNumberInput } from './PhoneNumberInput';
import { Spinner } from './Spinner';
import { TextDefault, TextError, TextTimer } from './Text';

export {
  SkipButton,
  LoginButton,
  SearchModal,
  LocationModal,
  FlashMessage,
  TextDefault,
  TextError,
  LocationPermission,
  CustomMarker,
  BackButton,
  LeftButton,
  RightButton,
  Spinner,
  EmptyButton,
  DeactivateModal,
  UnfollowModal,
  FollowerCard,
  FollowingCard,
  MainHeader,
  ModalHeader,
  ZoneModal,
  AddFilter,
  PhoneNumberInput,
  LoadingModal,
  OtpInputContainer,
  TextTimer,
  DefaultTextButton,
  LocationPickerBottomSheet,
};

================
File: constants/colors.ts
================
export const COLORS = {
  primary: '#002f34',
  grey: '#5E5D5E',
  dark: '#1A1A1A',

  black: '#000',
  white: '#FFF',
  themeBackground: '#F7F7F7',
  headerbackground: '#ebeeef',
  headerText: '#002f34',
  bottomTabColor: '#ebeeef',
  buttonbackground: '#002f34',
  buttonText: '#FFFFFF',
  containerTheme: '#ebeeef',
  containerBox: '#FFFFFF',
  fontMainColor: '#212121',
  fontSecondColor: 'rgba(0,47,52,.64)',
  fontThirdColor: '#949393',
  fontPlaceholder: '#cccccc',
  horizontalLine: '#949393',
  medHorizontalLine: '#D8D8D8',
  lightHorizontalLine: '#f0f0f0',
  spinnerColor: '#3a77ff',
  spinnerColor1: 'rgba(0,47,52,1)',
  messageBackground: 'rgba(52, 52, 52, .9)',
  errorColor: '#FA7751',
  google: '#DC4E41',
  feature: '#ffce32',
  imageHeader: '#F5E5BF',
  selected: '#c8f8f6',
  activeLine: '#4fe3de',
  selectedText: '#1c7370',
  shadowColor: 'rgba(52, 52, 52, .9)',
  radioColor: '#212121',
  radioOuterColor: '#212121',
  disabled: 'rgba(0,47,52,.3)',
};

================
File: constants/fontStyles.ts
================
export const FONT_STYLES = {
  Thin: 'Thin',
  Light: 'Light',
  Regular: 'Regular',
  Bold: 'Bold',
  Bolder: 'Bolder',
};

================
File: constants/index.ts
================
import { COLORS } from './colors';
import { FONT_STYLES } from './fontStyles';
import {
  TAB_SCREENS,
  LOCATION_SCREENS,
  CHAT_SCREENS,
  INBOX_SCREENS,
  ACCOUNT_SCREENS,
  NETWORK_SCREENS,
  PRODUCT_DESCRIPTION_SCREENS,
  SELL_SCREENS,
  ADS_SCREENS,
  ADS_TAB_SCREENS,
  HOME_SCREENS,
  BASE_SCREENS,
  AUTH_SCREENS,
} from './screen';
import { SIZE } from './size';
import { TAB_LABELS } from './tabLabels';

export {
  TAB_SCREENS,
  TAB_LABELS,
  COLORS,
  FONT_STYLES,
  LOCATION_SCREENS,
  SIZE,
  CHAT_SCREENS,
  INBOX_SCREENS,
  ACCOUNT_SCREENS,
  NETWORK_SCREENS,
  PRODUCT_DESCRIPTION_SCREENS,
  SELL_SCREENS,
  ADS_SCREENS,
  HOME_SCREENS,
  ADS_TAB_SCREENS,
  BASE_SCREENS,
  AUTH_SCREENS,
};

================
File: constants/screen.ts
================
export const TAB_SCREENS = {
  HOME: '(home)',
  CHAT: '(chat)',
  SELL: '(sell)',
  ADS: '(ads)',
  ACCOUNT: '(account)',
};

export const LOCATION_SCREENS = {
  CURRENT_LOCATION: 'index',
  SELECT_LOCATION: 'selectLocation',
  SELECT_LOCATION_BOTTOM_SHEET: 'selectLocationBottomSheet',
};

export const AUTH_SCREENS = {
  AUTH_PAGE: 'index',
  OTP_PAGE: 'otp',
};

export const CHAT_SCREENS = {
  MAIN_CHAT: '(inbox-tabs)',
  LIVE_CHAT: 'liveChat',
};

export const ADS_SCREENS = {
  MAIN_ADS: '(ads-tabs)',
};

export const HOME_SCREENS = {
  MAIN: 'index',
};

export const BASE_SCREENS = {
  AUTHENTICATION: '(auth)',
  TAB_SCREENS: '(tabs)',
  LOCATION_SCREENS: '(location)',
};

export const ADS_TAB_SCREENS = {
  ADS: 'index',
  FAVOURITE: 'favourite',
};

export const INBOX_SCREENS = {
  ALL: 'index',
  BUYING: 'buying',
  SELLING: 'selling',
};

export const ACCOUNT_SCREENS = {
  MAIN_ACCOUNT: 'index',
  HELP: 'help',
  SETTINGS: 'settings',
  PROFILE: 'profile',
  PRIVACY: 'privacy',
  NOTIFICATIONS: 'notifications',
  HELP_BROWSER: 'helpBrowser',
  NETWORK: '(network-tabs)',
};

export const NETWORK_SCREENS = {
  FOLLOWING: 'index',
  FOLLOWERS: 'followers',
};

export const SELL_SCREENS = {
  SELL: 'index',
  CATEGORIES: 'categories',
  SUB_CATEGORIES: 'subCategories',
  FULL_MAP: 'fullMap',
  LOCATION_CONFIRM: 'locationConfirm',
  PRICE: 'price',
  SELLING_FORM: 'sellingForm',
  UPLOAD_IMAGE: 'uploadImage',
  PRODUCT_DESCRIPTION: '(product-description-tabs)',
};

export const PRODUCT_DESCRIPTION_SCREENS = {
  PRODUCT_DESCRIPTION: 'index',
  FULL_MAP: 'fullMap',
};

================
File: constants/size.ts
================
export const SIZE = {
  XSMALL: 5,
  SMALL: 10,
  MEDIUM: 15,
  LARGE: 20,
};

================
File: constants/tabLabels.ts
================
export const TAB_LABELS = {
  HOME: 'HOME',
  CHAT: 'CHATS',
  SELL: 'SELL',
  ADS: 'MY ADS',
  ACCOUNT: 'ACCOUNT',
};

================
File: eas.json
================
{
  "cli": {
    "version": ">= 9.0.9"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal",
      "ios": {
        "simulator": true
      }
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {},
    "development-simulator": {
      "extends": "development",
      "ios": {
        "simulator": true
      }
    }
  },
  "submit": {
    "production": {}
  }
}

================
File: firebase.json
================
{
  "react-native": {}
}

================
File: hooks/index.ts
================
import { useAuth, useInitializeAuth } from './useAuth';
import useLocationPermission from './useLocationPermission';

export { useLocationPermission, useAuth, useInitializeAuth };

================
File: hooks/useAuth/index.ts
================
import { useAuth, useInitializeAuth } from './useAuth';

export { useAuth, useInitializeAuth };

================
File: hooks/useAuth/useAuth.ts
================
import auth from '@react-native-firebase/auth';
import { GoogleSignin } from '@react-native-google-signin/google-signin';
import Constants from 'expo-constants';
import { useEffect } from 'react';
import { useShallow } from 'zustand/react/shallow';

import { useAuthStore } from '@/store';

GoogleSignin.configure({
  webClientId:
    Constants.expoConfig?.extra?.firebase.webClientId || process.env.EXPO_PUBLIC_WEB_CLIENT_ID,
});
export const useInitializeAuth = () => {
  const setUser = useAuthStore((state) => state.setUser);
  const setIsLoading = useAuthStore((state) => state.setIsLoading);

  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged((firebaseUser) => {
      setUser(firebaseUser);
      setIsLoading(false);
    });

    return () => unsubscribe();
  }, [setUser, setIsLoading]);
};

export const useAuth = () => {
  const {
    user,
    isLoading,
    isGoogleSignInLoading,
    isPhoneVerificationLoading,
    confirm,
    setIsGoogleSignInLoading,
    setIsPhoneVerificationLoading,
    setConfirm,
    setUser,
    setIsLoading,
    setAuthSkipped,
    authSkipped,
  } = useAuthStore(
    useShallow((state) => ({
      user: state.user,
      isLoading: state.isLoading,
      isGoogleSignInLoading: state.isGoogleSignInLoading,
      isPhoneVerificationLoading: state.isPhoneVerificationLoading,
      confirm: state.confirm,
      setIsGoogleSignInLoading: state.setIsGoogleSignInLoading,
      setIsPhoneVerificationLoading: state.setIsPhoneVerificationLoading,
      setConfirm: state.setConfirm,
      setUser: state.setUser,
      setIsLoading: state.setIsLoading,
      setAuthSkipped: state.setAuthSkipped,
      authSkipped: state.authSkipped,
    }))
  );

  const signInWithGoogle = async () => {
    setIsGoogleSignInLoading(true);
    try {
      await GoogleSignin.hasPlayServices();
      const { idToken } = await GoogleSignin.signIn();
      const googleCredential = auth.GoogleAuthProvider.credential(idToken);
      return await auth().signInWithCredential(googleCredential);
    } catch (error) {
      console.error('Error signing in with Google:', error);
      throw error;
    } finally {
      setIsGoogleSignInLoading(false);
    }
  };

  const sendPhoneVerification = async (phoneNumber: string) => {
    setIsPhoneVerificationLoading(true);
    try {
      const confirmation = await auth().signInWithPhoneNumber(phoneNumber);
      setConfirm(confirmation);
      return confirmation;
    } catch (error) {
      console.error('Error sending phone verification:', error);
      throw error;
    } finally {
      setIsPhoneVerificationLoading(false);
    }
  };

  const verifyPhoneCode = async (code: string) => {
    if (!confirm) {
      throw new Error('No confirmation result found');
    }
    setIsPhoneVerificationLoading(true);
    try {
      const credential = await confirm.confirm(code);
      if (!credential) return;
      setUser(credential.user);
      return credential;
    } catch (error) {
      console.error('Error verifying phone code:', error);
      throw error;
    } finally {
      setIsPhoneVerificationLoading(false);
    }
  };

  const signOut = async () => {
    setIsLoading(true);
    try {
      await auth().signOut();
      await GoogleSignin.revokeAccess();
      await GoogleSignin.signOut();
      setUser(null);
    } catch (error) {
      console.error('Error signing out:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const skipAuthentication = () => {
    setAuthSkipped(true);
  };

  return {
    user,
    isLoading,
    isGoogleSignInLoading,
    isPhoneVerificationLoading,
    signInWithGoogle,
    sendPhoneVerification,
    verifyPhoneCode,
    signOut,
    skipAuthentication,
    authSkipped,
  };
};

================
File: hooks/useLocationPermission/index.ts
================
import useLocationPermission from './useLocationPermission';

export default useLocationPermission;

================
File: hooks/useLocationPermission/useLocationPermission.ts
================
import * as Location from 'expo-location';

export default function useLocationPermission() {
  const getLocationPermission = () => Location.getForegroundPermissionsAsync();

  const askLocationPermission = () => Location.requestForegroundPermissionsAsync();

  const getCurrentLocation = async () => {
    const { status } = await askLocationPermission();
    if (status === Location.PermissionStatus.GRANTED) {
      try {
        const location = await Location.getCurrentPositionAsync({
          accuracy: 1,
        });
        return { ...location, error: false };
      } catch (e) {
        if (e instanceof Error) {
          return { error: true, message: e.message };
        }
        return { error: true, message: 'Failed to retrieve location', coords: null };
      }
    }
    return { error: true, message: 'Location permission was not granted' };
  };

  return { getCurrentLocation, getLocationPermission };
}

================
File: index.js
================
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);

================
File: metro.config.js
================
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
// eslint-disable-next-line no-undef
const config = getDefaultConfig(__dirname);

module.exports = config;

================
File: package.json
================
{
  "name": "olo",
  "version": "1.0.0",
  "main": "expo-router/entry",
  "scripts": {
    "start": "expo start --dev-client",
    "ios": "expo run:ios",
    "android": "expo run:android",
    "build:dev": "eas build --profile development",
    "build:preview": "eas build --profile preview",
    "build:prod": "eas build --profile production",
    "build:development-simulator": "eas build --profile development-simulator --platform ios --local",
    "prebuild": "expo prebuild",
    "lint": "eslint \"**/*.{js,jsx,ts,tsx}\" && prettier -c \"**/*.{js,jsx,ts,tsx,json}\"",
    "format": "eslint \"**/*.{js,jsx,ts,tsx}\" --fix && prettier \"**/*.{js,jsx,ts,tsx,json}\" --write",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo-google-fonts/roboto": "^0.2.3",
    "@expo/vector-icons": "^14.0.0",
    "@gorhom/bottom-sheet": "^4.6.3",
    "@react-native-firebase/analytics": "^20.1.0",
    "@react-native-firebase/app": "^20.1.0",
    "@react-native-firebase/auth": "^20.1.0",
    "@react-native-firebase/crashlytics": "^20.1.0",
    "@react-native-google-signin/google-signin": "^12.2.1",
    "@react-navigation/material-top-tabs": "^6.6.13",
    "@react-navigation/native": "^6.1.7",
    "@shopify/flash-list": "1.6.4",
    "expo": "~51.0.17",
    "expo-build-properties": "~0.12.3",
    "expo-constants": "~16.0.2",
    "expo-dev-client": "~4.0.19",
    "expo-device": "~6.0.2",
    "expo-font": "~12.0.5",
    "expo-image-picker": "~15.0.7",
    "expo-linking": "~6.3.1",
    "expo-location": "~17.0.1",
    "expo-router": "~3.5.17",
    "expo-status-bar": "~1.12.1",
    "expo-system-ui": "~3.0.7",
    "expo-web-browser": "~13.0.3",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.74.3",
    "react-native-flash-message": "^0.4.2",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-google-places-autocomplete": "^2.5.6",
    "react-native-maps": "1.14.0",
    "react-native-mmkv": "^2.12.2",
    "react-native-modalize": "^2.1.1",
    "react-native-otp-verify": "^1.1.8",
    "react-native-pager-view": "6.3.0",
    "react-native-phone-number-input": "^2.1.0",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.1",
    "react-native-screens": "3.31.1",
    "react-native-svg": "15.2.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "~0.19.10",
    "react-native-webview": "13.8.6",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@types/react": "~18.2.45",
    "@typescript-eslint/eslint-plugin": "^7.7.0",
    "@typescript-eslint/parser": "^7.7.0",
    "eslint": "^8.57.0",
    "eslint-config-universe": "^12.0.1",
    "prettier": "^3.2.5",
    "typescript": "~5.3.3"
  },
  "eslintConfig": {
    "extends": "universe/native"
  },
  "expo": {
    "install": {
      "exclude": [
        "react-native-safe-area-context"
      ]
    }
  },
  "private": true
}

================
File: prettier.config.js
================
module.exports = {
  printWidth: 100,
  tabWidth: 2,
  singleQuote: true,
  bracketSameLine: true,
  trailingComma: 'es5',
};

================
File: screens/AccountStack/Authentication/Authentication.tsx
================
import React, { useRef, useState } from 'react';
import { Image, View, KeyboardAvoidingView, Platform } from 'react-native';
import PhoneInput from 'react-native-phone-number-input';

import { AuthenticationProps } from './Authentication.types';
import styles from './styles';

import { FlashMessage, LoginButton, PhoneNumberInput, SkipButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { scale } from '@/utils';

const APP_ICON = require('@/assets/olo-icon.png');

const AuthenticationScreen = ({
  insets,
  onPressSkip,
  onPressGoogle,
  onPressPhoneNumber,
  isGoogleSignInLoading = false,
}: AuthenticationProps) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [formattedPhoneNumber, setFormattedPhoneNumber] = useState('');
  const [isPhoneNumberValid, setIsPhoneNumberValid] = useState(false);
  const phoneInputRef = useRef<PhoneInput>(null);

  const handlePhoneNumberChange = (text: string) => {
    setPhoneNumber(text);
    const isValid = phoneInputRef.current?.isValidNumber(text) ?? false;
    setIsPhoneNumberValid(isValid);
  };

  const handlePhoneNumberContinue = () => {
    if (!isPhoneNumberValid) {
      FlashMessage({
        message: 'Please enter a valid phone number',
        position: 'bottom',
      });
      return;
    }

    onPressPhoneNumber?.(formattedPhoneNumber);
  };

  return (
    <KeyboardAvoidingView
      style={[styles.safeAreaView, { paddingTop: insets.top }]}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}>
      <View style={styles.mainContainer}>
        <View style={[styles.skipButtonContainer, { paddingRight: insets.right + scale(15) }]}>
          <SkipButton onPress={onPressSkip} />
        </View>
        <View style={styles.logoContainer}>
          <View style={styles.imageWrapper}>
            <Image source={APP_ICON} style={styles.appIcon} resizeMode="contain" />
          </View>
        </View>
        <View style={styles.authenticationContainer}>
          <TextDefault textColor={COLORS.fontPlaceholder} bolder center H5>
            Log in or Sign up
          </TextDefault>
          <View style={styles.phoneInputContainer}>
            <PhoneNumberInput
              containerStyle={styles.phoneInputWidth}
              ref={phoneInputRef}
              defaultValue={phoneNumber}
              onChangeText={handlePhoneNumberChange}
              onChangeFormattedText={setFormattedPhoneNumber}
              textInputProps={{
                keyboardType: 'number-pad',
              }}
            />
            <LoginButton
              style={styles.phoneInputWidth}
              title="Continue"
              onPress={handlePhoneNumberContinue}
            />
          </View>
          <TextDefault textColor={COLORS.fontPlaceholder} bold>
            or
          </TextDefault>
          <LoginButton
            style={styles.phoneInputWidth}
            icon="social-google"
            title="Continue with Gmail"
            onPress={onPressGoogle}
            loading={isGoogleSignInLoading}
          />
        </View>
        <View style={[styles.footerContainer, { paddingBottom: insets.bottom }]}>
          <TextDefault textColor={COLORS.fontPlaceholder} bold center small>
            If you Continue, you are accepting
          </TextDefault>
          <TextDefault
            textColor={COLORS.fontPlaceholder}
            bold
            center
            small
            style={styles.underlinedText}>
            App Terms and Conditions and Privacy Policy
          </TextDefault>
        </View>
      </View>
    </KeyboardAvoidingView>
  );
};

export default React.memo(AuthenticationScreen);

================
File: screens/AccountStack/Authentication/Authentication.types.ts
================
export type AuthenticationProps = {
  insets: {
    top: number;
    bottom: number;
    right: number;
  };
  onPressSkip?: () => void;
  onPressPhoneNumber?: (number: string) => void;
  onPressGoogle?: () => void;
  isGoogleSignInLoading?: boolean;
};

================
File: screens/AccountStack/Authentication/index.ts
================
import Authentication from './Authentication';

export { Authentication };

================
File: screens/AccountStack/Authentication/styles.ts
================
import { StyleSheet, Dimensions } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const { height } = Dimensions.get('window');

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaView: {
    flex: 1,
    backgroundColor: COLORS.headerbackground,
  },
  scrollViewContent: {
    flexGrow: 1,
  },
  mainContainer: {
    flex: 1,
    backgroundColor: COLORS.themeBackground,
  },
  skipButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    padding: scale(10),
    backgroundColor: COLORS.headerbackground,
  },
  logoContainer: {
    height: height * 0.3,
    backgroundColor: COLORS.headerbackground,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageWrapper: {
    width: scale(200),
    height: scale(100),
  },
  appIcon: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  authenticationContainer: {
    flex: 1,
    alignItems: 'center',
    gap: scale(10),
    paddingVertical: scale(10),
    backgroundColor: COLORS.buttonbackground,
  },
  phoneInputContainer: {
    width: '100%',
    gap: scale(5),
    justifyContent: 'center',
    alignItems: 'center',
  },
  phoneInputWidth: {
    width: '85%',
    marginBottom: 0,
  },
  footerContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.buttonbackground,
    paddingVertical: scale(10),
  },
  underlinedText: {
    textDecorationLine: 'underline',
  },
  appleBtn: {
    width: '85%',
    height: 50,
    fontSize: 20,
  },
  textTitle: {
    fontSize: scale(52),
    letterSpacing: scale(5),
  },
});

export default styles;

================
File: screens/AccountStack/Help/Help.tsx
================
import { Entypo } from '@expo/vector-icons';
import React from 'react';
import { TouchableOpacity, View } from 'react-native';

import { HelpProps } from './Help.types';
import styles from './styles';

import { TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const links = [
  {
    title: 'Product Page',
    description: 'Experience our product Demo',
    url: 'https://market.nativebase.io/view/react-native-food-delivery-backend-app',
  },
  {
    title: 'Docs',
    url: 'https://enatega.gitbook.io/enatega-full-app/',
    description: 'Docs related to product',
  },
  {
    title: 'Blog',
    description: 'Blog related to our product',
    url: 'https://blog.nativebase.io/enatega-full-food-delivery-app-is-finally-here-a6039de4a09d',
  },
  {
    title: 'About Us',
    url: 'https://ninjascode.com/pages/ourteam.html',
    description: 'Connect to our team',
  },
];

function Help({ onPressHelpBrowser, onPressShare }: HelpProps) {
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      {links.map(({ title, url, description }) => (
        <TouchableOpacity
          key={url}
          style={styles.smallContainer}
          // onPress={() => navigation.navigate('HelpBrowser', { title, url })}
          onPress={onPressHelpBrowser}>
          <View style={[styles.flex]}>
            <TextDefault bold H5 style={alignment.PLlarge}>
              {title}
            </TextDefault>
            <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
              {description}
            </TextDefault>
          </View>
          <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
        </TouchableOpacity>
      ))}
      <TouchableOpacity style={styles.smallContainer}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Get Help
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            See FAQ and contact support
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>
      <TouchableOpacity style={styles.smallContainer}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Rate us
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            If you love our app. Please take a moment to rate it
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>
      <TouchableOpacity style={styles.smallContainer} onPress={onPressShare}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Invite friends to App
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            Invite your friends to buy and sell
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>
      <View style={styles.smallContainer}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Version
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            1.0.0
          </TextDefault>
        </View>
      </View>
    </View>
  );
}

export default React.memo(Help);

================
File: screens/AccountStack/Help/Help.types.ts
================
export type HelpProps = {
  onPressHelpBrowser?: () => void;
  onPressShare?: () => void;
};

================
File: screens/AccountStack/Help/index.ts
================
import Help from './Help';

export { Help };

================
File: screens/AccountStack/Help/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
});

export default styles;

================
File: screens/AccountStack/HelpBrowser/HelpBrowser.tsx
================
import React, { useState } from 'react';
import { View, ActivityIndicator } from 'react-native';
import { WebView } from 'react-native-webview';

import { HelpBrowserProps } from './HelpBrowser.types';

function HelpBrowser({ url }: HelpBrowserProps) {
  const [loading, loadingSetter] = useState(true);

  return (
    <View style={{ flex: 1 }}>
      <WebView
        source={{ uri: url }}
        onLoad={() => {
          loadingSetter(false);
        }}
      />
      {loading ? (
        <ActivityIndicator style={{ position: 'absolute', bottom: '50%', left: '50%' }} />
      ) : null}
    </View>
  );
}

export default React.memo(HelpBrowser);

================
File: screens/AccountStack/HelpBrowser/HelpBrowser.types.ts
================
export type HelpBrowserProps = {
  url: string;
};

================
File: screens/AccountStack/HelpBrowser/index.ts
================
import HelpBrowser from './HelpBrowser';

export { HelpBrowser };

================
File: screens/AccountStack/HelpBrowser/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22,
  },
  modalView: {
    margin: scale(20),
    width: '85%',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(5),
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    ...alignment.Plarge,
  },
  buttonsRow: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignSelf: 'flex-end',
    ...alignment.PTsmall,
  },
  button: {
    ...alignment.PTmedium,
    ...alignment.PLlarge,
    ...alignment.MLsmall,
  },
  buttonText: {
    borderBottomColor: COLORS.buttonbackground,
    borderBottomWidth: 2,
    ...alignment.PBxSmall,
  },
});
export default styles;

================
File: screens/AccountStack/MainAccount/MainAccount.tsx
================
import { AntDesign, Entypo, FontAwesome5, Ionicons } from '@expo/vector-icons';
import React from 'react';
import { Image, TouchableOpacity, View } from 'react-native';

import { MainAccountProps } from './MainAccount.types';
import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function MainAccount({
  onPressHelp,
  onPressSettings,
  onPressProfile,
  onPressNetwork,
}: MainAccountProps) {
  return (
    <View style={[styles.flex, styles.container]}>
      <View style={styles.profileContainer}>
        <View style={styles.imageContainer}>
          <Image
            style={styles.imgResponsive}
            source={require('@/assets/avatar.png')}
            resizeMode="cover"
          />
        </View>
        <View style={[styles.flex, styles.profileInfo]}>
          <TextDefault H4 bold style={alignment.MBmedium}>
            Log in
          </TextDefault>
          <TouchableOpacity
            activeOpacity={0.5}
            style={alignment.PBxSmall}
            onPress={
              onPressProfile
              //   isLoggedIn ? navigation.navigate('Profile') : navigation.navigate('Registration')
            }>
            <TextDefault textColor={COLORS.spinnerColor} H5 bold>
              Log in to your account
            </TextDefault>
          </TouchableOpacity>
        </View>
      </View>
      {/* {isLoggedIn && ( */}
      <>
        <TouchableOpacity
          style={styles.smallContainer}
          onPress={onPressNetwork}
          //   onPress={() => navigation.navigate('Network')}
        >
          <FontAwesome5 name="users" size={scale(20)} color={COLORS.buttonbackground} />
          <View style={[styles.flex]}>
            <TextDefault bold H5 style={alignment.PLlarge}>
              My Network
            </TextDefault>
            <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
              Followers, following and find friends
            </TextDefault>
          </View>
          <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
        </TouchableOpacity>
        <TouchableOpacity style={styles.smallContainer} onPress={onPressSettings}>
          <AntDesign name="setting" size={scale(22)} color={COLORS.buttonbackground} />
          <View style={[styles.flex]}>
            <TextDefault bold H5 style={alignment.PLlarge}>
              Settings
            </TextDefault>
            <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
              Privacy and logout
            </TextDefault>
          </View>
          <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
        </TouchableOpacity>
      </>
      {/* )} */}
      <TouchableOpacity style={styles.smallContainer} onPress={onPressHelp}>
        <Ionicons name="help-circle-outline" size={scale(22)} color={COLORS.buttonbackground} />
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Help and Support
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            Help center, Terms and conditions, Privacy policy
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>
      {/* {!isLoggedIn && ( */}
      <View style={styles.loginBtn}>
        <EmptyButton
          title="Login or register"
          //   onPress={() => navigation.navigate('Registration')}
        />
      </View>
      {/* )} */}
    </View>
  );
}

export default MainAccount;

================
File: screens/AccountStack/MainAccount/MainAccount.types.ts
================
export type MainAccountProps = {
  onPressHelp?: () => void;
  onPressSettings?: () => void;
  onPressProfile?: () => void;
  onPressNetwork?: () => void;
};

================
File: screens/AccountStack/MainAccount/index.ts
================
import MainAccount from './MainAccount';

export { MainAccount };

================
File: screens/AccountStack/MainAccount/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  container: {
    backgroundColor: COLORS.themeBackground,
  },
  profileContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Plarge,
  },
  imageContainer: {
    backgroundColor: COLORS.containerBox,
    width: scale(90),
    height: scale(90),
    borderRadius: scale(45),
    overflow: 'hidden',
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  profileInfo: {
    ...alignment.PLmedium,
  },
  font: {
    borderBottomColor: COLORS.fontMainColor,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
  loginBtn: {
    width: '90%',
    alignSelf: 'center',
  },
});
export default styles;

================
File: screens/AccountStack/Network/Followers/Followers.tsx
================
import { FlashList } from '@shopify/flash-list';
import React from 'react';
import { Image, View } from 'react-native';

import { FollowersProps } from './Followers.types';
import styles from '../styles';

import { EmptyButton, FollowerCard, TextDefault } from '@/components';
import { FollowerCardProps } from '@/components/Card/FollowerCard/FollowerCard.types';
import { COLORS } from '@/constants';
import { alignment } from '@/utils';

function emptyView() {
  return (
    <View style={[styles.flex, styles.emptyContainer]}>
      <Image style={styles.emptyImage} source={require('@/assets/followers.png')} />
      <TextDefault H4 center bold style={alignment.MTlarge}>
        You don't have followers yet.
      </TextDefault>
      <TextDefault H5 center light style={alignment.MTsmall}>
        Chat, post or start following somebody so they can follow you.
      </TextDefault>
    </View>
  );
}

function header({ onPressShare }: Pick<FollowersProps, 'onPressShare'>) {
  return (
    <View style={styles.notificationContainer}>
      <View style={styles.imgResponsive}>
        <Image style={styles.img} source={require('@/assets//network.png')} />
      </View>
      <View style={styles.notificationText}>
        <TextDefault textColor={COLORS.buttonbackground} H5 center>
          App is more fun shared with friends
        </TextDefault>
        <View style={{ width: '70%' }}>
          <EmptyButton title="Invite Friends" onPress={onPressShare} />
        </View>
      </View>
    </View>
  );
}
function Followers({ onPressShare }: FollowersProps) {
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <FlashList
        // contentContainerStyle={styles.flex}
        // contentContainerStyle={[styles.mainContainer, { flexGrow: 1 }]}
        data={[]}
        estimatedItemSize={20}
        ListEmptyComponent={emptyView()}
        ListHeaderComponent={header({ onPressShare })}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => <FollowerCard {...(item as FollowerCardProps)} />}
      />
    </View>
  );
}
export default React.memo(Followers);

================
File: screens/AccountStack/Network/Followers/Followers.types.ts
================
export type FollowersProps = {
  onPressShare?: () => void;
};

================
File: screens/AccountStack/Network/Followers/index.ts
================
import Followers from './Followers';

export { Followers };

================
File: screens/AccountStack/Network/Following/Following.tsx
================
import { FlashList } from '@shopify/flash-list';
import React from 'react';
import { Image, View } from 'react-native';

import { FollowingProps } from './Following.types';
import styles from '../styles';

import { EmptyButton, FollowingCard, TextDefault } from '@/components';
import { FollowingCardProps } from '@/components/Card/FollowingCard/FollowingCard.types';
import { COLORS } from '@/constants';
import { alignment } from '@/utils';

// const empty = false

function emptyView() {
  return (
    <View style={[styles.flex, styles.emptyContainer]}>
      <Image style={styles.emptyImage} source={require('@/assets/followers.png')} />
      <TextDefault H4 center bold style={alignment.MTlarge}>
        You are not following anyone yet.
      </TextDefault>
      <TextDefault H5 center light style={alignment.MTsmall}>
        Start following people you know or like and get notified when they post something new!
      </TextDefault>
    </View>
  );
}
function header({ onPressShare }: Pick<FollowingProps, 'onPressShare'>) {
  return (
    <View style={styles.notificationContainer}>
      <View style={styles.imgResponsive}>
        <Image style={styles.img} source={require('@/assets/notification.png')} />
      </View>
      <View style={styles.notificationText}>
        <TextDefault textColor={COLORS.buttonbackground} H5 center>
          Your followers will be notified when you post new ads
        </TextDefault>
        <View style={{ width: '70%' }}>
          <EmptyButton title="Invite Friends" onPress={onPressShare} />
        </View>
      </View>
    </View>
  );
}
function Following({ onPressShare }: FollowingProps) {
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <FlashList
        // style={styles.flex}
        // contentContainerStyle={[styles.mainContainer, { flexGrow: 1 }]}
        data={[]}
        ListEmptyComponent={emptyView()}
        estimatedItemSize={20}
        ListHeaderComponent={
          // profile?.following?.length > 0
          //  ?
          header({ onPressShare })
          // : null
        }
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => <FollowingCard {...(item as FollowingCardProps)} />}
      />
    </View>
  );
}
export default React.memo(Following);

================
File: screens/AccountStack/Network/Following/Following.types.ts
================
export type FollowingProps = {
  onPressShare?: () => void;
};

================
File: screens/AccountStack/Network/Following/index.ts
================
import Following from './Following';

export { Following };

================
File: screens/AccountStack/Network/index.ts
================
import { Followers } from './Followers';
import { Following } from './Following';

export { Followers, Following };

================
File: screens/AccountStack/Network/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  notificationContainer: {
    backgroundColor: COLORS.lightHorizontalLine,
    alignItems: 'center',
    flexDirection: 'row',
    ...alignment.Plarge,
    ...alignment.MBsmall,
  },
  imgResponsive: {
    height: scale(70),
    width: scale(70),
  },
  img: {
    flex: 1,
    height: undefined,
    width: undefined,
  },
  notificationText: {
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
    ...alignment.PLmedium,
  },
  userContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.Psmall,
    ...alignment.PLlarge,
  },
  avatar: {
    height: scale(40),
    width: scale(40),
  },
});
export default styles;

================
File: screens/AccountStack/Notifications/Notifications.tsx
================
import React from 'react';
import { Switch, View } from 'react-native';

import { NotificationsProps } from './Notifications.types';
import styles from './styles';

import { TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment } from '@/utils';

function Notifications({
  onChangeOfferNotification,
  offerNotification,
  onChangeRecommendation,
  recommendation,
}: NotificationsProps) {
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <View style={styles.smallContainer}>
        <TextDefault bold H5 style={[alignment.PLlarge, styles.flex]}>
          Special communications & offers
        </TextDefault>
        {/* {loading ? (
          <View style={{ alignSelf: 'flex-end' }}>
            <Spinner
              backColor={'transparent'}
              spinnerColor={COLORS.buttonbackground}
              size={'small'}
            />
          </View>
        ) : ( */}
        <Switch
          trackColor={{ false: COLORS.headerbackground, true: COLORS.buttonbackground }}
          thumbColor={COLORS.containerBox}
          ios_backgroundColor={COLORS.headerbackground}
          onValueChange={onChangeOfferNotification}
          value={offerNotification}
        />
        {/* )} */}
      </View>
      <View style={styles.smallContainer}>
        <TextDefault
          textColor={COLORS.fontPlaceholder}
          bold
          H5
          style={[alignment.PLlarge, styles.flex]}>
          Recomendations
        </TextDefault>
        <Switch
          disabled
          trackColor={{ false: COLORS.headerbackground, true: COLORS.buttonbackground }}
          thumbColor={COLORS.containerBox}
          ios_backgroundColor={COLORS.headerbackground}
          onValueChange={onChangeRecommendation}
          value={recommendation}
        />
      </View>
    </View>
  );
}
export default React.memo(Notifications);

================
File: screens/AccountStack/Notifications/Notifications.types.ts
================
export type NotificationsProps = {
  offerNotification?: boolean;
  onChangeOfferNotification?: () => void;
  recommendation?: boolean;
  onChangeRecommendation?: () => void;
};

================
File: screens/AccountStack/Notifications/index.ts
================
import Notifications from './Notifications';

export { Notifications };

================
File: screens/AccountStack/Notifications/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
});
export default styles;

================
File: screens/AccountStack/OtpVerification/OtpVerification.tsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  SafeAreaView,
  View,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';

import { OtpVerificationProps } from './OtpVerification.types';
import styles from './styles';

import { TextDefault, TextTimer, OtpInputContainer, DefaultTextButton } from '@/components';
import { OtpInputContainerRef } from '@/components/OtpInputContainer/OtpInputContainer.types';

const RESEND_OTP_TIME_LIMIT = 30; // 30 secs

/**
 * OtpVerification component for handling OTP input and verification
 */
const OtpVerification = ({ phoneNumber, onSubmitOtp, onResendOtp }: OtpVerificationProps) => {
  const [otpArray, setOtpArray] = useState<string[]>(['', '', '', '', '', '']);
  const [submittingOtp, setSubmittingOtp] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [resendButtonDisabledTime, setResendButtonDisabledTime] =
    useState<number>(RESEND_OTP_TIME_LIMIT);

  const otpInputContainerRef = useRef<OtpInputContainerRef>(null);
  const resendOtpTimerIntervalRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * Starts the timer for OTP resend button
   */
  const startResendOtpTimer = useCallback(() => {
    if (resendOtpTimerIntervalRef.current) {
      clearInterval(resendOtpTimerIntervalRef.current);
    }
    resendOtpTimerIntervalRef.current = setInterval(() => {
      setResendButtonDisabledTime((prevTime) => {
        if (prevTime <= 0) {
          clearInterval(resendOtpTimerIntervalRef.current!);
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);
  }, []);

  useEffect(() => {
    startResendOtpTimer();
    return () => {
      if (resendOtpTimerIntervalRef.current) {
        clearInterval(resendOtpTimerIntervalRef.current);
      }
    };
  }, [startResendOtpTimer]);

  /**
   * Handles OTP resend button press
   */
  const onResendOtpButtonPress = async () => {
    try {
      setOtpArray(['', '', '', '', '', '']);
      otpInputContainerRef.current?.focusInput(0);
      setResendButtonDisabledTime(RESEND_OTP_TIME_LIMIT);
      startResendOtpTimer();

      await onResendOtp();
      // Handle successful resend
    } catch (error) {
      console.error('Failed to resend OTP:', error);
      setErrorMessage('Failed to resend OTP. Please try again.');
    }
  };

  /**
   * Handles OTP submission
   */
  const onSubmitButtonPress = async () => {
    setSubmittingOtp(true);
    setErrorMessage('');
    try {
      const otp = otpArray.join('');
      await onSubmitOtp(otp);
    } catch (error) {
      console.error('Failed to verify OTP:', error);
      setErrorMessage('Failed to verify OTP. Please try again.');
    } finally {
      setSubmittingOtp(false);
    }
  };

  return (
    <SafeAreaView style={styles.safeAreaContainer}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardAvoidingView}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 120 : 0} // Adjust this value as needed
      >
        <ScrollView
          contentContainerStyle={styles.scrollViewContent}
          keyboardShouldPersistTaps="handled">
          <View style={styles.container}>
            <View style={styles.headerContainer}>
              <TextDefault H4>We have sent a verification code to</TextDefault>
              <TextDefault H4 bold style={styles.phoneNumberText}>
                {phoneNumber}
              </TextDefault>
            </View>
            <OtpInputContainer
              otpArray={otpArray}
              onOtpArrayChange={setOtpArray}
              ref={otpInputContainerRef}
            />

            {errorMessage ? (
              <TextDefault style={styles.errorContainer}>{errorMessage}</TextDefault>
            ) : null}
            {resendButtonDisabledTime > 0 ? (
              <TextTimer text="Resend OTP in" time={resendButtonDisabledTime} />
            ) : (
              <DefaultTextButton
                type="link"
                text="Resend OTP"
                buttonStyle={styles.otpResendButton}
                textStyle={styles.otpResendButtonText}
                onPress={onResendOtpButtonPress}
              />
            )}
            {submittingOtp && <ActivityIndicator style={styles.activityIndicator} />}
          </View>
        </ScrollView>
        <View style={styles.buttonContainer}>
          <DefaultTextButton
            buttonStyle={styles.fillWidthButton}
            type="fill"
            text="Submit"
            textStyle={styles.submitButtonText}
            onPress={onSubmitButtonPress}
            disabled={submittingOtp || otpArray.some((digit) => digit === '')}
          />
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

export default OtpVerification;

================
File: screens/AccountStack/OtpVerification/OtpVerification.types.ts
================
export type OtpVerificationProps = {
  phoneNumber: string;
  onSubmitOtp: (otp: string) => Promise<void>;
  onResendOtp: () => Promise<void>;
};

================
File: screens/AccountStack/OtpVerification/index.ts
================
import OtpVerification from './OtpVerification';

export { OtpVerification };

================
File: screens/AccountStack/OtpVerification/styles.ts
================
import { StyleSheet, Platform } from 'react-native';

import { COLORS } from '@/constants';
import { scale } from '@/utils';

const styles = StyleSheet.create({
  keyboardAvoidingView: {
    flex: 1,
  },
  headerContainer: {
    alignItems: 'center',
    marginBottom: scale(20),
  },
  phoneNumberText: {
    fontWeight: 'bold',
  },
  safeAreaContainer: {
    flex: 1,
    backgroundColor: COLORS.white,
  },
  container: {
    padding: scale(20),
    flex: 1,
    alignItems: 'center',
  },
  submitButtonText: {
    color: 'white',
  },
  otpResendButton: {
    alignItems: 'center',
    width: '100%',
    marginTop: scale(16),
  },
  otpResendButtonText: {
    color: COLORS.fontMainColor,
    textTransform: 'none',
    textDecorationLine: 'underline',
  },
  otpText: {
    fontWeight: 'bold',
    color: COLORS.primary,
    fontSize: scale(18),
    width: '100%',
  },
  fillWidthButton: {
    width: '100%',
    alignItems: 'center',
    paddingTop: scale(12),
    paddingBottom: scale(12),
  },
  errorContainer: {
    color: COLORS.errorColor,
    marginTop: scale(12),
    textAlign: 'center',
  },
  attemptsContainer: {
    textAlign: 'center',
    marginTop: scale(12),
  },
  scrollViewContent: {
    flexGrow: 1,
  },
  buttonContainer: {
    padding: scale(16),
    backgroundColor: COLORS.white,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: -3 },
        shadowOpacity: 0.1,
        shadowRadius: 3,
      },
      android: {
        elevation: 5,
      },
    }),
  },
  activityIndicator: {
    marginTop: scale(20),
  },
});

export default styles;

================
File: screens/AccountStack/Privacy/Privacy.tsx
================
import React, { useState } from 'react';
import { Switch, View } from 'react-native';

import styles from './styles';

import { TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment } from '@/utils';

function Privacy() {
  const [isEnabled, setIsEnabled] = useState(false);
  const toggleSwitch = () => setIsEnabled((prev) => !prev);
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <View style={styles.smallContainer}>
        <TextDefault bold H5 style={[alignment.PLlarge, styles.flex]}>
          Show my phone number in ads
        </TextDefault>
        <Switch
          trackColor={{ false: COLORS.headerbackground, true: COLORS.buttonbackground }}
          thumbColor={COLORS.containerBox}
          ios_backgroundColor={COLORS.headerbackground}
          onValueChange={toggleSwitch}
          value={isEnabled}
        />
      </View>
    </View>
  );
}
export default React.memo(Privacy);

================
File: screens/AccountStack/Privacy/Privacy.types.ts
================
export type MainAccountProps = {
  onPressHelp?: () => void;
};

================
File: screens/AccountStack/Privacy/index.ts
================
import Privacy from './Privacy';

export { Privacy };

================
File: screens/AccountStack/Privacy/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Psmall,
  },
});
export default styles;

================
File: screens/AccountStack/Profile/Profile.tsx
================
import React from 'react';
import { Image, TouchableOpacity, View } from 'react-native';

import styles from './styles';

import { TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment } from '@/utils';

function Profile() {
  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <View style={styles.profileContainer}>
        <View style={styles.upperContainer}>
          <View style={styles.imageContainer}>
            <Image
              style={styles.imgResponsive}
              source={require('@/assets/avatar.png')}
              resizeMode="cover"
            />
          </View>
          <View style={[styles.flex, styles.subContainer]}>
            <View style={styles.profileInfo}>
              <TouchableOpacity
                activeOpacity={1}
                style={styles.following}
                // onPress={() => navigation.navigate('Network', { screen: 'Following' })}
              >
                <TextDefault textColor={COLORS.fontMainColor} H3 bold>
                  {/* {profile.following.length} */}
                  10
                </TextDefault>
                <TextDefault textColor={COLORS.fontSecondColor} light uppercase>
                  Following
                </TextDefault>
              </TouchableOpacity>
              <TouchableOpacity
                activeOpacity={1}
                style={styles.follower}
                // onPress={() => navigation.navigate('Network', { screen: 'Followers' })}
              >
                <TextDefault textColor={COLORS.fontMainColor} H3 bold>
                  {/* {profile.followers.length} */}
                  20
                </TextDefault>
                <TextDefault textColor={COLORS.fontSecondColor} light uppercase>
                  Followers
                </TextDefault>
              </TouchableOpacity>
            </View>
            <TouchableOpacity
              style={styles.editButton}
              // onPress={() => navigation.navigate('EditProfile')}
            >
              <TextDefault textColor={COLORS.buttonbackground}>Edit Profile</TextDefault>
            </TouchableOpacity>
          </View>
        </View>
        <TextDefault H4 bold style={[alignment.MBxSmall, alignment.PLsmall, alignment.MTsmall]}>
          {/* {profile.name} */}
          Kashaf
        </TextDefault>
      </View>
    </View>
  );
}

export default React.memo(Profile);

================
File: screens/AccountStack/Profile/index.ts
================
import Profile from './Profile';

export { Profile };

================
File: screens/AccountStack/Profile/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  subContainer: {
    alignItems: 'center',
  },
  infoContainer: {
    flexDirection: 'row',
    backgroundColor: 'blue',
    ...alignment.Pmedium,
  },
  profileContainer: {
    borderBottomColor: COLORS.medHorizontalLine,
    borderBottomWidth: scale(2),
    ...alignment.Psmall,
  },
  upperContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  imageContainer: {
    backgroundColor: COLORS.containerBox,
    width: scale(90),
    height: scale(90),
    borderRadius: scale(45),
    overflow: 'hidden',
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  profileInfo: {
    flexDirection: 'row',
  },
  following: {
    flex: 1,
    alignItems: 'center',
    borderRightColor: COLORS.horizontalLine,
    borderRightWidth: StyleSheet.hairlineWidth,
  },
  follower: {
    flex: 1,
    alignItems: 'center',
  },
  editButton: {
    width: '85%',
    borderWidth: scale(1),
    borderColor: COLORS.buttonbackground,
    borderRadius: scale(5),
    backgroundColor: 'transparent',
    alignItems: 'center',
    justifyContent: 'center',
    height: scale(30),
    ...alignment.MTsmall,
  },
});

export default styles;

================
File: screens/AccountStack/Settings/Settings.tsx
================
import { Entypo } from '@expo/vector-icons';
import React, { useState, useRef } from 'react';
import { View, TouchableOpacity, Platform } from 'react-native';
import { Modalize } from 'react-native-modalize';

import { SettingsProps } from './Settings.types';
import styles from './styles';

import { DeactivateModal, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function Settings({ onPressPrivacy, onPressNotification }: SettingsProps) {
  const [modalVisible, setModalVisible] = useState(false);
  const modalizeRef = useRef<Modalize>(null);

  function onModalToggle() {
    setModalVisible((prev) => !prev);
  }
  const onClose = () => {
    modalizeRef.current?.close();
  };

  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <TouchableOpacity
        style={styles.smallContainer}
        // onPress={() => navigation.navigate('Notifications')}
        onPress={onPressNotification}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Notifications
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            Recommendations & speical communications
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.smallContainer}
        // onPress={() => navigation.navigate('Privacy')}
        onPress={onPressPrivacy}>
        <View style={[styles.flex]}>
          <TextDefault bold H5 style={alignment.PLlarge}>
            Privacy
          </TextDefault>
          <TextDefault light style={[alignment.PLlarge, alignment.MTxSmall]}>
            Phone number visibility
          </TextDefault>
        </View>
        <Entypo name="chevron-small-right" size={scale(30)} color={COLORS.buttonbackground} />
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.smallContainer}
        onPress={() => {
          // logout();
          // navigation.dispatch(StackActions.popToTop());
        }}>
        <TextDefault bold H5 style={[alignment.PLlarge, styles.flex]}>
          Logout
        </TextDefault>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.smallContainer}
        onPress={async () => {
          modalizeRef.current?.open('top');
        }}>
        <TextDefault bold H5 style={{ color: 'red', paddingLeft: 20 }}>
          Deactivate
        </TextDefault>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.smallContainer}
        onPress={() => {
          // logout();
          // navigation.dispatch(StackActions.popToTop());
        }}>
        <TextDefault bold H5 style={[alignment.PLlarge, styles.flex]}>
          Logout from all devices
        </TextDefault>
      </TouchableOpacity>
      <TouchableOpacity style={styles.smallContainer} onPress={onModalToggle}>
        <TextDefault bold H5 style={[alignment.PLlarge, styles.flex]}>
          Deactivate account and delete my data
        </TextDefault>
      </TouchableOpacity>
      <DeactivateModal modalVisible={modalVisible} onModalToggle={onModalToggle} />
      <Modalize
        ref={modalizeRef}
        adjustToContentHeight
        handlePosition="inside"
        avoidKeyboardLikeIOS={Platform.select({
          ios: true,
          android: true,
        })}
        keyboardAvoidingOffset={2}
        keyboardAvoidingBehavior="height">
        <View style={{ flex: 1, alignItems: 'center' }}>
          <TextDefault bolder H5 style={{ marginTop: 20 }}>
            Are you Sure you want to Delete Your Account?
          </TextDefault>
          <TouchableOpacity
            activeOpacity={0.7}
            style={{
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'red',
              borderRadius: 10,
              width: '70%',
              padding: 15,
              ...alignment.MTlarge,
            }}
            onPress={async () => {
              // await deactivatewithemail();
              // logout();
              // navigation.dispatch(StackActions.popToTop());
            }}>
            <TextDefault center bold style={{ color: 'white' }}>
              Delete Account
            </TextDefault>
          </TouchableOpacity>
          <TouchableOpacity
            activeOpacity={0.7}
            style={{ width: '100%', paddingTop: 30, paddingBottom: 20 }}
            onPress={() => onClose()}>
            <TextDefault center>Cancel</TextDefault>
          </TouchableOpacity>
        </View>
      </Modalize>
    </View>
  );
}
export default React.memo(Settings);

================
File: screens/AccountStack/Settings/Settings.types.ts
================
export type SettingsProps = {
  onPressPrivacy?: () => void;
  onPressNotification?: () => void;
};

================
File: screens/AccountStack/Settings/index.ts
================
import Settings from './Settings';

export { Settings };

================
File: screens/AccountStack/Settings/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22,
  },
  modalView: {
    margin: scale(20),
    width: '85%',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(5),
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    ...alignment.Plarge,
  },
  buttonsRow: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignSelf: 'flex-end',
    ...alignment.PTsmall,
  },
  button: {
    ...alignment.PTmedium,
    ...alignment.PLlarge,
    ...alignment.MLsmall,
  },
  buttonText: {
    borderBottomColor: COLORS.buttonbackground,
    borderBottomWidth: 2,
    ...alignment.PBxSmall,
  },
});
export default styles;

================
File: screens/AccountStack/index.ts
================
import { Authentication } from './Authentication';
import { Help } from './Help';
import { HelpBrowser } from './HelpBrowser';
import { MainAccount } from './MainAccount';
import { Followers, Following } from './Network';
import { Notifications } from './Notifications';
import { OtpVerification } from './OtpVerification';
import { Privacy } from './Privacy';
import { Profile } from './Profile';
import { Settings } from './Settings';

export {
  MainAccount,
  Help,
  Settings,
  Profile,
  Privacy,
  Notifications,
  HelpBrowser,
  Followers,
  Following,
  Authentication,
  OtpVerification,
};

================
File: screens/AdsStack/Favourite/Card.tsx
================
import { FontAwesome } from '@expo/vector-icons';
import React, { useState } from 'react';
import { TouchableOpacity, View, Image } from 'react-native';

import { CardProps } from './Favourite.types';
import styles from './styles';

import { TextDefault, Spinner } from '@/components';
import { COLORS } from '@/constants';
import { scale } from '@/utils';

function Card({
  onPressNavigateToPrductDescription,
  isLoggedIn = false,
  onPressNavigateToRegistration,
  ...props
}: CardProps) {
  const [isLike, isLikeSetter] = useState(false);

  // useEffect(() => {
  //   if (isLoggedIn) {
  //     // isLikeSetter(profile.likes ? !!profile.likes.find((like) => like._id === props._id) : false);
  //   } else {
  //     isLikeSetter(false);
  //   }
  // }, [isLoggedIn]);

  const loadingMutation = false;

  return (
    <TouchableOpacity
      activeOpacity={1}
      style={styles.productCardContainer}
      onPress={() => onPressNavigateToPrductDescription({ product: props })}>
      <View style={styles.topCardContainer}>
        <Image
          source={{ uri: props.images[0] }}
          resizeMode="cover"
          style={styles.imgResponsive}
          defaultSource={require('@/assets/default.png')}
        />
        <View style={styles.heartContainer}>
          <TouchableOpacity
            activeOpacity={0}
            onPress={() => {
              if (isLoggedIn) {
                // mutate({
                //   variables: {
                //     item: props._id,
                //   },
                // });
                isLikeSetter((prev) => !prev);
              } else {
                onPressNavigateToRegistration();
                // navigation.navigate('Registration');
              }
            }}>
            {loadingMutation && (
              <Spinner size="small" spinnerColor={COLORS.spinnerColor1} backColor="transparent" />
            )}
            {isLike && !loadingMutation && (
              <FontAwesome name="heart" size={scale(18)} color={COLORS.black} />
            )}
            {!isLike && !loadingMutation && (
              <FontAwesome name="heart-o" size={scale(18)} color={COLORS.horizontalLine} />
            )}
          </TouchableOpacity>
        </View>
      </View>
      <View style={styles.botCardContainer}>
        <TextDefault numberOfLines={2} textColor={COLORS.fontMainColor}>
          {props.title}
        </TextDefault>
        <TextDefault textColor={COLORS.fontMainColor}>
          {/* {configuration.currencySymbol}  */}
          INR
          {props.price}
        </TextDefault>
      </View>
    </TouchableOpacity>
  );
}

export default React.memo(Card);

================
File: screens/AdsStack/Favourite/Favourite.tsx
================
import React from 'react';
import { FlatList, Image, View } from 'react-native';

import Card from './Card';
import { FavouriteProps } from './Favourite.types';
import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { alignment } from '@/utils';

// const data = [
//     {
//         id: '10',
//         title: 'Japanese 28 inches cycle',
//         price: 'Rs: 22,900',
//         location: 'Peshawar Road, Rawalpindi, Punjab',
//         image: require('../../../../assets/images/products/cycle.jpg')
//     }
// ]

function Favourite({ onPressNavigateToMain, profile }: FavouriteProps) {
  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/favourite.png')} />
        <TextDefault H4 center bold style={alignment.MTlarge}>
          You haven't liked anything yet.
        </TextDefault>
        <TextDefault H5 center light style={alignment.MTsmall}>
          Mark the items that you like and share it with the world!
        </TextDefault>
        <EmptyButton title="Discover" onPress={onPressNavigateToMain} />
      </View>
    );
  }

  return (
    <View style={[styles.flex, styles.mainContainer]}>
      {/* {loadingProfile ? ( */}
      {/* <Spinner spinnerColor={COLORS.spinnerColor1} backColor="transparent" /> */}
      {/* ) : errorProfile ? (
        <TextError
          text={errorProfile.message}
          textColor={COLORS.fontThirdColor}
          style={textStyles.Light}
        />
      ) : ( */}
      <FlatList
        data={profile?.likes || []}
        // ||
        style={styles.flex}
        contentContainerStyle={{ flexGrow: 1 }}
        keyExtractor={(item) => item.id}
        ListEmptyComponent={emptyView}
        numColumns={2}
        renderItem={({ item }) => (
          <Card
            {...item}
            onPressNavigateToPrductDescription={console.log}
            onPressNavigateToRegistration={console.log}
            isLoggedIn
          />
        )}
      />
      {/* )} */}
    </View>
  );
}

export default React.memo(Favourite);

================
File: screens/AdsStack/Favourite/Favourite.types.ts
================
export type FavouriteProps = {
  onPressNavigateToMain: () => void;
  profile: {
    likes: { id: string; images: string[]; title: string; price: string }[];
  };
};

export type CardProps = {
  onPressNavigateToPrductDescription: (s: any) => void;
  isLoggedIn: boolean;
  onPressNavigateToRegistration: () => void;
  images: string[];
  title: string;
  price: string;
};

================
File: screens/AdsStack/Favourite/index.ts
================
import Favourite from './Favourite';

export { Favourite };

================
File: screens/AdsStack/Favourite/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  productCardContainer: {
    marginLeft: '1%',
    marginRight: '1%',
    width: '48%',
    height: scale(200),
    borderWidth: scale(1),
    borderRadius: scale(5),
    backgroundColor: COLORS.containerBox,
    borderColor: COLORS.medHorizontalLine,
    alignItems: 'center',
    ...alignment.PTxSmall,
    ...alignment.PBxSmall,
    ...alignment.MTsmall,
    ...alignment.MBsmall,
  },
  topCardContainer: {
    width: '95%',
    height: '58%',
    backgroundColor: COLORS.containerBox,
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  botCardContainer: {
    width: '95%',
    height: '40%',
    justifyContent: 'space-around',
    ...alignment.PTsmall,
    ...alignment.PLsmall,
  },
  locationBottom: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  heartContainer: {
    position: 'absolute',
    right: scale(5),
    top: scale(5),
    width: scale(32),
    height: scale(32),
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(16),
  },
});
export default styles;

================
File: screens/AdsStack/MainAds/Card.tsx
================
import { FontAwesome, MaterialCommunityIcons } from '@expo/vector-icons';
// import moment from 'moment';
import React, { useState } from 'react';
import { Platform, View, Image } from 'react-native';
import { BaseButton, BorderlessButton, RectButton } from 'react-native-gesture-handler';

import { CardProps } from './MainAds.types';
import styles from './styles';

import { FlashMessage, TextDefault, Spinner } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function Card({
  onPressNavigateToPrductDescription,
  onPressNavigateToSellingForm,
  ...props
}: CardProps) {
  const [deleteBox, setDeletebox] = useState(false);
  const [opacity, setopacity] = useState(1);

  function onBoxToggle() {
    setDeletebox((prev) => !prev);
  }

  function navigateScreen() {
    if (deleteBox) setDeletebox(false);
    else {
      onPressNavigateToPrductDescription({ product: props });
    }
  }

  function updateStatus(status: string) {
    if (props.status !== status) {
      //   mutate({
      //     variables: {
      //       id: props._id,
      //       status: status,
      //     },
      //   });
    } else {
      FlashMessage({ message: 'No Change in status' });
    }
    onBoxToggle();
  }

  function activeState(data: any) {
    if (data) setopacity(0.5);
    else setopacity(1);
  }

  function getDate(date: any) {
    // const formatDate = moment(+date).format('DD MMM YYYY');
    // return formatDate;
    return date;
  }

  function editAd() {
    onBoxToggle();
    onPressNavigateToSellingForm({ editProduct: props });
    // navigation.navigate('SellingForm', { screen: 'SellingForm', params: { editProduct: props } });
  }
  return (
    <>
      <View
        style={[
          styles.adContainer,
          {
            borderLeftColor:
              props.status === 'DEACTIVATED'
                ? COLORS.google
                : props.status === 'ACTIVE'
                  ? COLORS.activeLine
                  : props.status === 'SOLD'
                    ? COLORS.selectedText
                    : COLORS.horizontalLine,
          },
        ]}>
        <BaseButton
          onPress={navigateScreen}
          onActiveStateChange={activeState}
          style={{ opacity: Platform.OS === 'ios' ? opacity : 1 }}>
          <View
            style={[
              styles.dateRow,
              {
                flexDirection: 'row',
                alignItems: 'center',
                ...alignment.PTxSmall,
                ...alignment.PBxSmall,
              },
            ]}>
            <TextDefault
              small
              textColor={COLORS.fontSecondColor}
              uppercase
              style={[styles.flex, alignment.PLsmall, {}]}>
              {'From: '}{' '}
              <TextDefault small bold>
                {getDate(props.createdAt)}
              </TextDefault>
              {/* {' -To: '} <TextDefault bold small>{props.endingDate}</TextDefault> */}
            </TextDefault>
            {/* {!loading ? ( */}
            <BorderlessButton style={alignment.PxSmall} onPress={onBoxToggle}>
              <MaterialCommunityIcons name="dots-vertical" size={scale(20)} color="black" />
            </BorderlessButton>
            {/* ) : ( */}
            <Spinner
              style={{ alignItems: 'flex-end', ...alignment.PxSmall }}
              spinnerColor={COLORS.spinnerColor1}
              size="small"
              backColor="transparent"
            />
            {/* )} */}
          </View>

          <View style={[styles.InfoContainer, { zIndex: 0 }]}>
            <Image
              source={{ uri: props.images[0] }}
              style={styles.imgResponsive}
              defaultSource={require('@/assets/default.png')}
            />
            <View style={[styles.flex, styles.descriptionContainer]}>
              <View>
                <TextDefault bold>{props.title}</TextDefault>
                <TextDefault style={alignment.PTxSmall}>
                  {/* {configuration.currencySymbol}  */}
                  INR
                  {props.price}
                </TextDefault>
              </View>
              <View style={styles.locationRow}>
                <View style={styles.Vline}>
                  <MaterialCommunityIcons
                    name="eye-outline"
                    size={scale(15)}
                    color={COLORS.headerText}
                  />
                  <TextDefault numberOfLines={1} small bold style={styles.locationText}>
                    {'Views:'}{' '}
                    <TextDefault small light>
                      {' '}
                      {props.status === 'PENDING' ? '-' : props.views}
                    </TextDefault>
                  </TextDefault>
                </View>
                <FontAwesome name="heart" size={scale(13)} color={COLORS.headerText} />
                <TextDefault numberOfLines={1} small bold style={styles.locationText}>
                  {'Likes:'}{' '}
                  <TextDefault small light>
                    {' '}
                    {props.likesCount}
                  </TextDefault>
                </TextDefault>
              </View>
            </View>
          </View>
          <View style={styles.statusContainer}>
            <View
              style={[
                styles.statusBox,
                props.status === 'DEACTIVATED'
                  ? styles.deactivateStatus
                  : props.status === 'ACTIVE'
                    ? styles.activeStatus
                    : props.status === 'SOLD'
                      ? styles.soldStatus
                      : styles.pendingStatus,
              ]}>
              <TextDefault
                textColor={
                  props.status === 'PENDING' ||
                  props.status === 'SOLD' ||
                  props.status === 'DEACTIVATED'
                    ? COLORS.white
                    : COLORS.fontMainColor
                }
                uppercase
                small
                bolder>
                {props.status}
              </TextDefault>
            </View>
            <TextDefault style={alignment.MTxSmall}>
              {props.status === 'DEACTIVATED'
                ? 'This ad is currently deactivated'
                : props.status === 'ACTIVE'
                  ? 'This ad is currently live'
                  : 'This ad is being processed and it will be live soon'}
            </TextDefault>
          </View>
          {deleteBox && (
            <View
              style={{
                width: '50%',
                backgroundColor: COLORS.containerBox,
                shadowColor: COLORS.horizontalLine,
                shadowOffset: {
                  width: 1,
                  height: 2,
                },
                shadowOpacity: 0.7,
                shadowRadius: scale(5),
                elevation: 15,
                position: 'absolute',
                right: scale(10),
                top: scale(30),
                zIndex: 1,
              }}>
              <RectButton disallowInterruption={false} style={alignment.Psmall} onPress={editAd}>
                <TextDefault H5 bold uppercase>
                  Edit
                </TextDefault>
              </RectButton>
              <RectButton style={alignment.Psmall} onPress={() => updateStatus('DELETE')}>
                <TextDefault H5 bold uppercase>
                  Delete
                </TextDefault>
              </RectButton>
              <RectButton
                style={alignment.Psmall}
                onPress={() =>
                  updateStatus(props.status === 'DEACTIVATED' ? 'ACTIVE' : 'DEACTIVATED')
                }>
                <TextDefault H5 bold uppercase>
                  {props.status === 'DEACTIVATED' ? 'Activate' : 'Deactivate'}
                </TextDefault>
              </RectButton>
              <RectButton style={alignment.Psmall} onPress={() => updateStatus('SOLD')}>
                <TextDefault H5 bold uppercase>
                  Mark as sold
                </TextDefault>
              </RectButton>
            </View>
          )}
        </BaseButton>
      </View>
    </>
  );
}

export default React.memo(Card);

================
File: screens/AdsStack/MainAds/MainAds.tsx
================
import { Feather } from '@expo/vector-icons';
import React, { useState } from 'react';
import { View, TouchableOpacity, FlatList, RefreshControl, Image } from 'react-native';

import Card from './Card';
import { AdsProps } from './MainAds.types';
import styles from './styles';

import { AddFilter, EmptyButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

function Ads({ refetch, onPressStartSelling, data }: AdsProps) {
  const [visible, setVisible] = useState(false);
  const [filter, setFilter] = useState({
    value: 'ALL',
    title: 'View All',
  });

  function onModalToggle() {
    setVisible((prev) => !prev);
  }

  function search(filter: { value: string; title: string }) {
    const queryData = data?.itemsByUser || [];
    if (filter.value === 'ALL') {
      return queryData;
    } else if (filter.value === 'INACTIVE') {
      const ads = queryData?.filter((item: { status: string }) => {
        if (item.status === 'SOLD' || item.status === 'DEACTIVATED') {
          return item;
        }
      });
      return ads;
    } else {
      const ads = queryData?.filter((item: { status: string }) => {
        if (item.status === filter.value) {
          return item;
        }
      });
      return ads;
    }
  }

  const filteredData = data?.itemsByUser ? search(filter) : [];

  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/ads.png')} />
        <TextDefault H4 center bold style={alignment.MTlarge}>
          You haven't listed anything yet.
        </TextDefault>
        <TextDefault H5 center light style={alignment.MTsmall}>
          Let go of what you don't use anymore
        </TextDefault>
        <EmptyButton title="Start selling" onPress={onPressStartSelling} />
      </View>
    );
  }

  function header() {
    return (
      <TouchableOpacity style={styles.smallContainer} onPress={onModalToggle}>
        <TextDefault bolder H5 style={alignment.PRsmall}>
          {`${filter.title} (${filteredData?.length})`}
        </TextDefault>
        <Feather name="chevron-down" size={scale(15)} color={COLORS.fontSecondColor} />
      </TouchableOpacity>
    );
  }

  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <FlatList
        data={filteredData}
        style={styles.flex}
        contentContainerStyle={{ flexGrow: 1 }}
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={emptyView}
        ListHeaderComponent={header}
        keyExtractor={(item, index) => item.id}
        stickyHeaderIndices={[0]}
        refreshControl={
          <RefreshControl
            // colors={COLORS.spinnerColor}
            refreshing={false}
            onRefresh={() => {
              //   if (networkStatus === 7) {
              refetch();
              //   }
            }}
          />
        }
        renderItem={({ item, index }) => (
          <Card
            {...item}
            onPressNavigateToPrductDescription={console.log}
            onPressNavigateToSellingForm={console.log}
          />
        )}
      />

      <AddFilter visible={visible} onModalToggle={onModalToggle} setFilter={setFilter} />
    </View>
  );
}

export default React.memo(Ads);

================
File: screens/AdsStack/MainAds/MainAds.types.ts
================
export type AdsProps = {
  refetch: () => void;
  onPressStartSelling: () => void;
  data?: {
    itemsByUser: {
      status: string;
      id: string;
      createdAt: string;
      images: string[];
      title: string;
      price: string;
      views: string;
      likesCount: string;
    }[];
  };
};

export type CardProps = {
  onPressNavigateToPrductDescription: (s: any) => void;
  onPressNavigateToSellingForm: (s: any) => void;
  status: string;
  createdAt: string;
  images: string[];
  title: string;
  price: string;
  views: string;
  likesCount: string;
};

================
File: screens/AdsStack/MainAds/index.ts
================
import MainAds from './MainAds';

export { MainAds };

================
File: screens/AdsStack/MainAds/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.themeBackground,
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
  adContainer: {
    ...alignment.Msmall,
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(5),
    borderLeftWidth: scale(3),
    shadowColor: COLORS.shadowColor,
    shadowOffset: {
      width: scale(0.5),
      height: scale(1),
    },
    shadowRadius: scale(1),
    shadowOpacity: 0.6,
    elevation: 5,
  },
  dateRow: {
    backgroundColor: COLORS.bottomTabColor,
    width: '100%',
  },

  InfoContainer: {
    borderRadius: scale(5),
    height: scale(100),
    width: '100%',
    flexDirection: 'row',
    ...alignment.Psmall,
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  imgResponsive: {
    height: '100%',
    width: '30%',
  },
  descriptionContainer: {
    justifyContent: 'space-between',
    ...alignment.PLsmall,
  },
  locationRow: {
    flexDirection: 'row',
    width: '100%',
    alignItems: 'center',
  },
  locationText: {
    flex: 1,
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  Vline: {
    width: '40%',
    borderRightWidth: StyleSheet.hairlineWidth,
    borderRightColor: COLORS.fontMainColor,
    flexDirection: 'row',
    ...alignment.MRlarge,
  },
  statusContainer: {
    ...alignment.Psmall,
  },
  statusBox: {
    width: scale(120),
    height: scale(30),
    borderRadius: scale(15),
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLxSmall,
    ...alignment.PRxSmall,
  },
  activeStatus: {
    backgroundColor: COLORS.activeLine,
  },
  deactivateStatus: {
    backgroundColor: COLORS.google,
  },
  pendingStatus: {
    backgroundColor: COLORS.horizontalLine,
  },
  soldStatus: {
    backgroundColor: COLORS.selectedText,
  },
});
export default styles;

================
File: screens/AdsStack/index.ts
================
import { Favourite } from './Favourite';
import { MainAds } from './MainAds';

export { MainAds, Favourite };

================
File: screens/ChatStack/MainChat/All/All.tsx
================
import { SimpleLineIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { FlashList } from '@shopify/flash-list';
import React, { useState } from 'react';
import { View, TouchableOpacity, Image, ImageSourcePropType } from 'react-native';
import { RectButton } from 'react-native-gesture-handler';

import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const FILTERS = [
  {
    value: 0,
    title: 'All',
  },
  {
    value: 1,
    title: 'Unread',
  },
  {
    value: 2,
    title: 'Important',
  },
];

const MESSAGES = [
  {
    id: 3,
    key: 3,
    name: 'Fatim',
    lastMessage: "It's already sold.",
    duration: '4 days ago',
    adTile: '5 seater sofa set',
    addPic: require('@/assets/cycle.png'),
    imaga: require('@/assets/avatar.png'),
  },
];

function ALL() {
  const [filter, setFilter] = useState(FILTERS[0].value);
  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/email.png')} />
        <TextDefault H4 center bold style={alignment.MTlarge}>
          No messages, yet?
        </TextDefault>
        <TextDefault H5 center light style={alignment.MTsmall}>
          We'll keep messages for any item you're trying to buying in here
        </TextDefault>
        <EmptyButton
          title="Explore the latest ads"
          // onPress={() => navigation.navigate('Main')}
          onPress={() => null}
        />
      </View>
    );
  }

  function header() {
    return (
      <View style={styles.filterContainer}>
        <TextDefault uppercase>QUICK FILTERS</TextDefault>
        <View style={styles.filterRow}>
          {FILTERS.map((item) => (
            <TouchableOpacity
              key={item.value}
              style={[
                styles.boxContainer,
                item.value === filter ? styles.selected : styles.notSelected,
              ]}
              onPress={() => setFilter(item.value)}>
              <TextDefault
                style={item.value === filter ? styles.selectedText : styles.unSelectedText}>
                {item.title}
              </TextDefault>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.flex, styles.mainContainer]}>
      <FlashList
        data={MESSAGES}
        ListHeaderComponent={MESSAGES.length > 0 ? header : null}
        ListEmptyComponent={emptyView}
        ItemSeparatorComponent={() => <View style={styles.seperator} />}
        stickyHeaderIndices={[0]}
        keyExtractor={(item, index) => index.toString()}
        estimatedItemSize={20}
        renderItem={({
          item,
        }: {
          item: {
            addPic: ImageSourcePropType;
            imaga: ImageSourcePropType;
            name: string;
            duration: string;
            adTile: string;
            lastMessage: string;
          };
        }) => (
          <RectButton
            activeOpacity={0.07}
            style={styles.messageContainer}
            // onPress={() => navigation.navigate('LiveChat')}
          >
            <View style={styles.imgResposive}>
              <Image
                style={styles.image}
                source={item.addPic}
                defaultSource={require('@/assets/default.png')}
              />
              <Image
                style={styles.profileImg}
                source={item.imaga}
                defaultSource={require('@/assets/default.png')}
              />
            </View>
            <View style={styles.infoContainer}>
              <View style={styles.infoBox}>
                <View style={styles.messageIcon}>
                  <TextDefault H5 bold style={[styles.flex, alignment.MBxSmall]}>
                    {item.name}
                  </TextDefault>
                  <TextDefault light>{item.duration}</TextDefault>
                </View>
                <View style={styles.messageIcon}>
                  <TextDefault numberOfLines={1} light style={[styles.flex, alignment.MRxSmall]}>
                    {item.adTile}
                  </TextDefault>
                  <MaterialCommunityIcons name="dots-vertical" size={scale(20)} color="black" />
                </View>
                <View style={styles.messageIcon}>
                  <SimpleLineIcons
                    name="envelope"
                    size={scale(15)}
                    color={COLORS.fontSecondColor}
                  />
                  <TextDefault
                    numberOfLines={1}
                    textColor={COLORS.fontSecondColor}
                    style={[alignment.MLxSmall, styles.flex]}>
                    {item.lastMessage}
                  </TextDefault>
                </View>
              </View>
              <View style={styles.line} />
            </View>
          </RectButton>
        )}
      />
    </View>
  );
}

export default React.memo(ALL);

================
File: screens/ChatStack/MainChat/All/index.ts
================
import All from './All';

export { All };

================
File: screens/ChatStack/MainChat/All/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale, textStyles } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  seperator: {
    height: scale(5),
    backgroundColor: 'transparent',
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  filterContainer: {
    backgroundColor: COLORS.containerBox,
    ...alignment.Pmedium,
  },
  filterRow: {
    flexDirection: 'row',
    ...alignment.PTsmall,
  },
  boxContainer: {
    borderWidth: StyleSheet.hairlineWidth,
    borderRadius: scale(20),
    ...alignment.MRxSmall,
    ...alignment.PTsmall,
    ...alignment.PBsmall,
    ...alignment.PRmedium,
    ...alignment.PLmedium,
  },
  notSelected: {
    backgroundColor: COLORS.themeBackground,
    borderColor: COLORS.buttonbackground,
  },
  selected: {
    backgroundColor: COLORS.selected,
    borderColor: COLORS.selectedText,
  },
  unSelectedText: {
    color: COLORS.fontMainColor,
  },
  selectedText: {
    color: COLORS.selectedText,
    ...textStyles.Bold,
  },
  messageContainer: {
    flexDirection: 'row',
    ...alignment.PTmedium,
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  imgResposive: {
    height: scale(50),
    width: scale(50),
    ...alignment.MRlarge,
  },
  image: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  profileImg: {
    position: 'absolute',
    width: scale(30),
    height: scale(30),
    borderRadius: scale(15),
    bottom: -10,
    right: -10,
  },
  infoContainer: {
    flex: 1,
  },
  infoBox: {
    flex: 1,
    ...alignment.PTxSmall,
    ...alignment.MBmedium,
  },
  line: {
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  messageIcon: {
    flexDirection: 'row',
    justifyContent: 'center',
  },
});
export default styles;

================
File: screens/ChatStack/MainChat/Buying/Buying.tsx
================
import React from 'react';
import { Image, View } from 'react-native';

import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { alignment } from '@/utils';

function Buying() {
  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/email.png')} />
        <TextDefault H4 center bold style={alignment.MTlarge}>
          You are not buying anything yet.
        </TextDefault>
        <TextDefault H5 center light style={alignment.MTsmall}>
          Explore the products/items to deal with seller.
        </TextDefault>
        <EmptyButton
          title="Explore"
          // onPress={() => navigation.navigate('Main')}
          onPress={() => null}
        />
      </View>
    );
  }

  return <View style={[styles.flex, styles.mainContainer]}>{emptyView()}</View>;
}

export default React.memo(Buying);

================
File: screens/ChatStack/MainChat/Buying/index.ts
================
import Buying from './Buying';

export { Buying };

================
File: screens/ChatStack/MainChat/Buying/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
});
export default styles;

================
File: screens/ChatStack/MainChat/Selling/Selling.tsx
================
import React from 'react';
import { Image, View } from 'react-native';

import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { alignment } from '@/utils';

function Selling() {
  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/email.png')} />
        <TextDefault H4 center bold style={alignment.MTlarge}>
          No messages, yet?
        </TextDefault>
        <TextDefault H5 center light style={alignment.MTsmall}>
          We'll keep messages for any item you're selling in here
        </TextDefault>

        <EmptyButton title="Start selling" />
      </View>
    );
  }

  return <View style={[styles.flex, styles.mainContainer]}>{emptyView()}</View>;
}

export default React.memo(Selling);

================
File: screens/ChatStack/MainChat/Selling/index.ts
================
import Selling from './Selling';

export { Selling };

================
File: screens/ChatStack/MainChat/Selling/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.PLmedium,
    ...alignment.PRmedium,
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
});
export default styles;

================
File: screens/ChatStack/MainChat/index.ts
================
import { All } from './All';
import { Buying } from './Buying';
import { Selling } from './Selling';

export { All, Buying, Selling };

================
File: screens/ChatStack/index.ts
================
import { All, Buying, Selling } from './MainChat';

export { All, Buying, Selling };

================
File: screens/CurrentLocation/CurrentLocation.tsx
================
import React from 'react';
import { TouchableOpacity, View } from 'react-native';

import { CurrentLocationProps } from './CurrentLocation.types';
import styles from './styles';

import { LocationPermission, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { scale } from '@/utils';

function CurrentLocation({
  style = {
    backgroundColor: COLORS.selectedText,
    paddingTop: 0,
    paddingBottom: 0,
  },
  onPressSetCurrentLocation = () => null,
  onPressSelectLocation = () => null,
}: CurrentLocationProps) {
  return (
    <>
      <View
        style={[
          styles.flex,
          {
            backgroundColor: style.backgroundColor,
            paddingTop: style.paddingTop,
          },
        ]}>
        <View style={[styles.flex, styles.screenBackground]}>
          <View style={styles.descriptionEmpty}>
            <TextDefault textColor={COLORS.dark} bolder center H3>
              OLO uses your location to show the products near you!
            </TextDefault>
          </View>
          <View style={styles.subContainerImage}>
            <View style={styles.imageContainer}>
              <LocationPermission width={scale(300)} height={scale(300)} />
            </View>
            <TouchableOpacity
              activeOpacity={0.7}
              style={styles.emptyButton}
              onPress={onPressSetCurrentLocation}>
              <TextDefault textColor="#fff" bolder center uppercase>
                use current location
              </TextDefault>
            </TouchableOpacity>
            <TouchableOpacity
              activeOpacity={0.7}
              style={styles.linkButton}
              onPress={onPressSelectLocation}>
              <TextDefault textColor={COLORS.dark} H5 bold center>
                Select another location
              </TextDefault>
            </TouchableOpacity>
          </View>
        </View>
      </View>
      <View style={{ paddingBottom: style.paddingBottom }} />
    </>
  );
}

export default CurrentLocation;

================
File: screens/CurrentLocation/CurrentLocation.types.ts
================
export type CurrentLocationProps = {
  style?: {
    backgroundColor: string;
    paddingTop: number;
    paddingBottom: number;
  };
  onPressSetCurrentLocation?: () => void;
  onPressSelectLocation?: () => void;
};

================
File: screens/CurrentLocation/index.ts
================
import CurrentLocation from './CurrentLocation';

export default CurrentLocation;

================
File: screens/CurrentLocation/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { scale, alignment } from '@/utils';

export default StyleSheet.create({
  flex: {
    flex: 1,
  },
  screenBackground: {
    backgroundColor: '#FFF',
  },
  subContainerImage: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.MBlarge,
  },
  image: {
    width: scale(100),
    height: scale(100),
  },
  descriptionEmpty: {
    justifyContent: 'center',
    alignItems: 'center',
    ...alignment.Plarge,
  },
  emptyButton: {
    width: '80%',
    height: '5%',
    backgroundColor: COLORS.spinnerColor1,
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    borderRadius: scale(5),
    ...alignment.MBsmall,
  },
  linkButton: {
    ...alignment.Pmedium,
    width: '80%',
    height: '5%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
    borderWidth: StyleSheet.hairlineWidth,
    borderRadius: scale(5),
    padding: scale(5),
  },
});

================
File: screens/HomeStack/MainHome/Card.tsx
================
import { FontAwesome, SimpleLineIcons } from '@expo/vector-icons';
import React from 'react';
import { TouchableOpacity, View, Image } from 'react-native';

import styles from './styles';

import { TextDefault, Spinner } from '@/components';
import { COLORS } from '@/constants';
import { scale } from '@/utils';

function Card({
  onPressProductDescription,
  images,
  onPressRegistration,
  loading,
  isLike,
  address,
  title,
  price,
}: {
  onPressProductDescription: () => void;
  images: string[];
  onPressRegistration: () => void;
  loading: boolean;
  isLike: boolean;
  address: { address: string };
  title: string;
  price: string;
}) {
  return (
    <TouchableOpacity
      activeOpacity={1}
      style={styles.productCardContainer}
      onPress={() =>
        // navigation.navigate('ProductDescription', {
        //   screen: 'ProductDescription',
        //   params: { product: props },
        // })
        onPressProductDescription()
      }>
      <View style={styles.topCardContainer}>
        <Image
          source={{ uri: images[0] }}
          resizeMode="cover"
          style={styles.imgResponsive}
          defaultSource={require('@/assets/default.png')}
        />
        <TouchableOpacity
          activeOpacity={0}
          onPress={onPressRegistration}
          style={styles.heartContainer}>
          {loading && (
            <Spinner size="small" spinnerColor={COLORS.spinnerColor1} backColor="transparent" />
          )}
          {isLike && !loading && <FontAwesome name="heart" size={scale(18)} color={COLORS.black} />}
          {!isLike && !loading && (
            <FontAwesome name="heart-o" size={scale(18)} color={COLORS.horizontalLine} />
          )}
        </TouchableOpacity>
      </View>
      <View style={styles.botCardContainer}>
        <View>
          <TextDefault textColor={COLORS.fontMainColor} H5 bolder>
            INR{/* {configuration.currencySymbol} */}
            {price}
          </TextDefault>
          <TextDefault textColor={COLORS.fontSecondColor} numberOfLines={1}>
            {title}
          </TextDefault>
        </View>
        <View style={styles.locationBottom}>
          <SimpleLineIcons name="location-pin" size={scale(15)} color={COLORS.buttonbackground} />
          <TextDefault
            textColor={COLORS.fontSecondColor}
            numberOfLines={1}
            light
            small
            style={styles.locationText}>
            {address.address}
          </TextDefault>
        </View>
      </View>
    </TouchableOpacity>
  );
}

export default React.memo(Card);

================
File: screens/HomeStack/MainHome/MainHome.tsx
================
import React, { useState } from 'react';
import { FlatList, Image, RefreshControl, TouchableOpacity, View } from 'react-native';

import Card from './Card';
import styles from './styles';

import { LocationModal, SearchModal, TextDefault, TextError } from '@/components';
import { COLORS } from '@/constants';
import { alignment, textStyles } from '@/utils';

// import Card from './Card/Card';

const COLORS_INDEXES = ['#ffd54d', '#6df8f3', '#ff7a7a', '#d5b09f', '#eccbcb'];

function MainHome({
  loading,
  onPressCategories,
  data,
  onPressSubCategory,
  error,
  setFilters,
  setSearch,
  categoryError,
  categoryData,
  search,
  networkStatus,
  refetch,
}) {
  const [modalVisible, setModalVisible] = useState(false);
  const [searchVisible, setSerachVisible] = useState(false);

  function toggleModal() {
    setModalVisible((prev) => !prev);
  }

  function toggleSearch() {
    setSerachVisible((prev) => !prev);
  }

  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/no-data.png')} />
        <TextDefault H5 center bold style={alignment.MTlarge}>
          No data found.
        </TextDefault>
        <TextDefault center light>
          Please contact with your provider!.
        </TextDefault>
      </View>
    );
  }
  function categoryHeader() {
    return (
      <View style={styles.categoryHeader}>
        <TextDefault H5 bold>
          Browse Categories
        </TextDefault>
        <TouchableOpacity style={styles.rightBtn} onPress={onPressCategories}>
          <TextDefault H5 bolder>
            See All
          </TextDefault>
        </TouchableOpacity>
      </View>
    );
  }

  const items = data?.nearByItems ?? [];

  const searchRestaurants = (searchText: string) => {
    const data: any[] = [];
    items.forEach(
      (item: { title: string; subCategory: { title: string; category: { title: string } } }) => {
        const regex = new RegExp(
          searchText.replace(/[\\[\]()+?.*]/g, (c) => '\\' + c),
          'i'
        );
        const result = item.title.search(regex);
        if (result < 0) {
          const result = item.subCategory.title.search(regex);
          if (result < 0) {
            const result = item.subCategory.category.title.search(regex);
            if (result > -1) data.push(item);
            return;
          }
          data.push(item);
          return;
        }
        data.push(item);
      }
    );
    return data;
  };

  function renderHeader() {
    return (
      <>
        <View style={styles.headerContainer}>
          {categoryHeader()}
          {categoryError ? (
            <TextError
              text={categoryError.message}
              textColor={COLORS.fontThirdColor}
              style={textStyles.Light}
            />
          ) : (
            <FlatList
              data={categoryData ? categoryData.categories.slice(0, 5) : []}
              keyExtractor={(item) => item._id}
              contentContainerStyle={styles.categoryContainer}
              horizontal
              showsHorizontalScrollIndicator={false}
              renderItem={({ item, index }) => (
                <TouchableOpacity
                  activeOpacity={0.5}
                  style={styles.cardContainer}
                  onPress={() =>
                    // navigation.navigate('SubCategories', {
                    //   headerTitle: item.title,
                    //   categoryId: item._id,
                    // })
                    onPressSubCategory()
                  }>
                  <View style={styles.textViewContainer}>
                    <View
                      style={[
                        styles.iconContainer,
                        { backgroundColor: COLORS_INDEXES[index % 5] },
                      ]}>
                      <Image
                        style={styles.imgResponsive}
                        source={{ uri: item.image }}
                        defaultSource={require('@/assets/default.png')}
                      />
                    </View>
                    <TextDefault numberOfLines={1} uppercase small light>
                      {item.title ?? 'Current Location'}
                    </TextDefault>
                  </View>
                </TouchableOpacity>
              )}
            />
          )}
        </View>
        <View style={styles.spacer} />
        <View style={styles.headerTitle}>
          <TextDefault H5 bold>
            All Ads
          </TextDefault>
        </View>
      </>
    );
  }

  return (
    <View style={[styles.flex, styles.container]}>
      {/* Browswer Container */}
      {error ? (
        <TextError
          text={error.message}
          textColor={COLORS.fontThirdColor}
          style={textStyles.Light}
        />
      ) : (
        <FlatList
          data={search ? searchRestaurants(search) : items}
          style={[styles.flex, styles.flatList]}
          contentContainerStyle={{
            flexGrow: 1,
            backgroundColor: COLORS.containerBox,
            ...alignment.PBlarge,
          }}
          keyExtractor={(item) => item._id}
          showsVerticalScrollIndicator={false}
          ListEmptyComponent={emptyView}
          ListHeaderComponent={renderHeader}
          numColumns={2}
          refreshControl={
            <RefreshControl
              colors={[COLORS.spinnerColor1]}
              refreshing={networkStatus === 4}
              onRefresh={() => {
                if (networkStatus === 7) {
                  refetch();
                }
              }}
            />
          }
          renderItem={({ item }) => <Card {...item} />}
        />
      )}

      {/* Modal */}
      <LocationModal
        visible={modalVisible}
        onModalToggle={toggleModal}
        setFilters={setFilters}
        loading={false}
        data={{ zones: [] }}
        onPressStorageLocation={console.log}
      />
      <SearchModal
        // categories={CategoryData?.categories ?? []}
        categories={[]}
        setSearch={setSearch}
        visible={searchVisible}
        onModalToggle={toggleSearch}
      />
    </View>
  );
}

export default MainHome;

================
File: screens/HomeStack/MainHome/index.ts
================
import MainHome from './MainHome';

export { MainHome };

================
File: screens/HomeStack/MainHome/styles.ts
================
import { StyleSheet, Dimensions } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  spacer: {
    backgroundColor: COLORS.themeBackground,
    ...alignment.PBmedium,
  },
  container: {
    backgroundColor: COLORS.themeBackground,
    alignItems: 'center',
    justifyContent: 'center',
  },
  flatList: {
    width: '100%',
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    backgroundColor: COLORS.containerBox,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  iconContainer: {
    width: scale(40),
    height: scale(40),
    borderRadius: scale(20),
    padding: scale(8),
  },
  headerContainer: {
    width: '100%',
    backgroundColor: COLORS.containerBox,
    ...alignment.PTlarge,
  },
  categoryContainer: {
    backgroundColor: COLORS.containerBox,
    flexDirection: 'row',
    ...alignment.PTmedium,
    ...alignment.PBlarge,
    ...alignment.PLlarge,
  },
  cardContainer: {
    width: width * 0.25,
    height: scale(65),
    ...alignment.MRsmall,
  },
  textViewContainer: {
    width: '100%',
    height: '100%',
    justifyContent: 'space-evenly',
    alignItems: 'center',
  },
  categoryHeader: {
    width: '95%',
    alignSelf: 'center',
    justifyContent: 'space-between',
    flexDirection: 'row',
  },
  rightBtn: {
    borderBottomColor: COLORS.fontMainColor,
    borderBottomWidth: scale(2),
  },
  headerTitle: {
    backgroundColor: COLORS.containerBox,
    ...alignment.PTsmall,
    ...alignment.PBsmall,
    ...alignment.PLmedium,
  },
  productCardContainer: {
    marginLeft: '1%',
    marginRight: '1%',
    width: '48%',
    height: scale(200),
    borderWidth: scale(1),
    borderRadius: scale(5),
    borderColor: COLORS.medHorizontalLine,
    alignItems: 'center',
    ...alignment.PTxSmall,
    ...alignment.PBxSmall,
    ...alignment.MTsmall,
    ...alignment.MBsmall,
  },
  topCardContainer: {
    width: '95%',
    height: '58%',
    backgroundColor: COLORS.containerBox,
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  botCardContainer: {
    width: '95%',
    height: '40%',
    justifyContent: 'space-between',
    backgroundColor: COLORS.containerBox,
    ...alignment.PTsmall,
  },
  locationBottom: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  locationText: {
    flex: 1,
    ...alignment.PLxSmall,
  },
  heartContainer: {
    position: 'absolute',
    right: scale(5),
    top: scale(5),
    width: scale(32),
    height: scale(32),
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(16),
  },
});
export default styles;

================
File: screens/HomeStack/index.ts
================
import MainHome from './MainHome/MainHome';

export { MainHome };

================
File: screens/SelectLocation/SelectLocation.tsx
================
import { Ionicons } from '@expo/vector-icons';
import { LocationObjectCoords, PermissionStatus } from 'expo-location';
import { useRef } from 'react';
import { Linking, TouchableOpacity, View } from 'react-native';
import MapView, { PROVIDER_DEFAULT } from 'react-native-maps';

import { SelectLocationProps } from './SelectLocation.types';
import styles, { mapStyle } from './styles';

import { CustomMarker, FlashMessage, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { useLocationPermission } from '@/hooks';

const SelectLocation = ({
  onPanDrag,
  onRegionChangeComplete,
  inset,
  coordinates,
  onPressSelectLocation,
  setLabel,
}: SelectLocationProps) => {
  const mapRef = useRef<MapView>(null);
  const { getCurrentLocation, getLocationPermission } = useLocationPermission();

  const setCurrentLocation = async () => {
    const { status, canAskAgain } = await getLocationPermission();
    if (status !== PermissionStatus.GRANTED && !canAskAgain) {
      FlashMessage({
        message:
          'Tap on this message to open Settings then allow app to use location from permissions.',
        onPress: async () => {
          await Linking.openSettings();
        },
      });
      return;
    }
    const { error, coords, message } = await getCurrentLocation();
    if (error) {
      FlashMessage({
        message: message ?? 'Could not get location',
      });
      return;
    }
    mapRef?.current?.fitToCoordinates([
      {
        latitude: (coords as LocationObjectCoords).latitude,
        longitude: (coords as LocationObjectCoords).longitude,
      },
    ]);
    setLabel('Current Location');
  };

  return (
    <>
      <View style={styles.flex}>
        <MapView
          ref={mapRef}
          initialRegion={coordinates}
          style={{ height: '92%' }}
          provider={PROVIDER_DEFAULT}
          showsTraffic={false}
          customMapStyle={mapStyle}
          onRegionChangeComplete={onRegionChangeComplete}
          onPanDrag={onPanDrag}
        />
        <View
          style={{
            width: 50,
            height: 50,
            position: 'absolute',
            top: '46%',
            left: '50%',
            zIndex: 1,
            translateX: -25,
            translateY: -25,
            justifyContent: 'center',
            alignItems: 'center',
            transform: [{ translateX: -25 }, { translateY: -25 }],
          }}>
          <CustomMarker width={40} height={40} transform={[{ translateY: -20 }]} translateY={-20} />
        </View>
        <TouchableOpacity style={styles.locateBtn} onPress={setCurrentLocation}>
          <Ionicons name="navigate" size={24} color={COLORS.dark} />
        </TouchableOpacity>
        <TouchableOpacity activeOpacity={0.7} style={styles.button} onPress={onPressSelectLocation}>
          <TextDefault textColor={COLORS.buttonText} H4 bold>
            Select Location
          </TextDefault>
        </TouchableOpacity>
      </View>
      <View style={{ paddingBottom: inset.bottom }} />
    </>
  );
};

export default SelectLocation;

================
File: screens/SelectLocation/SelectLocation.types.ts
================
import { MapViewProps } from 'react-native-maps';
import { EdgeInsets } from 'react-native-safe-area-context';

export type SelectLocationProps = {
  onPanDrag: () => void;
  onRegionChangeComplete: MapViewProps['onRegionChangeComplete'];
  inset: EdgeInsets;
  coordinates: MapViewProps['initialRegion'];
  onPressSelectLocation: () => void;
  setLabel: (label: string) => void;
};

================
File: screens/SelectLocation/index.ts
================
import SelectLocation from './SelectLocation';

export default SelectLocation;

================
File: screens/SelectLocation/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { horizontalScale, verticalScale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  button: {
    width: '100%',
    height: '8%',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: COLORS.buttonbackground,
  },
  overlay: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.2)',
  },
  locateBtn: {
    position: 'absolute',
    top: verticalScale(10),
    right: horizontalScale(20),
    backgroundColor: '#fff',
    padding: 10,
    borderRadius: 10,
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    shadowOffset: {
      width: 1,
      height: 10,
    },
  },
});

export const mapStyle = [
  {
    elementType: 'geometry',
    stylers: [
      {
        color: '#242f3e',
      },
    ],
  },
  {
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#746855',
      },
    ],
  },
  {
    elementType: 'labels.text.stroke',
    stylers: [
      {
        color: '#242f3e',
      },
    ],
  },
  {
    featureType: 'administrative.locality',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#d59563',
      },
    ],
  },
  {
    featureType: 'poi',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#d59563',
      },
    ],
  },
  {
    featureType: 'poi.park',
    elementType: 'geometry',
    stylers: [
      {
        color: '#263c3f',
      },
    ],
  },
  {
    featureType: 'poi.park',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#6b9a76',
      },
    ],
  },
  {
    featureType: 'road',
    elementType: 'geometry',
    stylers: [
      {
        color: '#38414e',
      },
    ],
  },
  {
    featureType: 'road',
    elementType: 'geometry.stroke',
    stylers: [
      {
        color: '#212a37',
      },
    ],
  },
  {
    featureType: 'road',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#9ca5b3',
      },
    ],
  },
  {
    featureType: 'road.highway',
    elementType: 'geometry',
    stylers: [
      {
        color: '#746855',
      },
    ],
  },
  {
    featureType: 'road.highway',
    elementType: 'geometry.stroke',
    stylers: [
      {
        color: '#1f2835',
      },
    ],
  },
  {
    featureType: 'road.highway',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#f3d19c',
      },
    ],
  },
  {
    featureType: 'transit',
    elementType: 'geometry',
    stylers: [
      {
        color: '#2f3948',
      },
    ],
  },
  {
    featureType: 'transit.station',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#d59563',
      },
    ],
  },
  {
    featureType: 'water',
    elementType: 'geometry',
    stylers: [
      {
        color: '#17263c',
      },
    ],
  },
  {
    featureType: 'water',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#515c6d',
      },
    ],
  },
  {
    featureType: 'water',
    elementType: 'labels.text.stroke',
    stylers: [
      {
        color: '#17263c',
      },
    ],
  },
];

export default styles;

================
File: screens/SellStack/Categories/Categories.tsx
================
import { Entypo } from '@expo/vector-icons';
import React from 'react';
import { FlatList, TouchableOpacity, View, Image } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { CategoriesProps } from './Categories.types';
import styles from './styles';

import { TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const category = [
  { id: '0', title: 'Mobiles', image: require('@/assets/categoryIcon/mobile.png') },
  { id: '1', title: 'Vehicles', image: require('@/assets/categoryIcon/car.png') },
  { id: '2', title: 'Animals', image: require('@/assets/categoryIcon/pet(1).png') },
  { id: '3', title: 'Kids', image: require('@/assets/categoryIcon/stroller.png') },
  {
    id: '4',
    title: 'Property For Sale',
    image: require('@/assets/categoryIcon/sale.png'),
  },
  {
    id: '5',
    title: 'Electronics',
    image: require('@/assets/categoryIcon/monitor.png'),
  },
  { id: '6', title: 'Bikes', image: require('@/assets/categoryIcon/motorcycle.png') },
  { id: '7', title: 'Jobs', image: require('@/assets/categoryIcon/work.png') },
];

// const category = [];

function Categories({ onPressCategory }: CategoriesProps) {
  function emptyView() {
    return (
      <View style={[styles.flex, styles.emptyContainer]}>
        <Image style={styles.emptyImage} source={require('@/assets/no-data.png')} />
        <TextDefault H5 center bold style={alignment.MTlarge}>
          No category found.
        </TextDefault>
      </View>
    );
  }

  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      <View style={[styles.flex, styles.container]}>
        <FlatList
          data={category}
          style={styles.flatList}
          contentContainerStyle={styles.categoryContainer}
          ListEmptyComponent={emptyView}
          showsHorizontalScrollIndicator={false}
          ItemSeparatorComponent={() => <View style={styles.spacer} />}
          renderItem={({ item }) => (
            <TouchableOpacity
              activeOpacity={0.5}
              style={styles.categoryRow}
              // onPress={() => navigation.navigate('SubCategories', { headerTitle: item.title })}
              onPress={() => onPressCategory({ id: item.id, title: item.title })}>
              <View style={styles.rowContainer}>
                <View style={styles.image}>
                  <Image
                    style={styles.imgResponsive}
                    source={item.image}
                    defaultSource={require('@/assets/default.png')}
                  />
                </View>
                <TextDefault H5 style={styles.fontText}>
                  {item.title}
                </TextDefault>
                <View style={styles.rightIcon}>
                  <Entypo
                    name="chevron-small-right"
                    size={scale(20)}
                    color={COLORS.buttonbackground}
                  />
                </View>
              </View>
            </TouchableOpacity>
          )}
        />
      </View>
    </SafeAreaView>
  );
}

export default React.memo(Categories);

================
File: screens/SellStack/Categories/Categories.types.ts
================
export type CategoriesProps = {
  onPressCategory: (category: { id: string; title: string }) => void;
};

================
File: screens/SellStack/Categories/index.ts
================
import Categories from './Categories';

export { Categories };

================
File: screens/SellStack/Categories/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  spacer: {
    ...alignment.PTxSmall,
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  container: {
    backgroundColor: COLORS.themeBackground,
    alignItems: 'center',
    justifyContent: 'center',
  },
  flatList: {
    width: '100%',
    backgroundColor: COLORS.themeBackground,
  },
  emptyContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyImage: {
    width: scale(150),
    height: scale(150),
  },
  categoryContainer: {
    flexGrow: 1,
    ...alignment.PTmedium,
    ...alignment.PBlarge,
  },
  categoryRow: {
    height: scale(60),
    justifyContent: 'center',
    alignItems: 'center',
  },
  rowContainer: {
    width: '95%',
    height: '100%',
    flexDirection: 'row',
    alignItems: 'center',
  },
  image: {
    width: scale(36),
    height: scale(36),
    backgroundColor: COLORS.containerBox,
    borderRadius: scale(18),
    padding: scale(7),
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  fontText: {
    flex: 1,
    ...alignment.PLlarge,
  },
  rightIcon: {
    width: scale(25),
    alignItems: 'flex-end',
  },
});
export default styles;

================
File: screens/SellStack/LocationConfirm/LocationConfirm.tsx
================
/* eslint-disable import/order */
import React, { useEffect, useState } from 'react';
import { KeyboardAvoidingView, Platform, ScrollView, TextInput, View } from 'react-native';
import MapView, { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from 'react-native-maps';

// import { OutlinedTextField } from 'react-native-material-textfield';

import { SafeAreaView } from 'react-native-safe-area-context';

import styles from './styles';

import { CustomMarker, EmptyButton } from '@/components';
import { verticalScale } from '@/utils';
import { LocationConfirmProps } from './LocationConfirm.types';

// const label_values = [
//   {
//     title: 'Home',
//     value: 'Home',
//   },
//   {
//     title: 'Work',
//     value: 'Work',
//   },
//   {
//     title: 'Other',
//     value: 'Other',
//   },
// ];

const LATITUDE = 33.7001019;
const LONGITUDE = 72.9735978;
const LATITUDE_DELTA = 0.0022;
const LONGITUDE_DELTA = 0.0021;

function LocationConfirm({
  onPressFullMap,
  defaultFormData,
  uploadImage,
  onCreateAd,
}: LocationConfirmProps) {
  // const addressRef = useRef();
  const [delivery_address, setDeliveryAddress] = useState('');
  // const [loader, setLoader] = useState(false);
  const [, setDeliveryAddressError] = useState<string | null>(null);
  const [formData, setFormData] = useState<{
    editStatus: string;
    image: string;
    newImage: string;

    id: string;
    location: {
      value: string;
    };
    title: string;
    description: string;
    condition: string;
    subCategory: string;
    price: string;
  } | null>(null);
  // const [locLoading] = useState(true);
  const [region] = useState({
    latitude: LATITUDE,
    latitudeDelta: LATITUDE_DELTA,
    longitude: LONGITUDE,
    longitudeDelta: LONGITUDE_DELTA,
  });

  useEffect(() => {
    didFocus();
  }, []);

  async function didFocus() {
    if (defaultFormData) setFormData(defaultFormData);
  }

  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      {/* <View style={[styles.flex, styles.mainContainer]}> */}
      {/* <View style={styles.smallContainer}> */}
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.flex}>
        <View style={[styles.flex, styles.mainContainer]}>
          <View style={styles.mapContainer}>
            <MapView
              style={{ flex: 1 }}
              scrollEnabled={false}
              zoomEnabled={false}
              zoomControlEnabled={false}
              rotateEnabled={false}
              cacheEnabled
              initialRegion={{
                latitude: LATITUDE,
                latitudeDelta: LATITUDE_DELTA,
                longitude: LONGITUDE,
                longitudeDelta: LONGITUDE_DELTA,
              }}
              region={region}
              provider={Platform.OS === 'android' ? PROVIDER_GOOGLE : PROVIDER_DEFAULT}
              onPress={() => {
                onPressFullMap?.({
                  latitude: region.latitude,
                  longitude: region.longitude,
                });
                // navigation.navigate('FullMap', {
                //   currentScreen: 'LocationConfirm',
                //   title: 'Map',
                // });
              }}
            />
            <View
              style={{
                width: 50,
                height: 50,
                position: 'absolute',
                top: '50%',
                left: '50%',
                zIndex: 1,
                translateX: -25,
                translateY: -25,
                justifyContent: 'center',
                alignItems: 'center',
                transform: [{ translateX: -25 }, { translateY: -25 }],
              }}>
              <CustomMarker
                width={40}
                height={40}
                transform={[{ translateY: -20 }]}
                translateY={-20}
              />
            </View>
          </View>
          <ScrollView style={styles.flex} contentContainerStyle={{ flexGrow: 1 }}>
            <View style={styles.subContainer}>
              <View style={styles.upperContainer}>
                <View style={styles.addressContainer}>
                  <TextInput
                    clearButtonMode="always"
                    // error={delivery_address_error}
                    // ref={addressRef}
                    value={delivery_address}
                    // label="Full Delivery Address"
                    // labelFontSize={scale(12)}
                    // fontSize={scale(12)}
                    // baseColor="rgb(0, 0, 0)"
                    // maxLength={100}
                    // labelOffset={{ y1: -5 }}
                    // tintColor={!delivery_address_error ? 'rgb(255, 85, 10)' : 'red'}
                    // labelTextStyle={{
                    //   fontSize: scale(12),
                    //   paddingTop: scale(1),
                    // }}
                    onChangeText={(text: string) => {
                      setDeliveryAddress(text);
                    }}
                    onBlur={() => {
                      setDeliveryAddressError(
                        !delivery_address.trim().length ? 'Delivery address is required' : null
                      );
                    }}
                  />
                  <View style={{ marginTop: verticalScale(20) }} />
                </View>
              </View>
            </View>
          </ScrollView>
        </View>
      </KeyboardAvoidingView>
      {/* </View> */}

      <View style={styles.buttonView}>
        {/* {!delivery_address ? (
          <EmptyButton
            // loading={locLoading}
            disabled={!locLoading}
            title={formData?.editStatus ? 'Update Ad' : 'Save Ad'}
          />
        ) : ( */}
        <EmptyButton
          // loading={loader}
          title={formData?.editStatus ? 'Update Ad' : 'Save Ad'}
          onPress={async () => {
            // setLoader(true);
            let imageUrl = formData?.image;
            if (formData?.newImage) {
              imageUrl = (await uploadImage?.(formData.image)) || '';
            }
            const address = {
              latitude: region.latitude.toString(),
              longitude: region.longitude.toString(),
              address: delivery_address,
            };
            if (formData) {
              console.log(formData.location.value);
              onCreateAd?.({
                _id: formData.id,
                zone: formData.location.value,
                address,
                images: [imageUrl || ''],
                title: formData.title,
                description: formData.description,
                condition: formData.condition,
                subCategory: formData.subCategory,
                price: Number(formData.price),
              });
            }
          }}
        />
        {/* )} */}
      </View>

      {/* </View> */}
    </SafeAreaView>
  );
}
export default React.memo(LocationConfirm);

================
File: screens/SellStack/LocationConfirm/LocationConfirm.types.ts
================
export type LocationConfirmProps = {
  onPressFullMap?: (s: { latitude: number; longitude: number }) => void;
  defaultFormData?: any;
  uploadImage?: (s: string) => Promise<string>;
  onCreateAd?: (s: {
    _id: string;
    zone: string;
    address: { latitude: string; longitude: string; address: string };
    images: string[];
    title: string;
    description: string;
    condition: string;
    subCategory: string;
    price: number;
  }) => void;
};

================
File: screens/SellStack/LocationConfirm/index.ts
================
import LocationConfirm from './LocationConfirm';

export { LocationConfirm };

================
File: screens/SellStack/LocationConfirm/styles.ts
================
import { Dimensions, Platform, StatusBar, StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { verticalScale, scale, alignment } from '@/utils';

const { height } = Dimensions.get('window');

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },

  subContainer: {
    flex: 1,
    alignItems: 'center',
    paddingTop: scale(20),
    justifyContent: 'space-between',
  },
  upperContainer: {
    width: '90%',
    alignItems: 'center',
  },
  addressContainer: {
    padding: scale(10),
    paddingTop: 0,
    width: '100%',
  },
  labelButtonContainer: {
    padding: scale(5),
    width: '100%',
  },
  labelTitleContainer: {
    paddingTop: scale(10),
    paddingBottom: scale(10),
  },
  labelText: {
    fontSize: scale(14),
  },
  buttonInline: {
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  labelButton: {
    width: '30%',
    borderWidth: 1,
    borderColor: 'grey',
    borderRadius: 30,
    padding: scale(5),
    justifyContent: 'center',
  },
  labelButtonText: {
    fontSize: scale(12),
    textAlign: 'center',
  },
  activeLabel: {
    width: '30%',
    borderWidth: 1,
    borderRadius: 30,
    padding: scale(5),
    justifyContent: 'center',
    color: COLORS.primary,
    borderColor: COLORS.primary,
  },
  activeButtonText: {
    fontSize: scale(12),
    textAlign: 'center',
    color: COLORS.primary,
  },
  saveBtnContainer: {
    width: '100%',
    height: verticalScale(40),
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'flex-end',
    backgroundColor: COLORS.black,
  },
  saveBtnText: {
    color: COLORS.primary,
    fontSize: scale(16),
  },
  fakeMarkerContainer: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    marginLeft: -24,
    marginTop: -58,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
  },
  marker: {
    height: 48,
    width: 48,
  },
  mapContainer: {
    height: '40%',
    backgroundColor: 'black',
  },
  alertboxRed: {
    marginTop:
      Platform.OS === 'ios' ? height * 0.1 : height * 0.1 - (StatusBar?.currentHeight || 0),
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: 'rgba(0, 0, 0, 0.3)',
    shadowOffset: {
      width: 0,
      height: 6,
    },
  },
  alertboxGreen: {
    backgroundColor: 'rgba(49,169,96,0.85)',
    marginTop:
      Platform.OS === 'ios' ? height * 0.1 : height * 0.1 - (StatusBar?.currentHeight || 0),
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: 'rgba(0, 0, 0, 0.3)',
    shadowOffset: {
      width: 0,
      height: 6,
    },
  },
  buttonView: {
    width: '90%',
    alignSelf: 'center',
    ...alignment.PBsmall,
  },

  mainContainer: {
    backgroundColor: COLORS.themeBackground,
    justifyContent: 'space-between',
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  inputBorder: {
    flexDirection: 'row',
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.PBxSmall,
    ...alignment.Mlarge,
  },

  leftText: {
    borderRightColor: COLORS.fontSecondColor,
    borderRightWidth: StyleSheet.hairlineWidth,
    ...alignment.PRxSmall,
    ...alignment.MRmedium,
  },
  smallContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
    ...alignment.Pmedium,
  },
});

export default styles;

================
File: screens/SellStack/MainSell/MainSell.tsx
================
import { FlashList } from '@shopify/flash-list';
import React from 'react';
import { TouchableOpacity, View, Image } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { MainSellProps } from './MainSell.types';
import styles from './styles';

import { TextDefault } from '@/components';

const MOCK_CATEGORIES = [
  {
    id: '1',
    title: 'Automobiles',
    image: require('@/assets/categories/car.png'),
  },
  {
    id: '2',
    title: 'Electronics',
    image: require('@/assets/categories/electronics.png'),
  },
  {
    id: '3',
    title: 'Home Appliances',
    image: require('@/assets/categories/home-appliances.png'),
  },
  {
    id: '4',
    title: 'Tools',
    image: require('@/assets/categories/tools.png'),
  },
];

function MainSell({ onPressCategory }: MainSellProps) {
  return (
    <SafeAreaView edges={['bottom']} style={styles.flex}>
      {/* {loading ? ( */}
      {/* <Spinner spinnerColor={colors.spinnerColor1} backColor={'transparent'} /> */}
      {/* ) : error ? ( */}
      {/* <TextError text={error.message} /> */}
      {/* ) : ( */}
      <FlashList
        //   style
        //   data={data ? data.categories : []}
        data={MOCK_CATEGORIES}
        // style={[styles.flex, styles.container]}

        contentContainerStyle={styles.flatListContent}
        ItemSeparatorComponent={() => <View style={styles.seperator} />}
        keyExtractor={(item) => item.id}
        numColumns={2}
        estimatedItemSize={20}
        horizontal={false}
        renderItem={({ item, index }) => (
          <TouchableOpacity
            style={[styles.mainContainer, index % 2 === 0 && styles.borderStyle]}
            onPress={() =>
              onPressCategory({
                title: item.title,
                id: item.id,
              })
            }>
            <View style={styles.imageView}>
              <Image
                style={styles.imgResponsive}
                source={item.image}
                resizeMode="cover"
                defaultSource={require('@/assets/default.png')}
              />
            </View>
            <TextDefault light center>
              {item.title}
            </TextDefault>
          </TouchableOpacity>
        )}
      />
      {/* )} */}
    </SafeAreaView>
  );
}

export default MainSell;

================
File: screens/SellStack/MainSell/MainSell.types.ts
================
export type MainSellProps = {
  onPressCategory: (category: { id: string; title: string }) => void;
};

================
File: screens/SellStack/MainSell/index.ts
================
import MainSell from './MainSell';

export { MainSell };

================
File: screens/SellStack/MainSell/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  container: {
    backgroundColor: COLORS.themeBackground,
    // alignItems: 'center',
    // justifyContent: 'center',
  },
  flatListContent: {
    // flexGrow: 1,
    // flex: 1,
    // width: '100%',
    // width: '100%',
    // backgroundColor: 'orange',
    // ...alignment.Plarge,
  },
  mainContainer: {
    // backgroundColor: 'yellow',
    justifyContent: 'center',
    alignItems: 'center',
    width: '50%',
    height: scale(100),
    // flex: 1 / 2,
  },
  borderStyle: {
    borderRightColor: COLORS.medHorizontalLine,
    borderRightWidth: scale(1),
  },
  imageView: {
    height: scale(30),
    width: scale(30),
    ...alignment.MBsmall,
  },
  imgResponsive: {
    flex: 1,
    width: undefined,
    height: undefined,
  },
  seperator: {
    height: scale(1),
    backgroundColor: COLORS.medHorizontalLine,
  },
});
export default styles;

================
File: screens/SellStack/Price/Price.tsx
================
import React, { useEffect, useState } from 'react';
import {
  Keyboard,
  KeyboardAvoidingView,
  Platform,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { PriceProps } from './Price.types';
import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { scale, textStyles } from '@/utils';

// import ConfigurationContext from '../../../context/configuration';

function Price({ defaultFormData, onPressNext }: PriceProps) {
  const [margin, marginSetter] = useState(false);
  const [price, setPrice] = useState('');
  const [focus, setFocus] = useState(false);
  const [adColor, setAdColor] = useState(COLORS.fontPlaceholder);
  // const [, setFormData] = useState<>(null);
  // const configuration = useContext(ConfigurationContext);

  useEffect(() => {
    didFocus();
  }, []);

  async function didFocus() {
    if (defaultFormData) {
      // setFormData(defaultFormData);
      setPrice(defaultFormData.price);
    }
  }

  useEffect(() => {
    Keyboard.addListener('keyboardDidShow', _keyboardDidShow);
    Keyboard.addListener('keyboardDidHide', _keyboardDidHide);

    // cleanup function
    return () => {
      Keyboard.removeAllListeners('keyboardDidShow');
      Keyboard.removeAllListeners('keyboardDidHide');
    };
  }, []);

  function _keyboardDidShow() {
    marginSetter(true);
  }
  function _keyboardDidHide() {
    marginSetter(false);
  }

  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      <KeyboardAvoidingView
        style={[styles.flex]}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
        <TouchableOpacity
          activeOpacity={1}
          onPress={Keyboard.dismiss}
          style={[
            styles.flex,
            styles.mainContainer,
            { paddingBottom: Platform.OS === 'ios' ? (margin ? scale(100) : 0) : 0 },
          ]}>
          <View style={styles.flex}>
            <View style={[styles.inputBorder, { borderBottomColor: adColor }]}>
              <View style={styles.leftText}>
                <TextDefault textColor={COLORS.fontSecondColor} H5>
                  {/* {configuration.currency ?? 'RS'} */}
                  INR
                </TextDefault>
              </View>
              <TextInput
                style={[styles.flex, { ...textStyles.H4 }]}
                textAlignVertical="center"
                placeholder={focus ? '' : 'Price'}
                placeholderTextColor={COLORS.fontThirdColor}
                defaultValue={price.toString()}
                keyboardType="phone-pad"
                onFocus={() => {
                  setFocus(true);
                  setAdColor(COLORS.selectedText);
                }}
                onBlur={() => {
                  setFocus(false);
                  setAdColor(COLORS.fontThirdColor);
                }}
                onChangeText={(text) => setPrice(text)}
              />
            </View>
          </View>
          <View style={styles.buttonView}>
            <EmptyButton
              disabled={!price}
              title="Next"
              onPress={async () => {
                if (price) {
                  // await AsyncStorage.setItem('formData', JSON.stringify({ ...formData, price }));
                  onPressNext();
                }
              }}
            />
          </View>
        </TouchableOpacity>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
export default React.memo(Price);

================
File: screens/SellStack/Price/Price.types.ts
================
export type PriceProps = { defaultFormData: { price: string }; onPressNext: () => void };

================
File: screens/SellStack/Price/index.ts
================
import Price from './Price';

export { Price };

================
File: screens/SellStack/Price/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  inputBorder: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    ...alignment.PBxSmall,
    ...alignment.Mlarge,
  },
  buttonView: {
    width: '90%',
    alignSelf: 'center',
    ...alignment.PBsmall,
  },
  leftText: {
    borderRightColor: COLORS.fontSecondColor,
    borderRightWidth: StyleSheet.hairlineWidth,
    justifyContent: 'center',
    ...alignment.PRxSmall,
    ...alignment.MRmedium,
  },
});
export default styles;

================
File: screens/SellStack/SellingForm/SellingForm.tsx
================
import { Entypo } from '@expo/vector-icons';
import React, { useEffect, useState } from 'react';
import {
  Keyboard,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { SellingFormProps } from './SellingForm.types';
import styles from './styles';

import { EmptyButton, TextDefault, ZoneModal } from '@/components';
import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const CONDITIONS = [
  {
    value: 'new',
    title: 'New',
  },
  {
    value: 'used',
    title: 'Used',
  },
];

const items = [
  { id: '1', label: 'Item 1', value: 'item1', title: 'item1' },
  { id: '2', label: 'Item 2', value: 'item2', title: 'item2' },
];

function SellingForm({ editProduct, onPressNext }: SellingFormProps) {
  const [margin, marginSetter] = useState(false);
  const [condition, setCondition] = useState<string | null>(null);
  const [adColor, setAdColor] = useState(COLORS.fontMainColor);
  const [descriptionColor, setDescriptionColor] = useState(COLORS.fontMainColor);
  const [locationColor] = useState(COLORS.fontMainColor);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [location, setLocation] = useState<{
    value: string;
    label: string;
  }>({ value: '', label: '' });
  const [titleError, setTitleError] = useState<string | null>(null);
  const [conditionError, setConditionError] = useState<string | null>(null);
  const [descriptionError, setDescriptionError] = useState<string | null>(null);
  const [modalVisible, setModalVisible] = useState(false);

  useEffect(() => {
    if (editProduct) {
      didFocus();
    }
  }, []);

  async function didFocus() {
    setTitle(editProduct?.title || '');
    setDescription(editProduct?.description || '');
    setLocation({ value: editProduct?.zone.id || '', label: editProduct?.zone?.title || '' });
    setCondition(editProduct?.condition || '');
  }

  useEffect(() => {
    Keyboard.addListener('keyboardDidShow', _keyboardDidShow);
    Keyboard.addListener('keyboardDidHide', _keyboardDidHide);

    // cleanup function
    return () => {
      Keyboard.removeAllListeners('keyboardDidShow');
      Keyboard.removeAllListeners('keyboardDidHide');
    };
  }, []);

  // useEffect(() => {
  //   async () => {
  //     // await AsyncStorage.setItem('formData', null);
  //   };
  // }, []);

  function _keyboardDidShow() {
    marginSetter(true);
  }
  function _keyboardDidHide() {
    marginSetter(false);
  }

  function toggleModal() {
    setModalVisible((prev) => !prev);
  }

  // function validate() {
  //   let result = true;
  //   if (title.length < 1) {
  //     setTitleError('This is mandatory. Please complete the required field.');
  //     result = false;
  //   }
  //   if (description.length < 1) {
  //     setDescriptionError('This is mandatory. Please complete the required field.');
  //     result = false;
  //   }
  //   if (condition === null) {
  //     setConditionError('This is mandatory. Please complete the required field.');
  //     result = false;
  //   }
  //   if (location === '') {
  //     setLocationError('This is mandatory. Please complete the required field.');
  //     result = false;
  //   }
  //   return result;
  // }

  // if (loading) {
  //   return <Spinner spinnerColor={COLORS.spinnerColor1} backColor={'transparent'} />;
  // }

  // if (error) {
  //   return <TextError text={error.message} />;
  // }
  // let zone = null;
  // if (data) {
  //   zone = [];
  // }

  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      <KeyboardAvoidingView
        style={[styles.flex, styles.mainContainer]}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        contentContainerStyle={{ flexGrow: 1 }}>
        <ScrollView
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
          contentContainerStyle={{ flexGrow: 1, paddingBottom: margin ? scale(75) : 0 }}
          style={[styles.flex, styles.mainContainer]}>
          <View style={[styles.flex, { justifyContent: 'space-between' }]}>
            <View>
              <View style={[styles.width100, styles.subContainer]}>
                <TextDefault
                  textColor={conditionError ? COLORS.google : COLORS.fontMainColor}
                  H5
                  bold
                  style={styles.width100}>
                  Condition *
                </TextDefault>
                <View style={styles.subContainerRow}>
                  {CONDITIONS.map((item, index) => (
                    <TouchableOpacity
                      key={item.value}
                      style={[
                        styles.conditionBox,
                        styles.boxContainer,
                        item.value === condition ? styles.selected : styles.notSelected,
                      ]}
                      onPress={() => {
                        setCondition(item?.value || '');
                        setConditionError(null);
                      }}>
                      <TextDefault
                        style={
                          item.value === condition ? styles.selectedText : styles.unSelectedText
                        }>
                        {item.title}
                      </TextDefault>
                    </TouchableOpacity>
                  ))}
                </View>
                {conditionError && (
                  <TextDefault textColor={COLORS.google} style={styles.width100}>
                    {conditionError}
                  </TextDefault>
                )}
              </View>
              <View style={styles.line} />
              <View style={styles.subContainer}>
                <TextDefault
                  textColor={titleError ? COLORS.google : adColor}
                  H5
                  bold
                  style={styles.width100}>
                  Ad title *
                </TextDefault>
                <View style={[styles.textContainer, { borderColor: adColor }]}>
                  <TextInput
                    style={styles.inputText}
                    maxLength={70}
                    onFocus={() => {
                      setTitleError(null);
                      setAdColor(COLORS.selectedText);
                    }}
                    defaultValue={title}
                    onBlur={() => setAdColor(COLORS.fontMainColor)}
                    onChangeText={(text) => setTitle(text)}
                    placeholderTextColor={COLORS.fontSecondColor}
                    placeholder="Key Features of your item "
                  />
                </View>
                <TextDefault light small right style={alignment.MTxSmall}>
                  {title.length + '/ 70'}
                </TextDefault>
                {titleError && (
                  <TextDefault textColor={COLORS.google} style={styles.width100}>
                    {titleError}
                  </TextDefault>
                )}
              </View>
              <View style={styles.line} />
              <View style={styles.subContainer}>
                <TextDefault
                  textColor={descriptionError ? COLORS.google : descriptionColor}
                  H5
                  bold
                  style={styles.width100}>
                  Additional information *
                </TextDefault>
                <View style={[styles.descriptionContainer, { borderColor: descriptionColor }]}>
                  <TextInput
                    style={styles.inputText}
                    maxLength={4096}
                    multiline
                    defaultValue={description}
                    onFocus={() => {
                      setDescriptionError(null);
                      setDescriptionColor(COLORS.selectedText);
                    }}
                    onBlur={() => setDescriptionColor(COLORS.fontMainColor)}
                    onChangeText={(text) => setDescription(text)}
                    placeholderTextColor={COLORS.fontSecondColor}
                    placeholder="Include condition, features and reasons for selling "
                  />
                </View>
                <TextDefault light small right style={alignment.MTxSmall}>
                  {description.length + '/ 4096'}
                </TextDefault>
                {descriptionError && (
                  <TextDefault textColor={COLORS.google} style={styles.width100}>
                    {descriptionError}
                  </TextDefault>
                )}
              </View>
              <View style={styles.line} />
              <View style={styles.locationContainer}>
                <TextDefault textColor={locationColor} H5 bold style={styles.width100}>
                  Location *
                </TextDefault>
                <TouchableOpacity style={styles.inputConainer} onPress={toggleModal}>
                  <TextDefault style={styles.flex}>
                    {location ? location.label : 'Select Location'}
                  </TextDefault>
                  <Entypo name="chevron-down" size={scale(15)} color={COLORS.fontMainColor} />
                </TouchableOpacity>
              </View>
            </View>
            <View style={styles.buttonView}>
              <EmptyButton
                title="Next"
                // onPress={async () => {
                //   // if (validate() && subCategory) {
                //   //console.log('selling form', {id, location, description, title, condition, subCategory, editStatus, price})
                //   // await AsyncStorage.setItem(
                //   //   'formData',
                //   //   JSON.stringify({
                //   //     id,
                //   //     location,
                //   //     description,
                //   //     title,
                //   //     condition,
                //   //     subCategory,
                //   //     editStatus,
                //   //     price,
                //   //     image,
                //   //   })
                //   // );
                //   // navigation.navigate('UploadImage');
                //   // }
                // }}
                onPress={onPressNext}
              />
            </View>
          </View>
        </ScrollView>
        <ZoneModal
          visible={modalVisible}
          setZone={setLocation}
          location={location}
          onModalToggle={toggleModal}
          data={{ zones: items }}
        />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
export default React.memo(SellingForm);

================
File: screens/SellStack/SellingForm/SellingForm.types.ts
================
export type SellingFormProps = {
  editProduct?: {
    title: string;
    description: string;
    zone: { id: string; title: string };
    condition: string;
  };
  onPressNext: () => void;
};

================
File: screens/SellStack/SellingForm/index.ts
================
import SellingForm from './SellingForm';

export { SellingForm };

================
File: screens/SellStack/SellingForm/styles.ts
================
import { COLORS } from '@/constants';
import { alignment, scale, textStyles } from '@/utils';

const { StyleSheet } = require('react-native');

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  width100: {
    width: '100%',
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
    // alignItems: "center"
  },
  subContainer: {
    ...alignment.Psmall,
  },
  locationContainer: {
    ...alignment.Psmall,
  },
  line: {
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  subContainerRow: {
    width: '95%',
    flexDirection: 'row',
    alignItems: 'center',
    ...alignment.PTsmall,
    ...alignment.PBsmall,
  },
  conditionBox: {
    width: '30%',
    height: scale(35),
    ...alignment.MRsmall,
  },
  boxContainer: {
    borderWidth: StyleSheet.hairlineWidth,
    borderRadius: scale(5),
    alignItems: 'center',
    justifyContent: 'center',
  },
  notSelected: {
    backgroundColor: COLORS.themeBackground,
    borderColor: COLORS.buttonbackground,
  },
  selected: {
    backgroundColor: COLORS.selected,
    borderColor: COLORS.selectedText,
  },
  unSelectedText: {
    color: COLORS.fontMainColor,
  },
  selectedText: {
    color: COLORS.selectedText,
    ...textStyles.Bold,
  },
  scrollviewContent: {
    alignItems: 'center',
    ...alignment.PTsmall,
    ...alignment.PBsmall,
  },
  typeBox: {
    width: scale(100),
    height: scale(35),
    ...alignment.PLsmall,
    ...alignment.PRsmall,
    ...alignment.MRsmall,
  },
  textContainer: {
    backgroundColor: COLORS.themeBackground,
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    height: scale(40),
    ...alignment.MTsmall,
  },
  descriptionContainer: {
    backgroundColor: COLORS.themeBackground,
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    height: scale(70),
    ...alignment.MTsmall,
  },
  locationOptionContainer: {
    backgroundColor: COLORS.themeBackground,
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(50),
    height: scale(80),
  },
  locationItemStyle: {
    borderBottomColor: COLORS.headerbackground,
    borderBottomWidth: 1,
    ...alignment.PTmedium,
    ...alignment.PBmedium,
  },
  inputText: {
    flex: 1,
    ...textStyles.H4,
    ...alignment.PLsmall,
    ...alignment.PRsmall,
  },
  inputConainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.themeBackground,
    borderWidth: StyleSheet.hairlineWidth * 2,
    borderRadius: scale(5),
    ...alignment.Psmall,
    ...alignment.MTsmall,
  },
  buttonView: {
    width: '90%',
    alignSelf: 'center',
    ...alignment.PBsmall,
  },
});

export default styles;

================
File: screens/SellStack/SubCategories/SubCategories.tsx
================
import React from 'react';
import { FlatList, TouchableOpacity, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { SubCategoriesProps } from './SubCategories.types';
import styles from './styles';

import { TextDefault, Spinner, TextError } from '@/components';
import { COLORS } from '@/constants';

const subCategory = [
  { id: '0', title: 'Mobiles', image: require('@/assets/categoryIcon/mobile.png') },
  { id: '1', title: 'Vehicles', image: require('@/assets/categoryIcon/car.png') },
  { id: '2', title: 'Animals', image: require('@/assets/categoryIcon/pet(1).png') },
  { id: '3', title: 'Kids', image: require('@/assets/categoryIcon/stroller.png') },
  {
    id: '4',
    title: 'Property For Sale',
    image: require('@/assets/categoryIcon/sale.png'),
  },
  {
    id: '5',
    title: 'Electronics',
    image: require('@/assets/categoryIcon/monitor.png'),
  },
  { id: '6', title: 'Bikes', image: require('@/assets/categoryIcon/motorcycle.png') },
  { id: '7', title: 'Jobs', image: require('@/assets/categoryIcon/work.png') },
];

function SubCategories({ loading, data, error, onPressSubCategory }: SubCategoriesProps) {
  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      <View style={[styles.flex, styles.container]}>
        {loading ? (
          <Spinner spinnerColor={COLORS.spinnerColor1} backColor="transparent" />
        ) : error ? (
          <TextError text={error?.message || ''} />
        ) : (
          <FlatList
            data={data ? data.subCategoriesById : subCategory}
            style={styles.flatList}
            contentContainerStyle={styles.categoryContainer}
            showsHorizontalScrollIndicator={false}
            keyExtractor={(item) => item.id}
            ItemSeparatorComponent={() => <View style={styles.line} />}
            renderItem={({ item }) => (
              <TouchableOpacity
                activeOpacity={0.5}
                style={styles.categoryRow}
                // onPress={() => navigation.navigate('SellingForm', { subCategory: item._id })}
                onPress={() => onPressSubCategory(item.id)}>
                <TextDefault light H5 style={styles.fontText}>
                  {item.title}
                </TextDefault>
              </TouchableOpacity>
            )}
          />
        )}
      </View>
    </SafeAreaView>
  );
}

export default React.memo(SubCategories);

================
File: screens/SellStack/SubCategories/SubCategories.types.ts
================
export type SubCategoriesProps = {
  headerTitle?: string;
  categoryId?: string;
  loading?: boolean;
  error?: { message: string };
  onPressSubCategory: (id: string) => void;
  data?: {
    subCategoriesById: {
      id: string;
      title: string;
    }[];
  };
};

================
File: screens/SellStack/SubCategories/index.ts
================
import SubCategories from './SubCategories';

export { SubCategories };

================
File: screens/SellStack/SubCategories/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  container: {
    backgroundColor: COLORS.themeBackground,
    alignItems: 'center',
    justifyContent: 'center',
  },
  flatList: {
    width: '100%',
    backgroundColor: COLORS.themeBackground,
  },
  categoryContainer: {
    flexGrow: 1,
    ...alignment.PTmedium,
    ...alignment.PBlarge,
  },
  categoryRow: {
    height: scale(45),
    justifyContent: 'center',
  },
  fontText: {
    width: '100%',
    ...alignment.PLlarge,
    ...alignment.PRlarge,
  },
  line: {
    borderBottomColor: COLORS.horizontalLine,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});
export default styles;

================
File: screens/SellStack/UploadImages/UploadImages.tsx
================
import { SimpleLineIcons } from '@expo/vector-icons';
import React, { useEffect } from 'react';
import { Image, TouchableOpacity, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

import { UploadImageProps } from './UploadImages.types';
import styles from './styles';

import { EmptyButton, TextDefault } from '@/components';
import { COLORS } from '@/constants';
import { scale } from '@/utils';

function UploadImages({
  onPressNext,
  defaultFormData,
  onPressCaptureImage,
  onPressPickImage,
}: UploadImageProps) {
  // const [image, setImage] = useState(null);
  // const [formData, setFormData] = useState(null);

  useEffect(() => {
    didFocus();
  }, []);

  async function didFocus() {
    if (defaultFormData) {
      // setFormData(defaultFormData);
      // setImage(defaultFormData.image ?? null);
    }
  }

  return (
    <SafeAreaView edges={['bottom']} style={[styles.flex, styles.safeAreaview]}>
      <View style={[styles.flex, styles.mainContainer]}>
        <View style={styles.imgContainer}>
          <View style={styles.imgResponsive}>
            <Image style={styles.img} source={require('@/assets/photo-album.png')} />
          </View>
          <TextDefault H5 center>
            Uploading more photos increases your chance of closing a deal
          </TextDefault>
          <View style={styles.buttonContainer}>
            <TouchableOpacity
              activeOpacity={0.7}
              style={styles.iconBtn}
              onPress={onPressCaptureImage}>
              <SimpleLineIcons name="camera" size={scale(35)} color={COLORS.buttonText} />
              <TextDefault textColor={COLORS.buttonText} bold uppercase>
                Take a picture
              </TextDefault>
            </TouchableOpacity>
            <TouchableOpacity activeOpacity={0.7} style={styles.iconBtn} onPress={onPressPickImage}>
              <SimpleLineIcons name="folder-alt" size={scale(35)} color={COLORS.buttonText} />
              <TextDefault textColor={COLORS.buttonText} bold uppercase>
                Folders
              </TextDefault>
            </TouchableOpacity>
          </View>
        </View>
        <View style={styles.buttonView}>
          <EmptyButton
            // disabled={!image}
            title="Next"
            onPress={onPressNext}
          />
        </View>
      </View>
    </SafeAreaView>
  );
}
export default React.memo(UploadImages);

================
File: screens/SellStack/UploadImages/UploadImages.types.ts
================
export type UploadImageProps = {
  onPressNext: () => void;
  defaultFormData?: { image: string };
  onPressCaptureImage: () => void;
  onPressPickImage: () => void;
};

================
File: screens/SellStack/UploadImages/index.ts
================
import SellingForm from './UploadImages';

export { SellingForm };

================
File: screens/SellStack/UploadImages/styles.ts
================
import { StyleSheet } from 'react-native';

import { COLORS } from '@/constants';
import { alignment, scale } from '@/utils';

const styles = StyleSheet.create({
  flex: {
    flex: 1,
  },
  mainContainer: {
    backgroundColor: COLORS.themeBackground,
    justifyContent: 'space-between',
  },
  safeAreaview: {
    backgroundColor: COLORS.bottomTabColor,
  },
  buttonView: {
    width: '100%',
    backgroundColor: COLORS.white,
    shadowColor: COLORS.horizontalLine,
    shadowOffset: {
      width: 1,
      height: -1,
    },
    shadowOpacity: 1,
    shadowRadius: 3,
    elevation: 5,
    ...alignment.PBlarge,
    ...alignment.PLlarge,
    ...alignment.PRlarge,
  },
  imgResponsive: {
    height: scale(120),
    width: scale(120),
    ...alignment.MBlarge,
  },
  img: {
    height: undefined,
    width: undefined,
    flex: 1,
  },
  imgContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
  },
  buttonContainer: {
    flexDirection: 'row',
    width: '100%',
    justifyContent: 'space-evenly',
    ...alignment.Psmall,
    ...alignment.MTlarge,
  },
  iconBtn: {
    backgroundColor: COLORS.buttonbackground,
    justifyContent: 'center',
    alignItems: 'center',
    width: '48%',
    height: scale(110),
  },
});
export default styles;

================
File: screens/SellStack/index.ts
================
import { Categories } from './Categories';
import { LocationConfirm } from './LocationConfirm';
import { MainSell } from './MainSell';
import { Price } from './Price';
import { SellingForm } from './SellingForm';
import { SubCategories } from './SubCategories';
import UploadImages from './UploadImages/UploadImages';

export { LocationConfirm, UploadImages, MainSell, Categories, SubCategories, SellingForm, Price };

================
File: screens/index.ts
================
import {
  MainAccount,
  Help,
  Settings,
  Profile,
  Privacy,
  Notifications,
  HelpBrowser,
  Followers,
  Following,
  Authentication,
  OtpVerification,
} from './AccountStack';
import { Favourite, MainAds } from './AdsStack';
import { All, Buying, Selling } from './ChatStack';
import CurrentLocation from './CurrentLocation';
import { MainHome } from './HomeStack';
import SelectLocation from './SelectLocation';
import {
  Categories,
  LocationConfirm,
  MainSell,
  Price,
  SellingForm,
  SubCategories,
  UploadImages,
} from './SellStack';

export {
  Authentication,
  MainHome,
  CurrentLocation,
  SelectLocation,
  Favourite,
  All,
  Buying,
  MainAds,
  Selling,
  MainAccount,
  Help,
  Settings,
  Profile,
  Privacy,
  Notifications,
  SubCategories,
  HelpBrowser,
  Followers,
  Following,
  MainSell,
  Categories,
  SellingForm,
  UploadImages,
  Price,
  LocationConfirm,
  OtpVerification,
};

================
File: stack/app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet, Text } from 'react-native';

import { Container } from '@/components/Container';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <Container>
        <Text style={styles.title}>This screen doesn't exist.</Text>
        <Link href="/" style={styles.link}>
          <Text style={styles.linkText}>Go to home screen!</Text>
        </Link>
      </Container>
    </>
  );
}

const styles = StyleSheet.create({
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  link: {
    marginTop: 16,
    paddingVertical: 16,
  },
  linkText: {
    fontSize: 14,
    color: '#2e78b7',
  },
});

================
File: storage/index.ts
================
import { locationStateStorage } from './location';

export { locationStateStorage };

================
File: storage/location.ts
================
import { MMKV } from 'react-native-mmkv';
import { StateStorage } from 'zustand/middleware';

const LOCATION_ID = 'olo__location__storage';

const locationStorage = new MMKV({
  id: LOCATION_ID,
});

export const locationStateStorage: StateStorage = {
  setItem: (name, value) => {
    return locationStorage.set(name, value);
  },
  getItem: (name) => {
    const value = locationStorage.getString(name);
    return value ?? null;
  },
  removeItem: (name) => {
    return locationStorage.delete(name);
  },
};

================
File: store/auth.ts
================
import { FirebaseAuthTypes } from '@react-native-firebase/auth';
import { create } from 'zustand';

interface AuthState {
  authSkipped: boolean;
  user: FirebaseAuthTypes.User | null;
  isLoading: boolean;
  isGoogleSignInLoading: boolean;
  isPhoneVerificationLoading: boolean;
  confirm: FirebaseAuthTypes.ConfirmationResult | null;
  setUser: (user: FirebaseAuthTypes.User | null) => void;
  setIsLoading: (isLoading: boolean) => void;
  setIsGoogleSignInLoading: (isLoading: boolean) => void;
  setIsPhoneVerificationLoading: (isLoading: boolean) => void;
  setConfirm: (confirm: FirebaseAuthTypes.ConfirmationResult | null) => void;
  setAuthSkipped: (skipped: boolean) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  authSkipped: false,
  user: null,
  isLoading: true,
  isGoogleSignInLoading: false,
  isPhoneVerificationLoading: false,
  confirm: null,
  setUser: (user) => set({ user }),
  setIsLoading: (isLoading) => set({ isLoading }),
  setIsGoogleSignInLoading: (isLoading) => set({ isGoogleSignInLoading: isLoading }),
  setIsPhoneVerificationLoading: (isLoading) => set({ isPhoneVerificationLoading: isLoading }),
  setConfirm: (confirm) => set({ confirm }),
  setAuthSkipped: (skipped) => set({ authSkipped: skipped }),
}));

================
File: store/index.ts
================
import { useAuthStore } from './auth';
import { useLocationStore } from './location';

export { useLocationStore, useAuthStore };

================
File: store/location.ts
================
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

import { locationStateStorage } from '@/storage';

const LOCATION_ZUSTAND_STORAGE_KEY = 'location__storage';

export interface LocationStoreState {
  address: string;
  latitude: number;
  longitude: number;
  label: string;
  isSet: boolean;
  setLabel: (label: string) => void;
  setAddress: (address: string) => void;
  setLatitude: (latitude: number) => void;
  setLongitude: (longitude: number) => void;
  setLocation: ({
    label,
    address,
    latitude,
    longitude,
  }: {
    label: string;
    address: string;
    latitude: number;
    longitude: number;
  }) => void;
}

export const useLocationStore = create<LocationStoreState>()(
  persist(
    (set) => ({
      isSet: false,
      address: 'Current location',
      latitude: 26.867287853605735,
      longitude: 80.95443866441771,
      label: 'Current location',
      setLabel: (label) => set({ label }),
      setAddress: (address) => set({ address }),
      setLatitude: (latitude) => set({ latitude }),
      setLongitude: (longitude) => set({ longitude }),
      setLocation: ({ label, address, latitude, longitude }) =>
        set({ label, address, latitude, longitude, isSet: true }),
    }),
    {
      name: LOCATION_ZUSTAND_STORAGE_KEY,
      storage: createJSONStorage(() => locationStateStorage),
    }
  )
);

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx", ".expo/types/**/*.ts", "expo-env.d.ts"]
}

================
File: utils/alignment.ts
================
import { scale } from './scaling';

import { SIZE } from '@/constants';

export const alignment = {
  MxSmall: {
    margin: scale(SIZE.XSMALL),
  },
  MBxSmall: {
    marginBottom: scale(SIZE.XSMALL),
  },
  MTxSmall: {
    marginTop: scale(SIZE.XSMALL),
  },
  MRxSmall: {
    marginRight: scale(SIZE.XSMALL),
  },
  MLxSmall: {
    marginLeft: scale(SIZE.XSMALL),
  },

  Msmall: {
    margin: scale(SIZE.SMALL),
  },
  MBsmall: {
    marginBottom: scale(SIZE.SMALL),
  },
  MTsmall: {
    marginTop: scale(SIZE.SMALL),
  },
  MRsmall: {
    marginRight: scale(SIZE.SMALL),
  },
  MLsmall: {
    marginLeft: scale(SIZE.SMALL),
  },

  Mmedium: {
    margin: scale(SIZE.MEDIUM),
  },
  MBmedium: {
    marginBottom: scale(SIZE.MEDIUM),
  },
  MTmedium: {
    marginTop: scale(SIZE.MEDIUM),
  },
  MRmedium: {
    marginRight: scale(SIZE.MEDIUM),
  },
  MLmedium: {
    marginLeft: scale(SIZE.MEDIUM),
  },
  Mlarge: {
    margin: scale(SIZE.LARGE),
  },
  MBlarge: {
    marginBottom: scale(SIZE.LARGE),
  },
  MTlarge: {
    marginTop: scale(SIZE.LARGE),
  },
  MRlarge: {
    marginRight: scale(SIZE.LARGE),
  },
  MLlarge: {
    marginLeft: scale(SIZE.LARGE),
  },

  // Padding
  PxSmall: {
    padding: scale(SIZE.XSMALL),
  },
  PBxSmall: {
    paddingBottom: scale(SIZE.XSMALL),
  },
  PTxSmall: {
    paddingTop: scale(SIZE.XSMALL),
  },
  PRxSmall: {
    paddingRight: scale(SIZE.XSMALL),
  },
  PLxSmall: {
    paddingLeft: scale(SIZE.XSMALL),
  },

  Psmall: {
    padding: scale(SIZE.SMALL),
  },
  PBsmall: {
    paddingBottom: scale(SIZE.SMALL),
  },
  PTsmall: {
    paddingTop: scale(SIZE.SMALL),
  },
  PRsmall: {
    paddingRight: scale(SIZE.SMALL),
  },
  PLsmall: {
    paddingLeft: scale(SIZE.SMALL),
  },

  Pmedium: {
    padding: scale(SIZE.MEDIUM),
  },
  PBmedium: {
    paddingBottom: scale(SIZE.MEDIUM),
  },
  PTmedium: {
    paddingTop: scale(SIZE.MEDIUM),
  },
  PRmedium: {
    paddingRight: scale(SIZE.MEDIUM),
  },
  PLmedium: {
    paddingLeft: scale(SIZE.MEDIUM),
  },

  Plarge: {
    padding: scale(SIZE.LARGE),
  },
  PBlarge: {
    paddingBottom: scale(SIZE.LARGE),
  },
  PTlarge: {
    paddingTop: scale(SIZE.LARGE),
  },
  PRlarge: {
    paddingRight: scale(SIZE.LARGE),
  },
  PLlarge: {
    paddingLeft: scale(SIZE.LARGE),
  },
};

================
File: utils/androidBackButton.ts
================
// packages

import { Alert, BackHandler } from 'react-native';

/**
 * Attaches an event listener that handles the android-only hardware
 * back button
 * @param  {Function} callback The function to call on click
 */
const handleAndroidBackButton = (callback: () => boolean) => {
  BackHandler.addEventListener('hardwareBackPress', callback);
};
/**
 * Removes the event listener in order not to add a new one
 * every time the view component re-mounts
 */
const removeAndroidBackButtonHandler = (callback: () => boolean) => {
  BackHandler.removeEventListener('hardwareBackPress', callback);
};

const exitAlert = () => {
  Alert.alert('Confirm exit', 'Do you want to quit the app?', [
    { text: 'CANCEL', style: 'cancel' },
    {
      text: 'OK',
      onPress: () => {
        BackHandler.exitApp();
      },
    },
  ]);
  return true;
};

export { handleAndroidBackButton, removeAndroidBackButtonHandler, exitAlert };

================
File: utils/index.ts
================
import { alignment } from './alignment';
import {
  handleAndroidBackButton,
  removeAndroidBackButtonHandler,
  exitAlert,
} from './androidBackButton';
import { scale, verticalScale, moderateScale, horizontalScale } from './scaling';
import { textStyles, FONT_ALIGN, FONT_FAMILY, FONT_SIZE } from './textStyles';

export {
  scale,
  verticalScale,
  moderateScale,
  textStyles,
  handleAndroidBackButton,
  removeAndroidBackButtonHandler,
  exitAlert,
  alignment,
  FONT_ALIGN,
  FONT_FAMILY,
  FONT_SIZE,
  horizontalScale,
};

================
File: utils/scaling.ts
================
import { Dimensions } from 'react-native';

const { width, height } = Dimensions.get('window');
// Guideline sizes are based on standard ~5" screen mobile device
const guidelineBaseWidth = 350;
const guidelineBaseHeight = 680;
const scale = (size: number) => (width / guidelineBaseWidth) * size;
const verticalScale = (size: number) => (height / guidelineBaseHeight) * size;
const horizontalScale = (size: number) => (width / guidelineBaseWidth) * size;
const moderateScale = (size: number, factor = 0.5) => size + (scale(size) - size) * factor;

export { scale, verticalScale, moderateScale, horizontalScale };

================
File: utils/textStyles.ts
================
import { scale } from './scaling';

import { FONT_STYLES } from '@/constants';

export enum FONT_SIZE {
  H1 = scale(35),
  H2 = scale(24),
  H3 = scale(20),
  H4 = scale(16),
  H5 = scale(14),
  NORMAL = scale(12),
  SMALL = scale(10),
}

export enum FONT_ALIGN {
  CENTER = 'center',
  RIGHT = 'right',
  UPPERCASE = 'uppercase',
}

export enum FONT_FAMILY {
  THIN = 'Thin',
  LIGHT = 'Light',
  REGULAR = 'Regular',
  BOLD = 'Bold',
  BOLDER = 'Bolder',
}

export const textStyles = {
  H1: {
    fontSize: scale(35),
  },
  H2: {
    fontSize: scale(24),
  },
  H3: {
    fontSize: scale(20),
  },
  H4: {
    fontSize: scale(16),
  },
  H5: {
    fontSize: scale(14),
  },
  Normal: {
    fontSize: scale(12),
  },
  Small: {
    fontSize: scale(10),
  },
  Thin: {
    fontFamily: FONT_STYLES.Thin,
  },
  Light: {
    fontFamily: FONT_STYLES.Light,
  },
  Regular: {
    fontFamily: FONT_STYLES.Regular,
  },
  Bold: {
    fontFamily: FONT_STYLES.Bold,
  },
  Bolder: {
    fontFamily: FONT_STYLES.Bolder,
  },
  Center: {
    textAlign: 'center',
  },
  Right: {
    textAlign: 'right',
  },
  UpperCase: {
    textTransform: 'uppercase',
  },
};
